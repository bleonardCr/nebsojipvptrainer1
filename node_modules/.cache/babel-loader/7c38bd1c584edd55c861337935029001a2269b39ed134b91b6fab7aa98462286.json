{"ast":null,"code":"// src/battleCalc.js\n// Uses battleEngine.js for accurate turn-based PvP simulation\n\nimport { simulateBattle } from './engine/battleEngine';\nlet SPECIES = {}; // speciesId -> { atk, def, sta, types: [...] }\nlet MOVES = {}; // MOVE_ID   -> { id, kind:\"fast\"|\"charged\", type, power, energyGain, energyCost, turns }\n\n// ---------------- Utilities ----------------\nconst num = (v, d = 0) => Number.isFinite(Number(v)) ? Number(v) : d;\nfunction canonMoveId(s) {\n  if (!s) return \"\";\n  return String(s).trim().replace(/^COMBAT_V\\d+_MOVE_/i, \"\").replace(/^V\\d+_/i, \"\").replace(/[^A-Za-z0-9]+/g, \"_\").replace(/_+/g, \"_\").replace(/^_|_$/g, \"\").toUpperCase();\n}\nfunction normId(s) {\n  return String(s || '').toLowerCase().replace(/[^\\w]+/g, '_').replace(/^_+|_+$/g, '');\n}\nfunction capLeague(league) {\n  var _map$league;\n  const map = {\n    \"Great League\": 1500,\n    \"Ultra League\": 2500,\n    \"Master League\": Infinity\n  };\n  return typeof league === \"string\" ? (_map$league = map[league]) !== null && _map$league !== void 0 ? _map$league : Infinity : Number.isFinite(league) ? Number(league) : Infinity;\n}\n\n// ---------------- CP multipliers (0.5 levels to 50) ----------------\nconst CPM = [];\n(function fillCPM() {\n  const table = [0.094, 0.135137432, 0.16639787, 0.192650919, 0.21573247, 0.236572661, 0.25572005, 0.273530381, 0.29024988, 0.306057377, 0.3210876, 0.335445036, 0.34921268, 0.362457751, 0.37523559, 0.387592406, 0.39956728, 0.411193551, 0.42250001, 0.432926419, 0.44310755, 0.4530599578, 0.46279839, 0.472336083, 0.48168495, 0.4908558, 0.49985844, 0.508701765, 0.51739395, 0.525942511, 0.53435433, 0.542635767, 0.55079269, 0.558830576, 0.56675452, 0.574569153, 0.58227891, 0.589887907, 0.59740001, 0.604818814, 0.61215729, 0.619399365, 0.62656713, 0.633644533, 0.64065295, 0.647576426, 0.65443563, 0.661214806, 0.667934, 0.674577537, 0.68116492, 0.687680648, 0.69414365, 0.700538673, 0.70688421, 0.713164996, 0.71939909, 0.725571552, 0.7317, 0.734741009, 0.73776948, 0.740785574, 0.74378943, 0.746781211, 0.74976104, 0.752729087, 0.75568551, 0.758630378, 0.76156384, 0.764486065, 0.76739717, 0.770297266, 0.7731865, 0.776064962, 0.77893275, 0.781790055, 0.78463697, 0.787473578, 0.79030001, 0.792803968, 0.79530001, 0.797803921, 0.8003];\n  CPM.length = 100;\n  CPM.fill(0);\n  for (let i = 0; i < table.length; i++) CPM[i + 1] = table[i];\n})();\nfunction cp(a, d, s, c) {\n  return Math.floor(a * Math.sqrt(d) * Math.sqrt(s) * c * c / 10);\n}\nfunction levelForCap(baseAtk, baseDef, baseSta, cap) {\n  if (!isFinite(cap)) return 50;\n  let best = 1;\n  for (let i = 1; i < CPM.length; i++) {\n    const c = CPM[i];\n    if (!c) continue;\n    if (cp(baseAtk * c, baseDef * c, baseSta * c, 1) <= cap) best = i;\n  }\n  return best;\n}\n\n// ---------------- Build species & move books from GM ----------------\nfunction buildSpeciesBook(gm) {\n  var _gm$data;\n  const lists = [gm === null || gm === void 0 ? void 0 : gm.pokemon, gm === null || gm === void 0 ? void 0 : (_gm$data = gm.data) === null || _gm$data === void 0 ? void 0 : _gm$data.pokemon, gm === null || gm === void 0 ? void 0 : gm.species, gm === null || gm === void 0 ? void 0 : gm.pokemonList, gm === null || gm === void 0 ? void 0 : gm.pokemonSettings].filter(Boolean);\n  const out = {};\n  for (const L of lists) {\n    for (const p of L) {\n      var _ref, _ref2, _p$baseAttack, _ref3, _ref4, _p$baseDefense, _ref5, _ref6, _p$baseStamina;\n      const id = normId(p.speciesId || p.pokemonId || p.templateId || p.id || p.name);\n      if (!id) continue;\n      const bs = p.baseStats || p.stats || {};\n      const atk = num((_ref = (_ref2 = (_p$baseAttack = p.baseAttack) !== null && _p$baseAttack !== void 0 ? _p$baseAttack : bs.atk) !== null && _ref2 !== void 0 ? _ref2 : bs.attack) !== null && _ref !== void 0 ? _ref : p.attack, 200);\n      const def = num((_ref3 = (_ref4 = (_p$baseDefense = p.baseDefense) !== null && _p$baseDefense !== void 0 ? _p$baseDefense : bs.def) !== null && _ref4 !== void 0 ? _ref4 : bs.defense) !== null && _ref3 !== void 0 ? _ref3 : p.defense, 200);\n      const sta = num((_ref5 = (_ref6 = (_p$baseStamina = p.baseStamina) !== null && _p$baseStamina !== void 0 ? _p$baseStamina : bs.sta) !== null && _ref6 !== void 0 ? _ref6 : bs.stamina) !== null && _ref5 !== void 0 ? _ref5 : p.stamina, 200);\n      const typesArr = p.types || [p.type1, p.type2].filter(Boolean);\n      const types = (typesArr || []).map(t => t.replace(/^POKEMON_TYPE_/, '').toLowerCase());\n      out[id] = {\n        atk,\n        def,\n        sta,\n        types: types.length ? types : [\"normal\"]\n      };\n    }\n  }\n  return out;\n}\nexport function buildMoveBook(gm) {\n  var _gm$data2, _gm$data3;\n  SPECIES = buildSpeciesBook(gm);\n  const pools = [gm === null || gm === void 0 ? void 0 : gm.moves, gm === null || gm === void 0 ? void 0 : gm.combatMoves, gm === null || gm === void 0 ? void 0 : (_gm$data2 = gm.data) === null || _gm$data2 === void 0 ? void 0 : _gm$data2.moves, gm === null || gm === void 0 ? void 0 : (_gm$data3 = gm.data) === null || _gm$data3 === void 0 ? void 0 : _gm$data3.combatMoves, gm === null || gm === void 0 ? void 0 : gm.moveList].filter(Boolean);\n  const out = {};\n  for (const list of pools) {\n    for (const m of list) {\n      var _ref7, _ref8, _ref9, _ref0, _m$moveId, _ref1, _ref10, _m$pvpPower, _ref11, _m$durationTurns;\n      const rawId = (_ref7 = (_ref8 = (_ref9 = (_ref0 = (_m$moveId = m.moveId) !== null && _m$moveId !== void 0 ? _m$moveId : m.id) !== null && _ref0 !== void 0 ? _ref0 : m.uniqueId) !== null && _ref9 !== void 0 ? _ref9 : m.templateId) !== null && _ref8 !== void 0 ? _ref8 : m.name) !== null && _ref7 !== void 0 ? _ref7 : \"\";\n      const id = canonMoveId(rawId);\n      if (!id) continue;\n      const type = (m.type || m.pokemonType || m.moveType || \"Normal\").replace(/^POKEMON_TYPE_/, '').toLowerCase();\n      const power = num((_ref1 = (_ref10 = (_m$pvpPower = m.pvpPower) !== null && _m$pvpPower !== void 0 ? _m$pvpPower : m.power) !== null && _ref10 !== void 0 ? _ref10 : m.combatPower) !== null && _ref1 !== void 0 ? _ref1 : m.damage, 3);\n      let kind = \"fast\",\n        energyGain = 0,\n        energyCost = 0,\n        turns = 1;\n      if (m.energyDelta != null) {\n        const ed = num(m.energyDelta, 0);\n        if (ed > 0) {\n          kind = \"fast\";\n          energyGain = ed;\n        }\n        if (ed < 0) {\n          kind = \"charged\";\n          energyCost = Math.abs(ed);\n        }\n      }\n      if (m.energyGain != null) {\n        kind = \"fast\";\n        energyGain = num(m.energyGain, 0);\n      }\n      if (m.energy != null) {\n        kind = \"charged\";\n        energyCost = Math.abs(num(m.energy, 0));\n      }\n      turns = num((_ref11 = (_m$durationTurns = m.durationTurns) !== null && _m$durationTurns !== void 0 ? _m$durationTurns : m.turns) !== null && _ref11 !== void 0 ? _ref11 : m.cooldownTurns, kind === \"fast\" ? 1 : 0);\n      if (kind === \"fast\") turns = Math.max(1, Math.floor(turns) || 1);\n      if (kind === \"fast\" && energyGain <= 0) energyGain = 8;\n      if (kind === \"charged\" && energyCost <= 0) energyCost = 45;\n      const mv = {\n        id,\n        kind,\n        type,\n        power,\n        energyGain,\n        energyCost,\n        turns\n      };\n      if (!out[id] || power > out[id].power) out[id] = mv;\n    }\n  }\n  out.TACKLE = out.TACKLE || {\n    id: \"TACKLE\",\n    kind: \"fast\",\n    type: \"normal\",\n    power: 3,\n    energyGain: 8,\n    energyCost: 0,\n    turns: 1\n  };\n  MOVES = out;\n  return out;\n}\n\n// ---------------- Adapter to battleEngine format ----------------\nfunction toBattleEngineSide(src, leagueName, shields) {\n  const cap = capLeague(leagueName);\n  const sid = normId(src.speciesId || src.name);\n  const base = SPECIES[sid] || {\n    atk: 200,\n    def: 200,\n    sta: 200,\n    types: [\"normal\"]\n  };\n  const lvl = levelForCap(base.atk, base.def, base.sta, cap);\n  const fast = MOVES[canonMoveId(src.fastMove)] || MOVES.TACKLE;\n  const chargedMoves = (src.chargedMoves || []).map(canonMoveId).map(id => MOVES[id]).filter(Boolean);\n  return {\n    name: src.name || src.speciesId,\n    types: base.types,\n    base: {\n      atk: base.atk,\n      def: base.def,\n      hp: base.sta\n    },\n    iv: {\n      atk: 15,\n      def: 15,\n      hp: 15\n    },\n    level: lvl,\n    isShadow: !!src.shadowType,\n    shields,\n    fastMove: {\n      type: fast.type,\n      power: fast.power,\n      energyGain: fast.energyGain,\n      durationTurns: fast.turns\n    },\n    chargedMoves: chargedMoves.map(m => ({\n      type: m.type,\n      power: m.power,\n      energyCost: m.energyCost\n    }))\n  };\n}\n\n// ---------------- Simulate one duel ----------------\nexport function simulateDuel(attackerIn, defenderIn, shieldsA = 2, shieldsB = 2, _book = MOVES, leagueName = \"Master League\") {\n  var _p1$chargedMoves$, _p2$chargedMoves$;\n  const p1 = toBattleEngineSide(attackerIn, leagueName, shieldsA);\n  const p2 = toBattleEngineSide(defenderIn, leagueName, shieldsB);\n  const result = simulateBattle(p1, p2);\n  return {\n    winner: result.result === 'draw' ? 'Draw' : result.result === 'p1' ? p1.name : p2.name,\n    aHP: result.p1.hp,\n    bHP: result.p2.hp,\n    aRecommended: ((_p1$chargedMoves$ = p1.chargedMoves[0]) === null || _p1$chargedMoves$ === void 0 ? void 0 : _p1$chargedMoves$.type) || null,\n    bRecommended: ((_p2$chargedMoves$ = p2.chargedMoves[0]) === null || _p2$chargedMoves$ === void 0 ? void 0 : _p2$chargedMoves$.type) || null,\n    summary: []\n  };\n}\n\n// ---------------- Best-of-three wrapper ----------------\nexport function bestOfThree(mine, enemy, myShields, foeShields, _book = MOVES, leagueName = \"Master League\") {\n  const fights = mine.map(m => {\n    const you = {\n      ...m,\n      name: m.name || m.speciesId\n    };\n    const foe = {\n      ...enemy,\n      name: enemy.name || enemy.speciesId\n    };\n    const r = simulateDuel(you, foe, myShields, foeShields, MOVES, leagueName);\n    const score = r.winner === you.name ? 1 : r.winner === \"Draw\" ? 0 : -1;\n    return {\n      you: you.name,\n      vs: foe.name,\n      ...r,\n      score\n    };\n  });\n  fights.sort((a, b) => b.score - a.score || b.aHP - a.aHP || b.bHP - a.bHP);\n  return {\n    best: fights[0],\n    fights\n  };\n}","map":{"version":3,"names":["simulateBattle","SPECIES","MOVES","num","v","d","Number","isFinite","canonMoveId","s","String","trim","replace","toUpperCase","normId","toLowerCase","capLeague","league","_map$league","map","Infinity","CPM","fillCPM","table","length","fill","i","cp","a","c","Math","floor","sqrt","levelForCap","baseAtk","baseDef","baseSta","cap","best","buildSpeciesBook","gm","_gm$data","lists","pokemon","data","species","pokemonList","pokemonSettings","filter","Boolean","out","L","p","_ref","_ref2","_p$baseAttack","_ref3","_ref4","_p$baseDefense","_ref5","_ref6","_p$baseStamina","id","speciesId","pokemonId","templateId","name","bs","baseStats","stats","atk","baseAttack","attack","def","baseDefense","defense","sta","baseStamina","stamina","typesArr","types","type1","type2","t","buildMoveBook","_gm$data2","_gm$data3","pools","moves","combatMoves","moveList","list","m","_ref7","_ref8","_ref9","_ref0","_m$moveId","_ref1","_ref10","_m$pvpPower","_ref11","_m$durationTurns","rawId","moveId","uniqueId","type","pokemonType","moveType","power","pvpPower","combatPower","damage","kind","energyGain","energyCost","turns","energyDelta","ed","abs","energy","durationTurns","cooldownTurns","max","mv","TACKLE","toBattleEngineSide","src","leagueName","shields","sid","base","lvl","fast","fastMove","chargedMoves","hp","iv","level","isShadow","shadowType","simulateDuel","attackerIn","defenderIn","shieldsA","shieldsB","_book","_p1$chargedMoves$","_p2$chargedMoves$","p1","p2","result","winner","aHP","bHP","aRecommended","bRecommended","summary","bestOfThree","mine","enemy","myShields","foeShields","fights","you","foe","r","score","vs","sort","b"],"sources":["C:/Users/ben/Projects/nebsojipvptrainer/src/battleCalc.js"],"sourcesContent":["// src/battleCalc.js\r\n// Uses battleEngine.js for accurate turn-based PvP simulation\r\n\r\nimport { simulateBattle } from './engine/battleEngine';\r\n\r\nlet SPECIES = {};  // speciesId -> { atk, def, sta, types: [...] }\r\nlet MOVES = {};    // MOVE_ID   -> { id, kind:\"fast\"|\"charged\", type, power, energyGain, energyCost, turns }\r\n\r\n// ---------------- Utilities ----------------\r\nconst num = (v, d = 0) => (Number.isFinite(Number(v)) ? Number(v) : d);\r\n\r\nfunction canonMoveId(s) {\r\n    if (!s) return \"\";\r\n    return String(s)\r\n        .trim()\r\n        .replace(/^COMBAT_V\\d+_MOVE_/i, \"\")\r\n        .replace(/^V\\d+_/i, \"\")\r\n        .replace(/[^A-Za-z0-9]+/g, \"_\")\r\n        .replace(/_+/g, \"_\")\r\n        .replace(/^_|_$/g, \"\")\r\n        .toUpperCase();\r\n}\r\nfunction normId(s) { return String(s || '').toLowerCase().replace(/[^\\w]+/g, '_').replace(/^_+|_+$/g, ''); }\r\nfunction capLeague(league) {\r\n    const map = { \"Great League\": 1500, \"Ultra League\": 2500, \"Master League\": Infinity };\r\n    return typeof league === \"string\" ? (map[league] ?? Infinity) : (Number.isFinite(league) ? Number(league) : Infinity);\r\n}\r\n\r\n// ---------------- CP multipliers (0.5 levels to 50) ----------------\r\nconst CPM = [];\r\n(function fillCPM() {\r\n    const table = [\r\n        0.094, 0.135137432, 0.16639787, 0.192650919, 0.21573247, 0.236572661, 0.25572005, 0.273530381,\r\n        0.29024988, 0.306057377, 0.3210876, 0.335445036, 0.34921268, 0.362457751, 0.37523559, 0.387592406,\r\n        0.39956728, 0.411193551, 0.42250001, 0.432926419, 0.44310755, 0.4530599578, 0.46279839, 0.472336083,\r\n        0.48168495, 0.4908558, 0.49985844, 0.508701765, 0.51739395, 0.525942511, 0.53435433, 0.542635767,\r\n        0.55079269, 0.558830576, 0.56675452, 0.574569153, 0.58227891, 0.589887907, 0.59740001, 0.604818814,\r\n        0.61215729, 0.619399365, 0.62656713, 0.633644533, 0.64065295, 0.647576426, 0.65443563, 0.661214806,\r\n        0.667934, 0.674577537, 0.68116492, 0.687680648, 0.69414365, 0.700538673, 0.70688421, 0.713164996,\r\n        0.71939909, 0.725571552, 0.7317, 0.734741009, 0.73776948, 0.740785574, 0.74378943, 0.746781211,\r\n        0.74976104, 0.752729087, 0.75568551, 0.758630378, 0.76156384, 0.764486065, 0.76739717, 0.770297266,\r\n        0.7731865, 0.776064962, 0.77893275, 0.781790055, 0.78463697, 0.787473578, 0.79030001, 0.792803968,\r\n        0.79530001, 0.797803921, 0.8003\r\n    ];\r\n    CPM.length = 100; CPM.fill(0);\r\n    for (let i = 0; i < table.length; i++) CPM[i + 1] = table[i];\r\n})();\r\nfunction cp(a, d, s, c) { return Math.floor((a * Math.sqrt(d) * Math.sqrt(s) * c * c) / 10); }\r\nfunction levelForCap(baseAtk, baseDef, baseSta, cap) {\r\n    if (!isFinite(cap)) return 50;\r\n    let best = 1;\r\n    for (let i = 1; i < CPM.length; i++) {\r\n        const c = CPM[i]; if (!c) continue;\r\n        if (cp(baseAtk * c, baseDef * c, baseSta * c, 1) <= cap) best = i;\r\n    }\r\n    return best;\r\n}\r\n\r\n// ---------------- Build species & move books from GM ----------------\r\nfunction buildSpeciesBook(gm) {\r\n    const lists = [\r\n        gm?.pokemon, gm?.data?.pokemon, gm?.species, gm?.pokemonList, gm?.pokemonSettings\r\n    ].filter(Boolean);\r\n    const out = {};\r\n    for (const L of lists) {\r\n        for (const p of L) {\r\n            const id = normId(p.speciesId || p.pokemonId || p.templateId || p.id || p.name);\r\n            if (!id) continue;\r\n            const bs = p.baseStats || p.stats || {};\r\n            const atk = num(p.baseAttack ?? bs.atk ?? bs.attack ?? p.attack, 200);\r\n            const def = num(p.baseDefense ?? bs.def ?? bs.defense ?? p.defense, 200);\r\n            const sta = num(p.baseStamina ?? bs.sta ?? bs.stamina ?? p.stamina, 200);\r\n            const typesArr = p.types || [p.type1, p.type2].filter(Boolean);\r\n            const types = (typesArr || []).map(t => t.replace(/^POKEMON_TYPE_/, '').toLowerCase());\r\n            out[id] = { atk, def, sta, types: types.length ? types : [\"normal\"] };\r\n        }\r\n    }\r\n    return out;\r\n}\r\n\r\nexport function buildMoveBook(gm) {\r\n    SPECIES = buildSpeciesBook(gm);\r\n    const pools = [gm?.moves, gm?.combatMoves, gm?.data?.moves, gm?.data?.combatMoves, gm?.moveList].filter(Boolean);\r\n    const out = {};\r\n\r\n    for (const list of pools) {\r\n        for (const m of list) {\r\n            const rawId = m.moveId ?? m.id ?? m.uniqueId ?? m.templateId ?? m.name ?? \"\";\r\n            const id = canonMoveId(rawId);\r\n            if (!id) continue;\r\n\r\n            const type = (m.type || m.pokemonType || m.moveType || \"Normal\").replace(/^POKEMON_TYPE_/, '').toLowerCase();\r\n            const power = num(m.pvpPower ?? m.power ?? m.combatPower ?? m.damage, 3);\r\n\r\n            let kind = \"fast\", energyGain = 0, energyCost = 0, turns = 1;\r\n            if (m.energyDelta != null) { const ed = num(m.energyDelta, 0); if (ed > 0) { kind = \"fast\"; energyGain = ed; } if (ed < 0) { kind = \"charged\"; energyCost = Math.abs(ed); } }\r\n            if (m.energyGain != null) { kind = \"fast\"; energyGain = num(m.energyGain, 0); }\r\n            if (m.energy != null) { kind = \"charged\"; energyCost = Math.abs(num(m.energy, 0)); }\r\n            turns = num(m.durationTurns ?? m.turns ?? m.cooldownTurns, kind === \"fast\" ? 1 : 0);\r\n            if (kind === \"fast\") turns = Math.max(1, Math.floor(turns) || 1);\r\n\r\n            if (kind === \"fast\" && energyGain <= 0) energyGain = 8;\r\n            if (kind === \"charged\" && energyCost <= 0) energyCost = 45;\r\n\r\n            const mv = { id, kind, type, power, energyGain, energyCost, turns };\r\n            if (!out[id] || power > out[id].power) out[id] = mv;\r\n        }\r\n    }\r\n\r\n    out.TACKLE = out.TACKLE || { id: \"TACKLE\", kind: \"fast\", type: \"normal\", power: 3, energyGain: 8, energyCost: 0, turns: 1 };\r\n\r\n    MOVES = out;\r\n    return out;\r\n}\r\n\r\n// ---------------- Adapter to battleEngine format ----------------\r\nfunction toBattleEngineSide(src, leagueName, shields) {\r\n    const cap = capLeague(leagueName);\r\n    const sid = normId(src.speciesId || src.name);\r\n    const base = SPECIES[sid] || { atk: 200, def: 200, sta: 200, types: [\"normal\"] };\r\n    const lvl = levelForCap(base.atk, base.def, base.sta, cap);\r\n\r\n    const fast = MOVES[canonMoveId(src.fastMove)] || MOVES.TACKLE;\r\n    const chargedMoves = (src.chargedMoves || [])\r\n        .map(canonMoveId)\r\n        .map(id => MOVES[id])\r\n        .filter(Boolean);\r\n\r\n    return {\r\n        name: src.name || src.speciesId,\r\n        types: base.types,\r\n        base: { atk: base.atk, def: base.def, hp: base.sta },\r\n        iv: { atk: 15, def: 15, hp: 15 },\r\n        level: lvl,\r\n        isShadow: !!src.shadowType,\r\n        shields,\r\n        fastMove: {\r\n            type: fast.type,\r\n            power: fast.power,\r\n            energyGain: fast.energyGain,\r\n            durationTurns: fast.turns\r\n        },\r\n        chargedMoves: chargedMoves.map(m => ({\r\n            type: m.type,\r\n            power: m.power,\r\n            energyCost: m.energyCost\r\n        }))\r\n    };\r\n}\r\n\r\n// ---------------- Simulate one duel ----------------\r\nexport function simulateDuel(attackerIn, defenderIn, shieldsA = 2, shieldsB = 2, _book = MOVES, leagueName = \"Master League\") {\r\n    const p1 = toBattleEngineSide(attackerIn, leagueName, shieldsA);\r\n    const p2 = toBattleEngineSide(defenderIn, leagueName, shieldsB);\r\n\r\n    const result = simulateBattle(p1, p2);\r\n\r\n    return {\r\n        winner: result.result === 'draw' ? 'Draw' : (result.result === 'p1' ? p1.name : p2.name),\r\n        aHP: result.p1.hp,\r\n        bHP: result.p2.hp,\r\n        aRecommended: p1.chargedMoves[0]?.type || null,\r\n        bRecommended: p2.chargedMoves[0]?.type || null,\r\n        summary: []\r\n    };\r\n}\r\n\r\n// ---------------- Best-of-three wrapper ----------------\r\nexport function bestOfThree(mine, enemy, myShields, foeShields, _book = MOVES, leagueName = \"Master League\") {\r\n    const fights = mine.map(m => {\r\n        const you = { ...m, name: m.name || m.speciesId };\r\n        const foe = { ...enemy, name: enemy.name || enemy.speciesId };\r\n        const r = simulateDuel(you, foe, myShields, foeShields, MOVES, leagueName);\r\n        const score = r.winner === you.name ? 1 : (r.winner === \"Draw\" ? 0 : -1);\r\n        return { you: you.name, vs: foe.name, ...r, score };\r\n    });\r\n    fights.sort((a, b) => (b.score - a.score) || (b.aHP - a.aHP) || (b.bHP - a.bHP));\r\n    return { best: fights[0], fights };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}