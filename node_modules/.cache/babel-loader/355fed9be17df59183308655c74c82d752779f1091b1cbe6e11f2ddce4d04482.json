{"ast":null,"code":"// src/engine/battleEngine.js\n// Turn-accurate PvP-lite engine with CMP, EV-based shielding, and bait logic.\n\nconst STAB = 1.2;\n\n// Minimal type chart (attacking -> defending multiplier)\nconst TYPES = [\"normal\", \"fighting\", \"flying\", \"poison\", \"ground\", \"rock\", \"bug\", \"ghost\", \"steel\", \"fire\", \"water\", \"grass\", \"electric\", \"psychic\", \"ice\", \"dragon\", \"dark\", \"fairy\"];\nconst EFF = {};\nTYPES.forEach(a => {\n  EFF[a] = {};\n  TYPES.forEach(d => EFF[a][d] = 1);\n});\nfunction S(a, arr, m) {\n  arr.forEach(d => EFF[a][d] = m);\n}\n_c = S;\nS(\"fighting\", [\"normal\", \"rock\", \"ice\", \"dark\", \"steel\"], 1.6);\nS(\"fighting\", [\"flying\", \"poison\", \"bug\", \"psychic\", \"fairy\"], 0.625);\nS(\"flying\", [\"fighting\", \"bug\", \"grass\"], 1.6);\nS(\"flying\", [\"rock\", \"steel\", \"electric\"], 0.625);\nS(\"poison\", [\"grass\", \"fairy\"], 1.6);\nS(\"poison\", [\"poison\", \"ground\", \"rock\", \"ghost\"], 0.625);\nS(\"poison\", [\"steel\"], 0.390625);\nS(\"ground\", [\"poison\", \"rock\", \"steel\", \"fire\", \"electric\"], 1.6);\nS(\"ground\", [\"bug\", \"grass\"], 0.625);\nS(\"ground\", [\"flying\"], 0.390625);\nS(\"rock\", [\"flying\", \"bug\", \"fire\", \"ice\"], 1.6);\nS(\"rock\", [\"fighting\", \"ground\", \"steel\"], 0.625);\nS(\"bug\", [\"grass\", \"psychic\", \"dark\"], 1.6);\nS(\"bug\", [\"fighting\", \"flying\", \"poison\", \"ghost\", \"steel\", \"fire\", \"fairy\"], 0.625);\nS(\"ghost\", [\"ghost\", \"psychic\"], 1.6);\nS(\"ghost\", [\"dark\"], 0.625);\nS(\"steel\", [\"rock\", \"ice\", \"fairy\"], 1.6);\nS(\"steel\", [\"steel\", \"fire\", \"water\", \"electric\"], 0.625);\nS(\"fire\", [\"bug\", \"steel\", \"grass\", \"ice\"], 1.6);\nS(\"fire\", [\"rock\", \"fire\", \"water\", \"dragon\"], 0.625);\nS(\"water\", [\"ground\", \"rock\", \"fire\"], 1.6);\nS(\"water\", [\"water\", \"grass\", \"dragon\"], 0.625);\nS(\"grass\", [\"ground\", \"rock\", \"water\"], 1.6);\nS(\"grass\", [\"flying\", \"poison\", \"bug\", \"steel\", \"fire\", \"grass\", \"dragon\"], 0.625);\nS(\"electric\", [\"flying\", \"water\"], 1.6);\nS(\"electric\", [\"grass\", \"electric\", \"dragon\"], 0.625);\nS(\"electric\", [\"ground\"], 0.390625);\nS(\"psychic\", [\"fighting\", \"poison\"], 1.6);\nS(\"psychic\", [\"psychic\", \"steel\"], 0.625);\nS(\"psychic\", [\"dark\"], 0.390625);\nS(\"ice\", [\"flying\", \"ground\", \"grass\", \"dragon\"], 1.6);\nS(\"ice\", [\"steel\", \"fire\", \"water\", \"ice\"], 0.625);\nS(\"dragon\", [\"dragon\"], 1.6);\nS(\"dragon\", [\"steel\"], 0.625);\nS(\"dragon\", [\"fairy\"], 0.390625);\nS(\"dark\", [\"ghost\", \"psychic\"], 1.6);\nS(\"dark\", [\"fighting\", \"dark\", \"fairy\"], 0.625);\nS(\"fairy\", [\"fighting\", \"dragon\", \"dark\"], 1.6);\nS(\"fairy\", [\"poison\", \"steel\", \"fire\"], 0.625);\nconst n = (v, d = 0) => Number.isFinite(Number(v)) ? Number(v) : d;\nconst eff = (type, defs) => defs.reduce((m, t) => {\n  var _EFF$type$t, _EFF$type;\n  return m * ((_EFF$type$t = (_EFF$type = EFF[type]) === null || _EFF$type === void 0 ? void 0 : _EFF$type[t]) !== null && _EFF$type$t !== void 0 ? _EFF$type$t : 1);\n}, 1);\nconst dmg = (power, atk, def, stab, mult) => Math.max(1, Math.floor(0.5 * n(power, 0) * (n(atk, 1) / Math.max(1, n(def, 1))) * (stab || 1) * (mult || 1)) + 1);\n\n// Enrich a side with stats and moves\nfunction buildSide(raw, moves) {\n  // Level scaling already done by the adapter; we just respect base + level via multipliers\n  const base = raw.base || {\n    atk: 200,\n    def: 200,\n    sta: 200,\n    types: [\"normal\"]\n  };\n  const cpm = 1; // already capped in adapter â€“ keep 1.0 here\n  const types = (base.types || [\"normal\"]).map(t => String(t).toLowerCase());\n  const fast = moves[String(raw.fastMove || \"\").toUpperCase()] || moves.TACKLE || {\n    id: \"TACKLE\",\n    kind: \"fast\",\n    type: \"normal\",\n    power: 3,\n    energyGain: 8,\n    energyCost: 0,\n    turns: 1\n  };\n  const charged = (raw.chargedMoves || []).map(id => moves[String(id || \"\").toUpperCase()]).filter(Boolean);\n  const Atk = base.atk * cpm;\n  const Def = base.def * cpm;\n  const HP = Math.max(1, Math.floor(base.sta * cpm));\n  return {\n    name: raw.name || raw.speciesId,\n    types,\n    Atk,\n    Def,\n    MaxHP: HP,\n    HP,\n    fast,\n    charged,\n    energy: 0,\n    shields: Math.max(0, raw.shields | 0),\n    cd: (fast === null || fast === void 0 ? void 0 : fast.turns) || 1 // cooldown turns left for fast landing\n  };\n}\nfunction turnsToCharge(user, needed) {\n  var _user$fast, _user$fast2;\n  const gain = n((_user$fast = user.fast) === null || _user$fast === void 0 ? void 0 : _user$fast.energyGain, 0);\n  const t = Math.max(1, ((_user$fast2 = user.fast) === null || _user$fast2 === void 0 ? void 0 : _user$fast2.turns) || 1);\n  if (gain <= 0) return 999;\n  const cycles = Math.ceil(needed / gain);\n  return cycles * t;\n}\nfunction expectedFastDamage(user, foe, turns) {\n  const fm = user.fast;\n  if (!fm) return 0;\n  const stab = user.types.includes(fm.type) ? STAB : 1;\n  const mult = eff(fm.type, foe.types);\n  const per = dmg(fm.power, user.Atk, foe.Def, stab, mult);\n  const lands = Math.floor(turns / (fm.turns || 1));\n  return per * Math.max(0, lands);\n}\n\n// EV-based shouldShield\nfunction shouldShield(defender, incoming, attacker) {\n  var _defender$charged;\n  const shieldsLeft = defender.shields | 0;\n  if (shieldsLeft <= 0) return false;\n  const stabIn = attacker.types.includes(incoming.type) ? STAB : 1;\n  const multIn = eff(incoming.type, defender.types);\n  const hit = dmg(incoming.power, attacker.Atk, defender.Def, stabIn, multIn);\n  if (hit >= defender.HP) return true; // lethal\n\n  const H = 12;\n  const hpAfter = Math.max(0, defender.HP - hit);\n  const myDmgNoShield = expectedFastDamage(defender, attacker, H * (hpAfter > 0 ? 1 : 0));\n  const myDmgShield = expectedFastDamage(defender, attacker, H);\n\n  // bonus if shielding lets me reach my own charged in horizon\n  let swingBonus = 0;\n  if ((_defender$charged = defender.charged) !== null && _defender$charged !== void 0 && _defender$charged.length) {\n    const best = defender.charged.reduce((a, b) => {\n      const da = dmg(a.power, defender.Atk, attacker.Def, defender.types.includes(a.type) ? STAB : 1, eff(a.type, attacker.types));\n      const db = dmg(b.power, defender.Atk, attacker.Def, defender.types.includes(b.type) ? STAB : 1, eff(b.type, attacker.types));\n      return db > da ? b : a;\n    });\n    const need = Math.max(0, (best.energyCost || 45) - defender.energy);\n    const tt = turnsToCharge(defender, need);\n    if (tt <= H) {\n      const myHit = dmg(best.power, defender.Atk, attacker.Def, defender.types.includes(best.type) ? STAB : 1, eff(best.type, attacker.types));\n      if (hpAfter <= defender.MaxHP * 0.35) swingBonus = myHit * 0.5;\n    }\n  }\n  const prudence = shieldsLeft === 1 ? 1.15 : 1.0;\n  return (myDmgShield + swingBonus) * prudence > myDmgNoShield;\n}\n\n// choose charged (with baiting)\nfunction chooseThrow(user, foe) {\n  const ready = (user.charged || []).filter(m => user.energy >= (m.energyCost || 45));\n  if (!ready.length) return null;\n  const realDmg = m => {\n    const stab = user.types.includes(m.type) ? STAB : 1;\n    const mult = eff(m.type, foe.types);\n    return dmg(m.power, user.Atk, foe.Def, stab, mult);\n  };\n  const nuke = [...ready].sort((a, b) => realDmg(b) - realDmg(a))[0];\n  const bait = [...ready].sort((a, b) => (a.energyCost || 45) - (b.energyCost || 45))[0];\n  if ((foe.shields | 0) <= 0) return nuke;\n  if (realDmg(nuke) >= foe.HP) return nuke;\n  const evNuke = 0 - (nuke.energyCost || 45) * 0.05;\n  const evBaitNow = 0 - (bait.energyCost || 45) * 0.02;\n  const toNukeAfterBait = Math.max(0, (nuke.energyCost || 45) - (user.energy - (bait.energyCost || 45)));\n  const toNukeTurns = turnsToCharge(user, toNukeAfterBait);\n  const followReward = realDmg(nuke) * (toNukeTurns <= 8 ? 0.7 : 0.4);\n  return evBaitNow + followReward > evNuke ? bait : nuke;\n}\n\n// main loop\nexport function simulateBattle(p1raw, p2raw, MOVES) {\n  var _A$fast, _B$fast;\n  const A = buildSide(p1raw, MOVES);\n  const B = buildSide(p2raw, MOVES);\n  const pickBest = (att, def) => {\n    const best = (att.charged || []).reduce((best, m) => {\n      const stab = att.types.includes(m.type) ? STAB : 1;\n      const mult = eff(m.type, def.types);\n      const val = dmg(m.power, att.Atk, def.Def, stab, mult);\n      return !best || val > best._val ? {\n        ...m,\n        _val: val\n      } : best;\n    }, null);\n    return (best === null || best === void 0 ? void 0 : best.id) || null;\n  };\n  const p1Best = pickBest(A, B);\n  const p2Best = pickBest(B, A);\n\n  // initialize cooldowns so first fast lands at its \"turns\"\n  A.cd = ((_A$fast = A.fast) === null || _A$fast === void 0 ? void 0 : _A$fast.turns) || 1;\n  B.cd = ((_B$fast = B.fast) === null || _B$fast === void 0 ? void 0 : _B$fast.turns) || 1;\n  let t = 0;\n  const MAX_TURNS = 2000;\n  while (A.HP > 0 && B.HP > 0 && t < MAX_TURNS) {\n    t++;\n\n    // expose shields to chooser (for baiting decisions)\n    A._shieldsLeft = A.shields;\n    B._shieldsLeft = B.shields;\n    const aReady = (A.charged || []).some(m => A.energy >= (m.energyCost || 45));\n    const bReady = (B.charged || []).some(m => B.energy >= (m.energyCost || 45));\n    if (aReady || bReady) {\n      const aFirst = aReady && (!bReady || A.Atk >= B.Atk); // CMP\n      const doThrow = (att, def, who) => {\n        var _att$fast;\n        const move = chooseThrow(att, def);\n        if (!move) return;\n        // shield?\n        if (shouldShield(def, move, att)) {\n          def.shields = Math.max(0, (def.shields | 0) - 1);\n        } else {\n          const stab = att.types.includes(move.type) ? STAB : 1;\n          const mult = eff(move.type, def.types);\n          const hit = dmg(move.power, att.Atk, def.Def, stab, mult);\n          def.HP = Math.max(0, def.HP - hit);\n        }\n        att.energy -= move.energyCost || 45;\n        att.cd = ((_att$fast = att.fast) === null || _att$fast === void 0 ? void 0 : _att$fast.turns) || 1;\n      };\n      if (aFirst) {\n        doThrow(A, B, \"A\");\n        if (B.HP <= 0) break;\n        if (bReady) {\n          doThrow(B, A, \"B\");\n          if (A.HP <= 0) break;\n        }\n      } else {\n        doThrow(B, A, \"B\");\n        if (A.HP <= 0) break;\n        if (aReady) {\n          doThrow(A, B, \"A\");\n          if (B.HP <= 0) break;\n        }\n      }\n      continue; // charged turn; no fast damage this tick\n    }\n\n    // fast progression\n    A.cd--;\n    if (A.cd <= 0) {\n      const stab = A.types.includes(A.fast.type) ? STAB : 1;\n      const mult = eff(A.fast.type, B.types);\n      const hit = dmg(A.fast.power, A.Atk, B.Def, stab, mult);\n      B.HP = Math.max(0, B.HP - hit);\n      A.energy = Math.min(100, A.energy + (A.fast.energyGain || 0));\n      A.cd = A.fast.turns || 1;\n    }\n    if (B.HP <= 0) break;\n    B.cd--;\n    if (B.cd <= 0) {\n      const stab = B.types.includes(B.fast.type) ? STAB : 1;\n      const mult = eff(B.fast.type, A.types);\n      const hit = dmg(B.fast.power, B.Atk, A.Def, stab, mult);\n      A.HP = Math.max(0, A.HP - hit);\n      B.energy = Math.min(100, B.energy + (B.fast.energyGain || 0));\n      B.cd = B.fast.turns || 1;\n    }\n    if (A.HP <= 0) break;\n  }\n  const result = A.HP <= 0 && B.HP <= 0 ? \"draw\" : A.HP <= 0 ? \"p2\" : B.HP <= 0 ? \"p1\" : A.HP === B.HP ? \"draw\" : A.HP > B.HP ? \"p1\" : \"p2\";\n  return {\n    result,\n    p1: {\n      hp: Math.round(A.HP / A.MaxHP * 100)\n    },\n    p2: {\n      hp: Math.round(B.HP / B.MaxHP * 100)\n    },\n    p1Best,\n    p2Best\n  };\n}\nvar _c;\n$RefreshReg$(_c, \"S\");","map":{"version":3,"names":["STAB","TYPES","EFF","forEach","a","d","S","arr","m","_c","n","v","Number","isFinite","eff","type","defs","reduce","t","_EFF$type$t","_EFF$type","dmg","power","atk","def","stab","mult","Math","max","floor","buildSide","raw","moves","base","sta","types","cpm","map","String","toLowerCase","fast","fastMove","toUpperCase","TACKLE","id","kind","energyGain","energyCost","turns","charged","chargedMoves","filter","Boolean","Atk","Def","HP","name","speciesId","MaxHP","energy","shields","cd","turnsToCharge","user","needed","_user$fast","_user$fast2","gain","cycles","ceil","expectedFastDamage","foe","fm","includes","per","lands","shouldShield","defender","incoming","attacker","_defender$charged","shieldsLeft","stabIn","multIn","hit","H","hpAfter","myDmgNoShield","myDmgShield","swingBonus","length","best","b","da","db","need","tt","myHit","prudence","chooseThrow","ready","realDmg","nuke","sort","bait","evNuke","evBaitNow","toNukeAfterBait","toNukeTurns","followReward","simulateBattle","p1raw","p2raw","MOVES","_A$fast","_B$fast","A","B","pickBest","att","val","_val","p1Best","p2Best","MAX_TURNS","_shieldsLeft","aReady","some","bReady","aFirst","doThrow","who","_att$fast","move","min","result","p1","hp","round","p2","$RefreshReg$"],"sources":["C:/Users/ben/Projects/nebsojipvptrainer/src/engine/battleEngine.js"],"sourcesContent":["// src/engine/battleEngine.js\r\n// Turn-accurate PvP-lite engine with CMP, EV-based shielding, and bait logic.\r\n\r\nconst STAB = 1.2;\r\n\r\n// Minimal type chart (attacking -> defending multiplier)\r\nconst TYPES = [\r\n    \"normal\", \"fighting\", \"flying\", \"poison\", \"ground\", \"rock\", \"bug\", \"ghost\", \"steel\",\r\n    \"fire\", \"water\", \"grass\", \"electric\", \"psychic\", \"ice\", \"dragon\", \"dark\", \"fairy\"\r\n];\r\nconst EFF = {}; TYPES.forEach(a => { EFF[a] = {}; TYPES.forEach(d => EFF[a][d] = 1); });\r\nfunction S(a, arr, m) { arr.forEach(d => EFF[a][d] = m); }\r\nS(\"fighting\", [\"normal\", \"rock\", \"ice\", \"dark\", \"steel\"], 1.6); S(\"fighting\", [\"flying\", \"poison\", \"bug\", \"psychic\", \"fairy\"], 0.625);\r\nS(\"flying\", [\"fighting\", \"bug\", \"grass\"], 1.6); S(\"flying\", [\"rock\", \"steel\", \"electric\"], 0.625);\r\nS(\"poison\", [\"grass\", \"fairy\"], 1.6); S(\"poison\", [\"poison\", \"ground\", \"rock\", \"ghost\"], 0.625); S(\"poison\", [\"steel\"], 0.390625);\r\nS(\"ground\", [\"poison\", \"rock\", \"steel\", \"fire\", \"electric\"], 1.6); S(\"ground\", [\"bug\", \"grass\"], 0.625); S(\"ground\", [\"flying\"], 0.390625);\r\nS(\"rock\", [\"flying\", \"bug\", \"fire\", \"ice\"], 1.6); S(\"rock\", [\"fighting\", \"ground\", \"steel\"], 0.625);\r\nS(\"bug\", [\"grass\", \"psychic\", \"dark\"], 1.6); S(\"bug\", [\"fighting\", \"flying\", \"poison\", \"ghost\", \"steel\", \"fire\", \"fairy\"], 0.625);\r\nS(\"ghost\", [\"ghost\", \"psychic\"], 1.6); S(\"ghost\", [\"dark\"], 0.625);\r\nS(\"steel\", [\"rock\", \"ice\", \"fairy\"], 1.6); S(\"steel\", [\"steel\", \"fire\", \"water\", \"electric\"], 0.625);\r\nS(\"fire\", [\"bug\", \"steel\", \"grass\", \"ice\"], 1.6); S(\"fire\", [\"rock\", \"fire\", \"water\", \"dragon\"], 0.625);\r\nS(\"water\", [\"ground\", \"rock\", \"fire\"], 1.6); S(\"water\", [\"water\", \"grass\", \"dragon\"], 0.625);\r\nS(\"grass\", [\"ground\", \"rock\", \"water\"], 1.6); S(\"grass\", [\"flying\", \"poison\", \"bug\", \"steel\", \"fire\", \"grass\", \"dragon\"], 0.625);\r\nS(\"electric\", [\"flying\", \"water\"], 1.6); S(\"electric\", [\"grass\", \"electric\", \"dragon\"], 0.625); S(\"electric\", [\"ground\"], 0.390625);\r\nS(\"psychic\", [\"fighting\", \"poison\"], 1.6); S(\"psychic\", [\"psychic\", \"steel\"], 0.625); S(\"psychic\", [\"dark\"], 0.390625);\r\nS(\"ice\", [\"flying\", \"ground\", \"grass\", \"dragon\"], 1.6); S(\"ice\", [\"steel\", \"fire\", \"water\", \"ice\"], 0.625);\r\nS(\"dragon\", [\"dragon\"], 1.6); S(\"dragon\", [\"steel\"], 0.625); S(\"dragon\", [\"fairy\"], 0.390625);\r\nS(\"dark\", [\"ghost\", \"psychic\"], 1.6); S(\"dark\", [\"fighting\", \"dark\", \"fairy\"], 0.625);\r\nS(\"fairy\", [\"fighting\", \"dragon\", \"dark\"], 1.6); S(\"fairy\", [\"poison\", \"steel\", \"fire\"], 0.625);\r\n\r\nconst n = (v, d = 0) => (Number.isFinite(Number(v)) ? Number(v) : d);\r\nconst eff = (type, defs) => defs.reduce((m, t) => m * (EFF[type]?.[t] ?? 1), 1);\r\nconst dmg = (power, atk, def, stab, mult) => Math.max(1, Math.floor(0.5 * n(power, 0) * (n(atk, 1) / Math.max(1, n(def, 1))) * (stab || 1) * (mult || 1)) + 1);\r\n\r\n// Enrich a side with stats and moves\r\nfunction buildSide(raw, moves) {\r\n    // Level scaling already done by the adapter; we just respect base + level via multipliers\r\n    const base = raw.base || { atk: 200, def: 200, sta: 200, types: [\"normal\"] };\r\n    const cpm = 1; // already capped in adapter â€“ keep 1.0 here\r\n    const types = (base.types || [\"normal\"]).map(t => String(t).toLowerCase());\r\n\r\n    const fast = moves[String(raw.fastMove || \"\").toUpperCase()] || moves.TACKLE || {\r\n        id: \"TACKLE\", kind: \"fast\", type: \"normal\", power: 3, energyGain: 8, energyCost: 0, turns: 1\r\n    };\r\n    const charged = (raw.chargedMoves || [])\r\n        .map(id => moves[String(id || \"\").toUpperCase()])\r\n        .filter(Boolean);\r\n\r\n    const Atk = base.atk * cpm;\r\n    const Def = base.def * cpm;\r\n    const HP = Math.max(1, Math.floor(base.sta * cpm));\r\n\r\n    return {\r\n        name: raw.name || raw.speciesId,\r\n        types,\r\n        Atk, Def, MaxHP: HP, HP,\r\n        fast, charged,\r\n        energy: 0,\r\n        shields: Math.max(0, raw.shields | 0),\r\n        cd: (fast?.turns || 1) // cooldown turns left for fast landing\r\n    };\r\n}\r\n\r\nfunction turnsToCharge(user, needed) {\r\n    const gain = n(user.fast?.energyGain, 0);\r\n    const t = Math.max(1, user.fast?.turns || 1);\r\n    if (gain <= 0) return 999;\r\n    const cycles = Math.ceil(needed / gain);\r\n    return cycles * t;\r\n}\r\nfunction expectedFastDamage(user, foe, turns) {\r\n    const fm = user.fast; if (!fm) return 0;\r\n    const stab = user.types.includes(fm.type) ? STAB : 1;\r\n    const mult = eff(fm.type, foe.types);\r\n    const per = dmg(fm.power, user.Atk, foe.Def, stab, mult);\r\n    const lands = Math.floor(turns / (fm.turns || 1));\r\n    return per * Math.max(0, lands);\r\n}\r\n\r\n// EV-based shouldShield\r\nfunction shouldShield(defender, incoming, attacker) {\r\n    const shieldsLeft = defender.shields | 0;\r\n    if (shieldsLeft <= 0) return false;\r\n\r\n    const stabIn = attacker.types.includes(incoming.type) ? STAB : 1;\r\n    const multIn = eff(incoming.type, defender.types);\r\n    const hit = dmg(incoming.power, attacker.Atk, defender.Def, stabIn, multIn);\r\n\r\n    if (hit >= defender.HP) return true; // lethal\r\n\r\n    const H = 12;\r\n    const hpAfter = Math.max(0, defender.HP - hit);\r\n    const myDmgNoShield = expectedFastDamage(defender, attacker, H * (hpAfter > 0 ? 1 : 0));\r\n    const myDmgShield = expectedFastDamage(defender, attacker, H);\r\n\r\n    // bonus if shielding lets me reach my own charged in horizon\r\n    let swingBonus = 0;\r\n    if (defender.charged?.length) {\r\n        const best = defender.charged.reduce((a, b) => {\r\n            const da = dmg(a.power, defender.Atk, attacker.Def, defender.types.includes(a.type) ? STAB : 1, eff(a.type, attacker.types));\r\n            const db = dmg(b.power, defender.Atk, attacker.Def, defender.types.includes(b.type) ? STAB : 1, eff(b.type, attacker.types));\r\n            return db > da ? b : a;\r\n        });\r\n        const need = Math.max(0, (best.energyCost || 45) - defender.energy);\r\n        const tt = turnsToCharge(defender, need);\r\n        if (tt <= H) {\r\n            const myHit = dmg(best.power, defender.Atk, attacker.Def, defender.types.includes(best.type) ? STAB : 1, eff(best.type, attacker.types));\r\n            if (hpAfter <= defender.MaxHP * 0.35) swingBonus = myHit * 0.5;\r\n        }\r\n    }\r\n    const prudence = shieldsLeft === 1 ? 1.15 : 1.0;\r\n    return (myDmgShield + swingBonus) * prudence > myDmgNoShield;\r\n}\r\n\r\n// choose charged (with baiting)\r\nfunction chooseThrow(user, foe) {\r\n    const ready = (user.charged || []).filter(m => user.energy >= (m.energyCost || 45));\r\n    if (!ready.length) return null;\r\n\r\n    const realDmg = (m) => {\r\n        const stab = user.types.includes(m.type) ? STAB : 1;\r\n        const mult = eff(m.type, foe.types);\r\n        return dmg(m.power, user.Atk, foe.Def, stab, mult);\r\n    };\r\n\r\n    const nuke = [...ready].sort((a, b) => realDmg(b) - realDmg(a))[0];\r\n    const bait = [...ready].sort((a, b) => (a.energyCost || 45) - (b.energyCost || 45))[0];\r\n\r\n    if ((foe.shields | 0) <= 0) return nuke;\r\n    if (realDmg(nuke) >= foe.HP) return nuke;\r\n\r\n    const evNuke = 0 - (nuke.energyCost || 45) * 0.05;\r\n    const evBaitNow = 0 - (bait.energyCost || 45) * 0.02;\r\n\r\n    const toNukeAfterBait = Math.max(0, (nuke.energyCost || 45) - (user.energy - (bait.energyCost || 45)));\r\n    const toNukeTurns = turnsToCharge(user, toNukeAfterBait);\r\n    const followReward = realDmg(nuke) * (toNukeTurns <= 8 ? 0.7 : 0.4);\r\n\r\n    return (evBaitNow + followReward > evNuke) ? bait : nuke;\r\n}\r\n\r\n// main loop\r\nexport function simulateBattle(p1raw, p2raw, MOVES) {\r\n    const A = buildSide(p1raw, MOVES);\r\n    const B = buildSide(p2raw, MOVES);\r\n\r\n    const pickBest = (att, def) => {\r\n        const best = (att.charged || []).reduce((best, m) => {\r\n            const stab = att.types.includes(m.type) ? STAB : 1;\r\n            const mult = eff(m.type, def.types);\r\n            const val = dmg(m.power, att.Atk, def.Def, stab, mult);\r\n            return (!best || val > best._val) ? { ...m, _val: val } : best;\r\n        }, null);\r\n        return best?.id || null;\r\n    };\r\n\r\n    const p1Best = pickBest(A, B);\r\n    const p2Best = pickBest(B, A);\r\n\r\n    // initialize cooldowns so first fast lands at its \"turns\"\r\n    A.cd = A.fast?.turns || 1;\r\n    B.cd = B.fast?.turns || 1;\r\n\r\n    let t = 0;\r\n    const MAX_TURNS = 2000;\r\n\r\n    while (A.HP > 0 && B.HP > 0 && t < MAX_TURNS) {\r\n        t++;\r\n\r\n        // expose shields to chooser (for baiting decisions)\r\n        A._shieldsLeft = A.shields;\r\n        B._shieldsLeft = B.shields;\r\n\r\n        const aReady = (A.charged || []).some(m => A.energy >= (m.energyCost || 45));\r\n        const bReady = (B.charged || []).some(m => B.energy >= (m.energyCost || 45));\r\n\r\n        if (aReady || bReady) {\r\n            const aFirst = aReady && (!bReady || (A.Atk >= B.Atk)); // CMP\r\n            const doThrow = (att, def, who) => {\r\n                const move = chooseThrow(att, def);\r\n                if (!move) return;\r\n                // shield?\r\n                if (shouldShield(def, move, att)) {\r\n                    def.shields = Math.max(0, (def.shields | 0) - 1);\r\n                } else {\r\n                    const stab = att.types.includes(move.type) ? STAB : 1;\r\n                    const mult = eff(move.type, def.types);\r\n                    const hit = dmg(move.power, att.Atk, def.Def, stab, mult);\r\n                    def.HP = Math.max(0, def.HP - hit);\r\n                }\r\n                att.energy -= (move.energyCost || 45);\r\n                att.cd = att.fast?.turns || 1;\r\n            };\r\n\r\n            if (aFirst) {\r\n                doThrow(A, B, \"A\"); if (B.HP <= 0) break;\r\n                if (bReady) { doThrow(B, A, \"B\"); if (A.HP <= 0) break; }\r\n            } else {\r\n                doThrow(B, A, \"B\"); if (A.HP <= 0) break;\r\n                if (aReady) { doThrow(A, B, \"A\"); if (B.HP <= 0) break; }\r\n            }\r\n            continue; // charged turn; no fast damage this tick\r\n        }\r\n\r\n        // fast progression\r\n        A.cd--; if (A.cd <= 0) {\r\n            const stab = A.types.includes(A.fast.type) ? STAB : 1;\r\n            const mult = eff(A.fast.type, B.types);\r\n            const hit = dmg(A.fast.power, A.Atk, B.Def, stab, mult);\r\n            B.HP = Math.max(0, B.HP - hit);\r\n            A.energy = Math.min(100, A.energy + (A.fast.energyGain || 0));\r\n            A.cd = A.fast.turns || 1;\r\n        }\r\n        if (B.HP <= 0) break;\r\n\r\n        B.cd--; if (B.cd <= 0) {\r\n            const stab = B.types.includes(B.fast.type) ? STAB : 1;\r\n            const mult = eff(B.fast.type, A.types);\r\n            const hit = dmg(B.fast.power, B.Atk, A.Def, stab, mult);\r\n            A.HP = Math.max(0, A.HP - hit);\r\n            B.energy = Math.min(100, B.energy + (B.fast.energyGain || 0));\r\n            B.cd = B.fast.turns || 1;\r\n        }\r\n        if (A.HP <= 0) break;\r\n    }\r\n\r\n    const result =\r\n        A.HP <= 0 && B.HP <= 0 ? \"draw\" :\r\n            A.HP <= 0 ? \"p2\" :\r\n                B.HP <= 0 ? \"p1\" :\r\n                    (A.HP === B.HP ? \"draw\" : (A.HP > B.HP ? \"p1\" : \"p2\"));\r\n\r\n    return {\r\n        result,\r\n        p1: { hp: Math.round((A.HP / A.MaxHP) * 100) },\r\n        p2: { hp: Math.round((B.HP / B.MaxHP) * 100) },\r\n        p1Best, p2Best\r\n    };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}