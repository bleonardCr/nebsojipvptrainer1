{"ast":null,"code":"// src/battleCalc.js\n// PvP-lite turn sim with shields, CMP, STAB, type eff., and robust GM parsing.\n// Restores the earlier math and makes move selection reliable again.\n\nlet SPECIES = {}; // speciesId -> { atk, def, sta, types:[], quickMoves:[ids], chargedMoves:[ids] }\nlet MOVES = {}; // MOVE_ID   -> { id, kind:\"fast\"|\"charged\", type, power, energyGain, energyCost, turns }\n\n/* ---------------- helpers ---------------- */\nconst num = (v, d = 0) => Number.isFinite(+v) ? +v : d;\nfunction canonMoveId(s) {\n  if (!s) return \"\";\n  return String(s).trim().replace(/^COMBAT_V\\d+_MOVE_/i, \"\").replace(/^V\\d+_/i, \"\").replace(/[^A-Za-z0-9]+/g, \"_\").replace(/_+/g, \"_\").replace(/^_|_$/g, \"\").toUpperCase();\n}\nfunction normId(s) {\n  return String(s || \"\").toLowerCase().replace(/[^\\w]+/g, \"_\").replace(/^_+|_+$/g, \"\");\n}\nfunction tcase(s) {\n  return s ? s.charAt(0).toUpperCase() + s.slice(1).toLowerCase() : s;\n}\nfunction normType(s) {\n  if (!s) return null;\n  const raw = String(s).replace(/^POKEMON_TYPE_/, \"\").replace(/_/g, \" \").trim().toLowerCase();\n  const T = tcase(raw);\n  return TYPES.includes(T) ? T : null;\n}\n\n/* ---------------- CP / level utils ---------------- */\nconst CPM = [];\n(function fillCPM() {\n  const table = [0.094, 0.135137432, 0.16639787, 0.192650919, 0.21573247, 0.236572661, 0.25572005, 0.273530381, 0.29024988, 0.306057377, 0.3210876, 0.335445036, 0.34921268, 0.362457751, 0.37523559, 0.387592406, 0.39956728, 0.411193551, 0.42250001, 0.432926419, 0.44310755, 0.4530599578, 0.46279839, 0.472336083, 0.48168495, 0.4908558, 0.49985844, 0.508701765, 0.51739395, 0.525942511, 0.53435433, 0.542635767, 0.55079269, 0.558830576, 0.56675452, 0.574569153, 0.58227891, 0.589887907, 0.59740001, 0.604818814, 0.61215729, 0.619399365, 0.62656713, 0.633644533, 0.64065295, 0.647576426, 0.65443563, 0.661214806, 0.667934, 0.674577537, 0.68116492, 0.687680648, 0.69414365, 0.700538673, 0.70688421, 0.713164996, 0.71939909, 0.725571552, 0.7317, 0.734741009, 0.73776948, 0.740785574, 0.74378943, 0.746781211, 0.74976104, 0.752729087, 0.75568551, 0.758630378, 0.76156384, 0.764486065, 0.76739717, 0.770297266, 0.7731865, 0.776064962, 0.77893275, 0.781790055, 0.78463697, 0.787473578, 0.79030001, 0.792803968, 0.79530001, 0.797803921, 0.8003];\n  CPM.length = 100;\n  CPM.fill(0);\n  for (let i = 0; i < table.length; i++) CPM[i + 1] = table[i];\n})();\nfunction cp(a, d, s, c) {\n  return Math.floor(a * Math.sqrt(d) * Math.sqrt(s) * c * c / 10);\n}\nfunction capLeague(league) {\n  var _map$league;\n  const map = {\n    \"Great League\": 1500,\n    \"Ultra League\": 2500,\n    \"Master League\": Infinity\n  };\n  return typeof league === \"string\" ? (_map$league = map[league]) !== null && _map$league !== void 0 ? _map$league : Infinity : Number.isFinite(league) ? +league : Infinity;\n}\nfunction levelForCap(baseAtk, baseDef, baseSta, cap) {\n  if (!isFinite(cap)) return 99; // treat as ~50\n  let best = 1;\n  for (let i = 1; i < CPM.length; i++) {\n    const c = CPM[i];\n    if (!c) continue;\n    if (cp(baseAtk * c, baseDef * c, baseSta * c, 1) <= cap) best = i;\n  }\n  return best;\n}\n\n/* ---------------- type chart & damage ---------------- */\nconst TYPES = [\"Normal\", \"Fighting\", \"Flying\", \"Poison\", \"Ground\", \"Rock\", \"Bug\", \"Ghost\", \"Steel\", \"Fire\", \"Water\", \"Grass\", \"Electric\", \"Psychic\", \"Ice\", \"Dragon\", \"Dark\", \"Fairy\"];\nconst EFF = {};\nTYPES.forEach(a => {\n  EFF[a] = {};\n  TYPES.forEach(d => EFF[a][d] = 1);\n});\nfunction S(atk, arr, m) {\n  arr.forEach(d => EFF[atk][d] = m);\n}\n_c = S;\nS(\"Fighting\", [\"Normal\", \"Rock\", \"Ice\", \"Dark\", \"Steel\"], 1.6);\nS(\"Fighting\", [\"Flying\", \"Poison\", \"Bug\", \"Psychic\", \"Fairy\"], 0.625);\nS(\"Flying\", [\"Fighting\", \"Bug\", \"Grass\"], 1.6);\nS(\"Flying\", [\"Rock\", \"Steel\", \"Electric\"], 0.625);\nS(\"Poison\", [\"Grass\", \"Fairy\"], 1.6);\nS(\"Poison\", [\"Poison\", \"Ground\", \"Rock\", \"Ghost\"], 0.625);\nS(\"Poison\", [\"Steel\"], 0.390625);\nS(\"Ground\", [\"Poison\", \"Rock\", \"Steel\", \"Fire\", \"Electric\"], 1.6);\nS(\"Ground\", [\"Bug\", \"Grass\"], 0.625);\nS(\"Ground\", [\"Flying\"], 0.390625);\nS(\"Rock\", [\"Flying\", \"Bug\", \"Fire\", \"Ice\"], 1.6);\nS(\"Rock\", [\"Fighting\", \"Ground\", \"Steel\"], 0.625);\nS(\"Bug\", [\"Grass\", \"Psychic\", \"Dark\"], 1.6);\nS(\"Bug\", [\"Fighting\", \"Flying\", \"Poison\", \"Ghost\", \"Steel\", \"Fire\", \"Fairy\"], 0.625);\nS(\"Ghost\", [\"Ghost\", \"Psychic\"], 1.6);\nS(\"Ghost\", [\"Dark\"], 0.625);\nS(\"Steel\", [\"Rock\", \"Ice\", \"Fairy\"], 1.6);\nS(\"Steel\", [\"Steel\", \"Fire\", \"Water\", \"Electric\"], 0.625);\nS(\"Fire\", [\"Bug\", \"Steel\", \"Grass\", \"Ice\"], 1.6);\nS(\"Fire\", [\"Rock\", \"Fire\", \"Water\", \"Dragon\"], 0.625);\nS(\"Water\", [\"Ground\", \"Rock\", \"Fire\"], 1.6);\nS(\"Water\", [\"Water\", \"Grass\", \"Dragon\"], 0.625);\nS(\"Grass\", [\"Ground\", \"Rock\", \"Water\"], 1.6);\nS(\"Grass\", [\"Flying\", \"Poison\", \"Bug\", \"Steel\", \"Fire\", \"Grass\", \"Dragon\"], 0.625);\nS(\"Electric\", [\"Flying\", \"Water\"], 1.6);\nS(\"Electric\", [\"Grass\", \"Electric\", \"Dragon\"], 0.625);\nS(\"Electric\", [\"Ground\"], 0.390625);\nS(\"Psychic\", [\"Fighting\", \"Poison\"], 1.6);\nS(\"Psychic\", [\"Psychic\", \"Steel\"], 0.625);\nS(\"Psychic\", [\"Dark\"], 0.390625);\nS(\"Ice\", [\"Flying\", \"Ground\", \"Grass\", \"Dragon\"], 1.6);\nS(\"Ice\", [\"Steel\", \"Fire\", \"Water\", \"Ice\"], 0.625);\nS(\"Dragon\", [\"Dragon\"], 1.6);\nS(\"Dragon\", [\"Steel\"], 0.625);\nS(\"Dragon\", [\"Fairy\"], 0.390625);\nS(\"Dark\", [\"Ghost\", \"Psychic\"], 1.6);\nS(\"Dark\", [\"Fighting\", \"Dark\", \"Fairy\"], 0.625);\nS(\"Fairy\", [\"Fighting\", \"Dragon\", \"Dark\"], 1.6);\nS(\"Fairy\", [\"Poison\", \"Steel\", \"Fire\"], 0.625);\nconst STAB = 1.2;\nfunction eff(multType, defendTypes) {\n  let m = 1;\n  for (const t of defendTypes || []) {\n    var _EFF$multType$t, _EFF$multType;\n    m *= (_EFF$multType$t = (_EFF$multType = EFF[multType]) === null || _EFF$multType === void 0 ? void 0 : _EFF$multType[t]) !== null && _EFF$multType$t !== void 0 ? _EFF$multType$t : 1;\n  }\n  return m;\n}\nfunction dmg(power, atk, def, stab, effm) {\n  const raw = 0.5 * num(power, 0) * (num(atk, 1) / Math.max(1, num(def, 1))) * (stab || 1) * (effm || 1);\n  return Math.max(1, Math.floor(raw) + 1); // PvP rounding (+1)\n}\n\n/* ---------------- build books from GM ---------------- */\nfunction buildSpeciesBook(gm) {\n  var _gm$data;\n  const lists = [gm === null || gm === void 0 ? void 0 : gm.pokemon, gm === null || gm === void 0 ? void 0 : (_gm$data = gm.data) === null || _gm$data === void 0 ? void 0 : _gm$data.pokemon, gm === null || gm === void 0 ? void 0 : gm.species, gm === null || gm === void 0 ? void 0 : gm.pokemonList, gm === null || gm === void 0 ? void 0 : gm.pokemonSettings].filter(Boolean);\n  const out = {};\n  for (const L of lists) {\n    for (const p of L) {\n      var _ref, _ref2, _p$baseAttack, _ref3, _ref4, _p$baseDefense, _ref5, _ref6, _p$baseStamina, _p$moves, _p$moves2;\n      const id = normId(p.speciesId || p.pokemonId || p.templateId || p.id || p.name);\n      if (!id) continue;\n      const bs = p.baseStats || p.stats || {};\n      const atk = num((_ref = (_ref2 = (_p$baseAttack = p.baseAttack) !== null && _p$baseAttack !== void 0 ? _p$baseAttack : bs.atk) !== null && _ref2 !== void 0 ? _ref2 : bs.attack) !== null && _ref !== void 0 ? _ref : p.attack, 200);\n      const def = num((_ref3 = (_ref4 = (_p$baseDefense = p.baseDefense) !== null && _p$baseDefense !== void 0 ? _p$baseDefense : bs.def) !== null && _ref4 !== void 0 ? _ref4 : bs.defense) !== null && _ref3 !== void 0 ? _ref3 : p.defense, 200);\n      const sta = num((_ref5 = (_ref6 = (_p$baseStamina = p.baseStamina) !== null && _p$baseStamina !== void 0 ? _p$baseStamina : bs.sta) !== null && _ref6 !== void 0 ? _ref6 : bs.stamina) !== null && _ref5 !== void 0 ? _ref5 : p.stamina, 200);\n      const typesArr = p.types || [p.type1, p.type2].filter(Boolean);\n      const types = (typesArr || []).map(normType).filter(Boolean);\n\n      // move pools if present\n      const quickMoves = (p.quickMoves || p.fastMoves || ((_p$moves = p.moves) === null || _p$moves === void 0 ? void 0 : _p$moves.fast) || []).map(canonMoveId).filter(Boolean);\n      const chargedMoves = (p.chargedMoves || ((_p$moves2 = p.moves) === null || _p$moves2 === void 0 ? void 0 : _p$moves2.charged) || []).map(canonMoveId).filter(Boolean);\n      out[id] = {\n        atk,\n        def,\n        sta,\n        types: types.length ? types : [\"Normal\"],\n        quickMoves,\n        chargedMoves\n      };\n    }\n  }\n  return out;\n}\nexport function buildMoveBook(gm) {\n  var _gm$data2, _gm$data3;\n  SPECIES = buildSpeciesBook(gm);\n  const pools = [gm === null || gm === void 0 ? void 0 : gm.moves, gm === null || gm === void 0 ? void 0 : gm.combatMoves, gm === null || gm === void 0 ? void 0 : (_gm$data2 = gm.data) === null || _gm$data2 === void 0 ? void 0 : _gm$data2.moves, gm === null || gm === void 0 ? void 0 : (_gm$data3 = gm.data) === null || _gm$data3 === void 0 ? void 0 : _gm$data3.combatMoves, gm === null || gm === void 0 ? void 0 : gm.moveList].filter(Boolean);\n  const out = {};\n  for (const list of pools) {\n    for (const m of list) {\n      var _ref7, _ref8, _ref9, _ref0, _m$moveId, _ref1, _ref10, _m$pvpPower, _ref11, _m$durationTurns;\n      const rawId = (_ref7 = (_ref8 = (_ref9 = (_ref0 = (_m$moveId = m.moveId) !== null && _m$moveId !== void 0 ? _m$moveId : m.id) !== null && _ref0 !== void 0 ? _ref0 : m.uniqueId) !== null && _ref9 !== void 0 ? _ref9 : m.templateId) !== null && _ref8 !== void 0 ? _ref8 : m.name) !== null && _ref7 !== void 0 ? _ref7 : \"\";\n      const id = canonMoveId(rawId);\n      if (!id) continue;\n      const type = normType(m.type || m.pokemonType || m.moveType) || \"Normal\";\n      const power = num((_ref1 = (_ref10 = (_m$pvpPower = m.pvpPower) !== null && _m$pvpPower !== void 0 ? _m$pvpPower : m.power) !== null && _ref10 !== void 0 ? _ref10 : m.combatPower) !== null && _ref1 !== void 0 ? _ref1 : m.damage, 3);\n      let kind = \"fast\",\n        energyGain = 0,\n        energyCost = 0,\n        turns = 1;\n      if (m.energyDelta != null) {\n        const ed = num(m.energyDelta, 0);\n        if (ed > 0) {\n          kind = \"fast\";\n          energyGain = ed;\n        }\n        if (ed < 0) {\n          kind = \"charged\";\n          energyCost = Math.abs(ed);\n        }\n      }\n      if (m.energyGain != null) {\n        kind = \"fast\";\n        energyGain = num(m.energyGain, 0);\n      }\n      if (m.energy != null) {\n        kind = \"charged\";\n        energyCost = Math.abs(num(m.energy, 0));\n      }\n      turns = num((_ref11 = (_m$durationTurns = m.durationTurns) !== null && _m$durationTurns !== void 0 ? _m$durationTurns : m.turns) !== null && _ref11 !== void 0 ? _ref11 : m.cooldownTurns, kind === \"fast\" ? 1 : 0);\n      if (kind === \"fast\") turns = Math.max(1, Math.floor(turns) || 1);\n      if (kind === \"fast\" && energyGain <= 0) {\n        energyGain = 8;\n      }\n      if (kind === \"charged\" && energyCost <= 0) {\n        energyCost = 45;\n      }\n      const mv = {\n        id,\n        kind,\n        type,\n        power,\n        energyGain,\n        energyCost,\n        turns\n      };\n      // prefer strongest variant if duplicates appear\n      if (!out[id] || power > out[id].power) out[id] = mv;\n    }\n  }\n\n  // very safe fallback fast move\n  out.TACKLE = out.TACKLE || {\n    id: \"TACKLE\",\n    kind: \"fast\",\n    type: \"Normal\",\n    power: 3,\n    energyGain: 8,\n    energyCost: 0,\n    turns: 1\n  };\n  MOVES = out;\n  return out;\n}\n\n/* ---------------- move recommendations ---------------- */\n// Prefer league-provided moves when present, otherwise fall back to GM sets.\n// Always return real MOVES entries (never generic placeholders).\nexport function recommendMovesFor(speciesId, leagueEntry = {}) {\n  var _leagueEntry$fast;\n  const sid = normId(speciesId || leagueEntry.speciesId);\n  const base = SPECIES[sid] || {};\n\n  // League-provided (exact labels or ids)\n  const fastIdFromLeague = canonMoveId(leagueEntry.fastMove || ((_leagueEntry$fast = leagueEntry.fast) === null || _leagueEntry$fast === void 0 ? void 0 : _leagueEntry$fast.id) || leagueEntry.fast);\n  const chargedIdsFromLeague = (leagueEntry.chargedMoves || []).map(c => typeof c === \"string\" ? c : c === null || c === void 0 ? void 0 : c.id).map(canonMoveId).filter(Boolean);\n\n  // GM pools\n  const gmFastIds = (base.quickMoves || []).map(canonMoveId);\n  const gmChargedIds = (base.chargedMoves || []).map(canonMoveId);\n\n  // Pick fast\n  let fast = MOVES[fastIdFromLeague] || gmFastIds.map(id => MOVES[id]).find(m => m && m.kind === \"fast\") || MOVES.TACKLE;\n\n  // Pick 1–2 charged (highest power as a simple proxy)\n  let charged = chargedIdsFromLeague.map(id => MOVES[id]).filter(Boolean);\n  if (!charged.length) {\n    charged = gmChargedIds.map(id => MOVES[id]).filter(m => m && m.kind === \"charged\").sort((a, b) => b.power - a.power).slice(0, 2);\n  }\n  if (!charged.length) {\n    // last resort\n    charged = [{\n      id: \"STRUGGLE\",\n      kind: \"charged\",\n      type: \"Normal\",\n      power: 65,\n      energyCost: 33\n    }];\n  }\n  return {\n    fast,\n    chargedMoves: charged\n  };\n}\n\n/* ---------------- fighter build at league cap ---------------- */\nfunction buildFighter(src, leagueName) {\n  const cap = capLeague(leagueName);\n  const sid = normId(src.speciesId || src.name);\n  const base = SPECIES[sid] || {\n    atk: 200,\n    def: 200,\n    sta: 200,\n    types: [\"Normal\"]\n  };\n  const lvl = levelForCap(base.atk, base.def, base.sta, cap);\n  const cpm = CPM[lvl] || CPM[99];\n  const Atk = base.atk * cpm;\n  const Def = base.def * cpm;\n  const HP = Math.max(1, Math.floor(base.sta * cpm));\n\n  // Use src moves if already normalized; otherwise use recommendations:\n  const fast = src.fast && src.fast.kind ? src.fast : recommendMovesFor(sid, src).fast;\n  const chargedMoves = (src.chargedMoves || recommendMovesFor(sid, src).chargedMoves).map(m => m.id ? m : MOVES[canonMoveId(m)]).filter(Boolean);\n  return {\n    name: src.name || src.speciesId,\n    speciesId: sid,\n    types: base.types,\n    Atk,\n    Def,\n    MaxHP: HP,\n    HP,\n    fast,\n    chargedMoves,\n    energy: 0,\n    cooldown: 0\n  };\n}\n\n/* ---------------- tiny helpers for the sim ---------------- */\nfunction bestCharged(att, def) {\n  let best = null,\n    bestVal = -Infinity;\n  for (const m of att.chargedMoves || []) {\n    if (!m || m.kind !== \"charged\") continue;\n    const stab = att.types.includes(m.type) ? STAB : 1;\n    const mult = eff(m.type, def.types);\n    const val = dmg(m.power, att.Atk, def.Def, stab, mult);\n    if (val > bestVal) {\n      bestVal = val;\n      best = m;\n    }\n  }\n  return best;\n}\n\n/* ---------------- main duel sim ---------------- */\nexport function simulateDuel(attackerIn, defenderIn, shieldsA = 2, shieldsB = 2, _book, leagueName = \"Master League\") {\n  var _bestCharged, _bestCharged2, _A$fast, _B$fast;\n  const A = buildFighter(attackerIn, leagueName);\n  const B = buildFighter(defenderIn, leagueName);\n  const recA = ((_bestCharged = bestCharged(A, B)) === null || _bestCharged === void 0 ? void 0 : _bestCharged.id) || null;\n  const recB = ((_bestCharged2 = bestCharged(B, A)) === null || _bestCharged2 === void 0 ? void 0 : _bestCharged2.id) || null;\n  let aSh = Math.max(0, shieldsA | 0),\n    bSh = Math.max(0, shieldsB | 0);\n  let t = 0;\n  const MAX_TURNS = 2000;\n  const log = [];\n  function tickFast(user, foe) {\n    if (!user.fast) return;\n    user.cooldown--;\n    if (user.cooldown <= 0) {\n      const stab = user.types.includes(user.fast.type) ? STAB : 1;\n      const mult = eff(user.fast.type, foe.types);\n      const hit = dmg(user.fast.power, user.Atk, foe.Def, stab, mult);\n      foe.HP = Math.max(0, foe.HP - hit);\n      user.energy = Math.min(100, user.energy + num(user.fast.energyGain, 0));\n      user.cooldown = user.fast.turns || 1;\n    }\n  }\n  const canThrow = u => (u.chargedMoves || []).some(m => u.energy >= (m.energyCost || 45));\n  function chooseThrow(u, foe) {\n    let pick = null,\n      best = -Infinity;\n    for (const m of u.chargedMoves || []) {\n      if (u.energy < (m.energyCost || 45)) continue;\n      const stab = u.types.includes(m.type) ? STAB : 1;\n      const mult = eff(m.type, foe.types);\n      const val = dmg(m.power, u.Atk, foe.Def, stab, mult);\n      if (val > best) {\n        best = val;\n        pick = m;\n      }\n    }\n    return pick;\n  }\n  function shouldShield(defender, incoming, shieldsLeft) {\n    if (shieldsLeft <= 0) return false;\n    const stab = defender.types.includes(incoming.type) ? STAB : 1;\n    const mult = eff(incoming.type, defender.types);\n    const est = dmg(incoming.power, defender.Atk /* not used */, defender.Def, stab, mult);\n    const th = shieldsLeft === 2 ? 0.32 : 0.45; // liberal with 2, stricter with 1\n    return est >= defender.HP || est >= defender.MaxHP * th;\n  }\n  A.cooldown = ((_A$fast = A.fast) === null || _A$fast === void 0 ? void 0 : _A$fast.turns) || 1;\n  B.cooldown = ((_B$fast = B.fast) === null || _B$fast === void 0 ? void 0 : _B$fast.turns) || 1;\n  while (A.HP > 0 && B.HP > 0 && t < MAX_TURNS) {\n    t++;\n    const aReady = canThrow(A);\n    const bReady = canThrow(B);\n    if (aReady || bReady) {\n      const aFirst = aReady && (!bReady || A.Atk >= B.Atk);\n      const resolve = (user, foe, who) => {\n        var _user$fast;\n        const move = chooseThrow(user, foe);\n        if (!move) return;\n        let shielded = false;\n        if (who === \"A\" ? shouldShield(B, move, bSh) : shouldShield(A, move, aSh)) {\n          if (who === \"A\") bSh--;else aSh--;\n          shielded = true;\n        } else {\n          const stab = user.types.includes(move.type) ? STAB : 1;\n          const mult = eff(move.type, foe.types);\n          const hit = dmg(move.power, user.Atk, foe.Def, stab, mult);\n          foe.HP = Math.max(0, foe.HP - hit);\n        }\n        user.energy -= move.energyCost || 45;\n        user.cooldown = ((_user$fast = user.fast) === null || _user$fast === void 0 ? void 0 : _user$fast.turns) || 1;\n        log.push(`${who} throws ${move.id}${shielded ? \" (shielded)\" : \"\"}`);\n      };\n      if (aFirst) {\n        resolve(A, B, \"A\");\n        if (B.HP <= 0) break;\n        if (bReady) resolve(B, A, \"B\");\n        if (A.HP <= 0) break;\n      } else {\n        resolve(B, A, \"B\");\n        if (A.HP <= 0) break;\n        if (aReady) resolve(A, B, \"A\");\n        if (B.HP <= 0) break;\n      }\n      continue;\n    }\n    tickFast(A, B);\n    if (B.HP <= 0) break;\n    tickFast(B, A);\n    if (A.HP <= 0) break;\n  }\n  const winner = A.HP <= 0 && B.HP <= 0 ? \"Draw\" : A.HP <= 0 ? B.name : B.HP <= 0 ? A.name : A.HP === B.HP ? \"Draw\" : A.HP > B.HP ? A.name : B.name;\n  return {\n    winner,\n    aHP: Math.round(A.HP / A.MaxHP * 100),\n    bHP: Math.round(B.HP / B.MaxHP * 100),\n    aRecommended: recA,\n    bRecommended: recB,\n    summary: log.slice(0, 12)\n  };\n}\n\n/* ---------------- best-of-three wrapper ---------------- */\nexport function bestOfThree(mine, enemy, myShields, foeShields, _book, leagueName = \"Master League\") {\n  const fights = (mine || []).map(m => {\n    const you = {\n      ...m,\n      name: m.name || m.speciesId\n    };\n    const foe = {\n      ...enemy,\n      name: enemy.name || enemy.speciesId\n    };\n    const r = simulateDuel(you, foe, myShields, foeShields, MOVES, leagueName);\n    const score = r.winner === you.name ? 1 : r.winner === \"Draw\" ? 0 : -1;\n    return {\n      you: you.name,\n      vs: foe.name,\n      ...r,\n      score\n    };\n  });\n  fights.sort((a, b) => b.score - a.score || b.aHP - a.aHP || b.bHP - a.bHP);\n  return {\n    best: fights[0],\n    fights\n  };\n}\nvar _c;\n$RefreshReg$(_c, \"S\");","map":{"version":3,"names":["SPECIES","MOVES","num","v","d","Number","isFinite","canonMoveId","s","String","trim","replace","toUpperCase","normId","toLowerCase","tcase","charAt","slice","normType","raw","T","TYPES","includes","CPM","fillCPM","table","length","fill","i","cp","a","c","Math","floor","sqrt","capLeague","league","_map$league","map","Infinity","levelForCap","baseAtk","baseDef","baseSta","cap","best","EFF","forEach","S","atk","arr","m","_c","STAB","eff","multType","defendTypes","t","_EFF$multType$t","_EFF$multType","dmg","power","def","stab","effm","max","buildSpeciesBook","gm","_gm$data","lists","pokemon","data","species","pokemonList","pokemonSettings","filter","Boolean","out","L","p","_ref","_ref2","_p$baseAttack","_ref3","_ref4","_p$baseDefense","_ref5","_ref6","_p$baseStamina","_p$moves","_p$moves2","id","speciesId","pokemonId","templateId","name","bs","baseStats","stats","baseAttack","attack","baseDefense","defense","sta","baseStamina","stamina","typesArr","types","type1","type2","quickMoves","fastMoves","moves","fast","chargedMoves","charged","buildMoveBook","_gm$data2","_gm$data3","pools","combatMoves","moveList","list","_ref7","_ref8","_ref9","_ref0","_m$moveId","_ref1","_ref10","_m$pvpPower","_ref11","_m$durationTurns","rawId","moveId","uniqueId","type","pokemonType","moveType","pvpPower","combatPower","damage","kind","energyGain","energyCost","turns","energyDelta","ed","abs","energy","durationTurns","cooldownTurns","mv","TACKLE","recommendMovesFor","leagueEntry","_leagueEntry$fast","sid","base","fastIdFromLeague","fastMove","chargedIdsFromLeague","gmFastIds","gmChargedIds","find","sort","b","buildFighter","src","leagueName","lvl","cpm","Atk","Def","HP","MaxHP","cooldown","bestCharged","att","bestVal","mult","val","simulateDuel","attackerIn","defenderIn","shieldsA","shieldsB","_book","_bestCharged","_bestCharged2","_A$fast","_B$fast","A","B","recA","recB","aSh","bSh","MAX_TURNS","log","tickFast","user","foe","hit","min","canThrow","u","some","chooseThrow","pick","shouldShield","defender","incoming","shieldsLeft","est","th","aReady","bReady","aFirst","resolve","who","_user$fast","move","shielded","push","winner","aHP","round","bHP","aRecommended","bRecommended","summary","bestOfThree","mine","enemy","myShields","foeShields","fights","you","r","score","vs","$RefreshReg$"],"sources":["C:/Users/ben/Projects/nebsojipvptrainer/src/battleCalc.js"],"sourcesContent":["// src/battleCalc.js\r\n// PvP-lite turn sim with shields, CMP, STAB, type eff., and robust GM parsing.\r\n// Restores the earlier math and makes move selection reliable again.\r\n\r\nlet SPECIES = {}; // speciesId -> { atk, def, sta, types:[], quickMoves:[ids], chargedMoves:[ids] }\r\nlet MOVES = {}; // MOVE_ID   -> { id, kind:\"fast\"|\"charged\", type, power, energyGain, energyCost, turns }\r\n\r\n/* ---------------- helpers ---------------- */\r\nconst num = (v, d = 0) => (Number.isFinite(+v) ? +v : d);\r\n\r\nfunction canonMoveId(s) {\r\n    if (!s) return \"\";\r\n    return String(s)\r\n        .trim()\r\n        .replace(/^COMBAT_V\\d+_MOVE_/i, \"\")\r\n        .replace(/^V\\d+_/i, \"\")\r\n        .replace(/[^A-Za-z0-9]+/g, \"_\")\r\n        .replace(/_+/g, \"_\")\r\n        .replace(/^_|_$/g, \"\")\r\n        .toUpperCase();\r\n}\r\nfunction normId(s) {\r\n    return String(s || \"\").toLowerCase().replace(/[^\\w]+/g, \"_\").replace(/^_+|_+$/g, \"\");\r\n}\r\nfunction tcase(s) { return s ? s.charAt(0).toUpperCase() + s.slice(1).toLowerCase() : s; }\r\nfunction normType(s) {\r\n    if (!s) return null;\r\n    const raw = String(s).replace(/^POKEMON_TYPE_/, \"\").replace(/_/g, \" \").trim().toLowerCase();\r\n    const T = tcase(raw);\r\n    return TYPES.includes(T) ? T : null;\r\n}\r\n\r\n/* ---------------- CP / level utils ---------------- */\r\nconst CPM = [];\r\n(function fillCPM() {\r\n    const table = [\r\n        0.094, 0.135137432, 0.16639787, 0.192650919, 0.21573247, 0.236572661, 0.25572005, 0.273530381,\r\n        0.29024988, 0.306057377, 0.3210876, 0.335445036, 0.34921268, 0.362457751, 0.37523559, 0.387592406,\r\n        0.39956728, 0.411193551, 0.42250001, 0.432926419, 0.44310755, 0.4530599578, 0.46279839, 0.472336083,\r\n        0.48168495, 0.4908558, 0.49985844, 0.508701765, 0.51739395, 0.525942511, 0.53435433, 0.542635767,\r\n        0.55079269, 0.558830576, 0.56675452, 0.574569153, 0.58227891, 0.589887907, 0.59740001, 0.604818814,\r\n        0.61215729, 0.619399365, 0.62656713, 0.633644533, 0.64065295, 0.647576426, 0.65443563, 0.661214806,\r\n        0.667934, 0.674577537, 0.68116492, 0.687680648, 0.69414365, 0.700538673, 0.70688421, 0.713164996,\r\n        0.71939909, 0.725571552, 0.7317, 0.734741009, 0.73776948, 0.740785574, 0.74378943, 0.746781211,\r\n        0.74976104, 0.752729087, 0.75568551, 0.758630378, 0.76156384, 0.764486065, 0.76739717, 0.770297266,\r\n        0.7731865, 0.776064962, 0.77893275, 0.781790055, 0.78463697, 0.787473578, 0.79030001, 0.792803968,\r\n        0.79530001, 0.797803921, 0.8003\r\n    ];\r\n    CPM.length = 100; CPM.fill(0);\r\n    for (let i = 0; i < table.length; i++) CPM[i + 1] = table[i];\r\n})();\r\nfunction cp(a, d, s, c) { return Math.floor((a * Math.sqrt(d) * Math.sqrt(s) * c * c) / 10); }\r\nfunction capLeague(league) {\r\n    const map = { \"Great League\": 1500, \"Ultra League\": 2500, \"Master League\": Infinity };\r\n    return typeof league === \"string\" ? (map[league] ?? Infinity) : (Number.isFinite(league) ? +league : Infinity);\r\n}\r\nfunction levelForCap(baseAtk, baseDef, baseSta, cap) {\r\n    if (!isFinite(cap)) return 99; // treat as ~50\r\n    let best = 1;\r\n    for (let i = 1; i < CPM.length; i++) {\r\n        const c = CPM[i]; if (!c) continue;\r\n        if (cp(baseAtk * c, baseDef * c, baseSta * c, 1) <= cap) best = i;\r\n    }\r\n    return best;\r\n}\r\n\r\n/* ---------------- type chart & damage ---------------- */\r\nconst TYPES = [\r\n    \"Normal\", \"Fighting\", \"Flying\", \"Poison\", \"Ground\", \"Rock\", \"Bug\", \"Ghost\", \"Steel\",\r\n    \"Fire\", \"Water\", \"Grass\", \"Electric\", \"Psychic\", \"Ice\", \"Dragon\", \"Dark\", \"Fairy\"\r\n];\r\nconst EFF = {};\r\nTYPES.forEach(a => { EFF[a] = {}; TYPES.forEach(d => EFF[a][d] = 1); });\r\nfunction S(atk, arr, m) { arr.forEach(d => EFF[atk][d] = m); }\r\nS(\"Fighting\", [\"Normal\", \"Rock\", \"Ice\", \"Dark\", \"Steel\"], 1.6); S(\"Fighting\", [\"Flying\", \"Poison\", \"Bug\", \"Psychic\", \"Fairy\"], 0.625);\r\nS(\"Flying\", [\"Fighting\", \"Bug\", \"Grass\"], 1.6); S(\"Flying\", [\"Rock\", \"Steel\", \"Electric\"], 0.625);\r\nS(\"Poison\", [\"Grass\", \"Fairy\"], 1.6); S(\"Poison\", [\"Poison\", \"Ground\", \"Rock\", \"Ghost\"], 0.625); S(\"Poison\", [\"Steel\"], 0.390625);\r\nS(\"Ground\", [\"Poison\", \"Rock\", \"Steel\", \"Fire\", \"Electric\"], 1.6); S(\"Ground\", [\"Bug\", \"Grass\"], 0.625); S(\"Ground\", [\"Flying\"], 0.390625);\r\nS(\"Rock\", [\"Flying\", \"Bug\", \"Fire\", \"Ice\"], 1.6); S(\"Rock\", [\"Fighting\", \"Ground\", \"Steel\"], 0.625);\r\nS(\"Bug\", [\"Grass\", \"Psychic\", \"Dark\"], 1.6); S(\"Bug\", [\"Fighting\", \"Flying\", \"Poison\", \"Ghost\", \"Steel\", \"Fire\", \"Fairy\"], 0.625);\r\nS(\"Ghost\", [\"Ghost\", \"Psychic\"], 1.6); S(\"Ghost\", [\"Dark\"], 0.625);\r\nS(\"Steel\", [\"Rock\", \"Ice\", \"Fairy\"], 1.6); S(\"Steel\", [\"Steel\", \"Fire\", \"Water\", \"Electric\"], 0.625);\r\nS(\"Fire\", [\"Bug\", \"Steel\", \"Grass\", \"Ice\"], 1.6); S(\"Fire\", [\"Rock\", \"Fire\", \"Water\", \"Dragon\"], 0.625);\r\nS(\"Water\", [\"Ground\", \"Rock\", \"Fire\"], 1.6); S(\"Water\", [\"Water\", \"Grass\", \"Dragon\"], 0.625);\r\nS(\"Grass\", [\"Ground\", \"Rock\", \"Water\"], 1.6); S(\"Grass\", [\"Flying\", \"Poison\", \"Bug\", \"Steel\", \"Fire\", \"Grass\", \"Dragon\"], 0.625);\r\nS(\"Electric\", [\"Flying\", \"Water\"], 1.6); S(\"Electric\", [\"Grass\", \"Electric\", \"Dragon\"], 0.625); S(\"Electric\", [\"Ground\"], 0.390625);\r\nS(\"Psychic\", [\"Fighting\", \"Poison\"], 1.6); S(\"Psychic\", [\"Psychic\", \"Steel\"], 0.625); S(\"Psychic\", [\"Dark\"], 0.390625);\r\nS(\"Ice\", [\"Flying\", \"Ground\", \"Grass\", \"Dragon\"], 1.6); S(\"Ice\", [\"Steel\", \"Fire\", \"Water\", \"Ice\"], 0.625);\r\nS(\"Dragon\", [\"Dragon\"], 1.6); S(\"Dragon\", [\"Steel\"], 0.625); S(\"Dragon\", [\"Fairy\"], 0.390625);\r\nS(\"Dark\", [\"Ghost\", \"Psychic\"], 1.6); S(\"Dark\", [\"Fighting\", \"Dark\", \"Fairy\"], 0.625);\r\nS(\"Fairy\", [\"Fighting\", \"Dragon\", \"Dark\"], 1.6); S(\"Fairy\", [\"Poison\", \"Steel\", \"Fire\"], 0.625);\r\n\r\nconst STAB = 1.2;\r\nfunction eff(multType, defendTypes) { let m = 1; for (const t of defendTypes || []) m *= (EFF[multType]?.[t] ?? 1); return m; }\r\nfunction dmg(power, atk, def, stab, effm) {\r\n    const raw = 0.5 * num(power, 0) * (num(atk, 1) / Math.max(1, num(def, 1))) * (stab || 1) * (effm || 1);\r\n    return Math.max(1, Math.floor(raw) + 1); // PvP rounding (+1)\r\n}\r\n\r\n/* ---------------- build books from GM ---------------- */\r\nfunction buildSpeciesBook(gm) {\r\n    const lists = [\r\n        gm?.pokemon, gm?.data?.pokemon, gm?.species, gm?.pokemonList, gm?.pokemonSettings\r\n    ].filter(Boolean);\r\n    const out = {};\r\n    for (const L of lists) {\r\n        for (const p of L) {\r\n            const id = normId(p.speciesId || p.pokemonId || p.templateId || p.id || p.name);\r\n            if (!id) continue;\r\n            const bs = p.baseStats || p.stats || {};\r\n            const atk = num(p.baseAttack ?? bs.atk ?? bs.attack ?? p.attack, 200);\r\n            const def = num(p.baseDefense ?? bs.def ?? bs.defense ?? p.defense, 200);\r\n            const sta = num(p.baseStamina ?? bs.sta ?? bs.stamina ?? p.stamina, 200);\r\n            const typesArr = p.types || [p.type1, p.type2].filter(Boolean);\r\n            const types = (typesArr || []).map(normType).filter(Boolean);\r\n\r\n            // move pools if present\r\n            const quickMoves = (p.quickMoves || p.fastMoves || p.moves?.fast || []).map(canonMoveId).filter(Boolean);\r\n            const chargedMoves = (p.chargedMoves || p.moves?.charged || []).map(canonMoveId).filter(Boolean);\r\n\r\n            out[id] = { atk, def, sta, types: types.length ? types : [\"Normal\"], quickMoves, chargedMoves };\r\n        }\r\n    }\r\n    return out;\r\n}\r\n\r\nexport function buildMoveBook(gm) {\r\n    SPECIES = buildSpeciesBook(gm);\r\n\r\n    const pools = [gm?.moves, gm?.combatMoves, gm?.data?.moves, gm?.data?.combatMoves, gm?.moveList].filter(Boolean);\r\n    const out = {};\r\n\r\n    for (const list of pools) {\r\n        for (const m of list) {\r\n            const rawId = m.moveId ?? m.id ?? m.uniqueId ?? m.templateId ?? m.name ?? \"\";\r\n            const id = canonMoveId(rawId);\r\n            if (!id) continue;\r\n\r\n            const type = normType(m.type || m.pokemonType || m.moveType) || \"Normal\";\r\n            const power = num(m.pvpPower ?? m.power ?? m.combatPower ?? m.damage, 3);\r\n\r\n            let kind = \"fast\", energyGain = 0, energyCost = 0, turns = 1;\r\n            if (m.energyDelta != null) {\r\n                const ed = num(m.energyDelta, 0);\r\n                if (ed > 0) { kind = \"fast\"; energyGain = ed; }\r\n                if (ed < 0) { kind = \"charged\"; energyCost = Math.abs(ed); }\r\n            }\r\n            if (m.energyGain != null) { kind = \"fast\"; energyGain = num(m.energyGain, 0); }\r\n            if (m.energy != null) { kind = \"charged\"; energyCost = Math.abs(num(m.energy, 0)); }\r\n            turns = num(m.durationTurns ?? m.turns ?? m.cooldownTurns, kind === \"fast\" ? 1 : 0);\r\n            if (kind === \"fast\") turns = Math.max(1, Math.floor(turns) || 1);\r\n\r\n            if (kind === \"fast\" && energyGain <= 0) { energyGain = 8; }\r\n            if (kind === \"charged\" && energyCost <= 0) { energyCost = 45; }\r\n\r\n            const mv = { id, kind, type, power, energyGain, energyCost, turns };\r\n            // prefer strongest variant if duplicates appear\r\n            if (!out[id] || power > out[id].power) out[id] = mv;\r\n        }\r\n    }\r\n\r\n    // very safe fallback fast move\r\n    out.TACKLE = out.TACKLE || { id: \"TACKLE\", kind: \"fast\", type: \"Normal\", power: 3, energyGain: 8, energyCost: 0, turns: 1 };\r\n\r\n    MOVES = out;\r\n    return out;\r\n}\r\n\r\n/* ---------------- move recommendations ---------------- */\r\n// Prefer league-provided moves when present, otherwise fall back to GM sets.\r\n// Always return real MOVES entries (never generic placeholders).\r\nexport function recommendMovesFor(speciesId, leagueEntry = {}) {\r\n    const sid = normId(speciesId || leagueEntry.speciesId);\r\n    const base = SPECIES[sid] || {};\r\n\r\n    // League-provided (exact labels or ids)\r\n    const fastIdFromLeague =\r\n        canonMoveId(leagueEntry.fastMove || leagueEntry.fast?.id || leagueEntry.fast);\r\n\r\n    const chargedIdsFromLeague = (leagueEntry.chargedMoves || [])\r\n        .map((c) => (typeof c === \"string\" ? c : c?.id))\r\n        .map(canonMoveId)\r\n        .filter(Boolean);\r\n\r\n    // GM pools\r\n    const gmFastIds = (base.quickMoves || []).map(canonMoveId);\r\n    const gmChargedIds = (base.chargedMoves || []).map(canonMoveId);\r\n\r\n    // Pick fast\r\n    let fast =\r\n        MOVES[fastIdFromLeague] ||\r\n        gmFastIds.map((id) => MOVES[id]).find((m) => m && m.kind === \"fast\") ||\r\n        MOVES.TACKLE;\r\n\r\n    // Pick 1–2 charged (highest power as a simple proxy)\r\n    let charged =\r\n        chargedIdsFromLeague.map((id) => MOVES[id]).filter(Boolean);\r\n\r\n    if (!charged.length) {\r\n        charged = gmChargedIds\r\n            .map((id) => MOVES[id])\r\n            .filter((m) => m && m.kind === \"charged\")\r\n            .sort((a, b) => b.power - a.power)\r\n            .slice(0, 2);\r\n    }\r\n    if (!charged.length) {\r\n        // last resort\r\n        charged = [{ id: \"STRUGGLE\", kind: \"charged\", type: \"Normal\", power: 65, energyCost: 33 }];\r\n    }\r\n\r\n    return { fast, chargedMoves: charged };\r\n}\r\n\r\n/* ---------------- fighter build at league cap ---------------- */\r\nfunction buildFighter(src, leagueName) {\r\n    const cap = capLeague(leagueName);\r\n    const sid = normId(src.speciesId || src.name);\r\n\r\n    const base = SPECIES[sid] || { atk: 200, def: 200, sta: 200, types: [\"Normal\"] };\r\n    const lvl = levelForCap(base.atk, base.def, base.sta, cap);\r\n    const cpm = CPM[lvl] || CPM[99];\r\n\r\n    const Atk = base.atk * cpm;\r\n    const Def = base.def * cpm;\r\n    const HP = Math.max(1, Math.floor(base.sta * cpm));\r\n\r\n    // Use src moves if already normalized; otherwise use recommendations:\r\n    const fast = src.fast && src.fast.kind ? src.fast : recommendMovesFor(sid, src).fast;\r\n    const chargedMoves = (src.chargedMoves || recommendMovesFor(sid, src).chargedMoves)\r\n        .map((m) => (m.id ? m : MOVES[canonMoveId(m)]))\r\n        .filter(Boolean);\r\n\r\n    return {\r\n        name: src.name || src.speciesId,\r\n        speciesId: sid,\r\n        types: base.types,\r\n        Atk, Def, MaxHP: HP, HP,\r\n        fast, chargedMoves,\r\n        energy: 0,\r\n        cooldown: 0\r\n    };\r\n}\r\n\r\n/* ---------------- tiny helpers for the sim ---------------- */\r\nfunction bestCharged(att, def) {\r\n    let best = null, bestVal = -Infinity;\r\n    for (const m of (att.chargedMoves || [])) {\r\n        if (!m || m.kind !== \"charged\") continue;\r\n        const stab = att.types.includes(m.type) ? STAB : 1;\r\n        const mult = eff(m.type, def.types);\r\n        const val = dmg(m.power, att.Atk, def.Def, stab, mult);\r\n        if (val > bestVal) { bestVal = val; best = m; }\r\n    }\r\n    return best;\r\n}\r\n\r\n/* ---------------- main duel sim ---------------- */\r\nexport function simulateDuel(attackerIn, defenderIn, shieldsA = 2, shieldsB = 2, _book, leagueName = \"Master League\") {\r\n    const A = buildFighter(attackerIn, leagueName);\r\n    const B = buildFighter(defenderIn, leagueName);\r\n\r\n    const recA = bestCharged(A, B)?.id || null;\r\n    const recB = bestCharged(B, A)?.id || null;\r\n\r\n    let aSh = Math.max(0, shieldsA | 0), bSh = Math.max(0, shieldsB | 0);\r\n    let t = 0; const MAX_TURNS = 2000; const log = [];\r\n\r\n    function tickFast(user, foe) {\r\n        if (!user.fast) return;\r\n        user.cooldown--;\r\n        if (user.cooldown <= 0) {\r\n            const stab = user.types.includes(user.fast.type) ? STAB : 1;\r\n            const mult = eff(user.fast.type, foe.types);\r\n            const hit = dmg(user.fast.power, user.Atk, foe.Def, stab, mult);\r\n            foe.HP = Math.max(0, foe.HP - hit);\r\n            user.energy = Math.min(100, user.energy + num(user.fast.energyGain, 0));\r\n            user.cooldown = user.fast.turns || 1;\r\n        }\r\n    }\r\n    const canThrow = (u) => (u.chargedMoves || []).some(m => u.energy >= (m.energyCost || 45));\r\n    function chooseThrow(u, foe) {\r\n        let pick = null, best = -Infinity;\r\n        for (const m of (u.chargedMoves || [])) {\r\n            if (u.energy < (m.energyCost || 45)) continue;\r\n            const stab = u.types.includes(m.type) ? STAB : 1;\r\n            const mult = eff(m.type, foe.types);\r\n            const val = dmg(m.power, u.Atk, foe.Def, stab, mult);\r\n            if (val > best) { best = val; pick = m; }\r\n        }\r\n        return pick;\r\n    }\r\n    function shouldShield(defender, incoming, shieldsLeft) {\r\n        if (shieldsLeft <= 0) return false;\r\n        const stab = defender.types.includes(incoming.type) ? STAB : 1;\r\n        const mult = eff(incoming.type, defender.types);\r\n        const est = dmg(incoming.power, defender.Atk /* not used */, defender.Def, stab, mult);\r\n        const th = shieldsLeft === 2 ? 0.32 : 0.45; // liberal with 2, stricter with 1\r\n        return est >= defender.HP || est >= defender.MaxHP * th;\r\n    }\r\n\r\n    A.cooldown = A.fast?.turns || 1;\r\n    B.cooldown = B.fast?.turns || 1;\r\n\r\n    while (A.HP > 0 && B.HP > 0 && t < MAX_TURNS) {\r\n        t++;\r\n        const aReady = canThrow(A);\r\n        const bReady = canThrow(B);\r\n\r\n        if (aReady || bReady) {\r\n            const aFirst = aReady && (!bReady || (A.Atk >= B.Atk));\r\n\r\n            const resolve = (user, foe, who) => {\r\n                const move = chooseThrow(user, foe);\r\n                if (!move) return;\r\n                let shielded = false;\r\n                if (who === \"A\" ? shouldShield(B, move, bSh) : shouldShield(A, move, aSh)) {\r\n                    if (who === \"A\") bSh--; else aSh--;\r\n                    shielded = true;\r\n                } else {\r\n                    const stab = user.types.includes(move.type) ? STAB : 1;\r\n                    const mult = eff(move.type, foe.types);\r\n                    const hit = dmg(move.power, user.Atk, foe.Def, stab, mult);\r\n                    foe.HP = Math.max(0, foe.HP - hit);\r\n                }\r\n                user.energy -= (move.energyCost || 45);\r\n                user.cooldown = user.fast?.turns || 1;\r\n                log.push(`${who} throws ${move.id}${shielded ? \" (shielded)\" : \"\"}`);\r\n            };\r\n\r\n            if (aFirst) {\r\n                resolve(A, B, \"A\"); if (B.HP <= 0) break;\r\n                if (bReady) resolve(B, A, \"B\"); if (A.HP <= 0) break;\r\n            } else {\r\n                resolve(B, A, \"B\"); if (A.HP <= 0) break;\r\n                if (aReady) resolve(A, B, \"A\"); if (B.HP <= 0) break;\r\n            }\r\n            continue;\r\n        }\r\n\r\n        tickFast(A, B); if (B.HP <= 0) break;\r\n        tickFast(B, A); if (A.HP <= 0) break;\r\n    }\r\n\r\n    const winner =\r\n        A.HP <= 0 && B.HP <= 0 ? \"Draw\" :\r\n            A.HP <= 0 ? B.name :\r\n                B.HP <= 0 ? A.name :\r\n                    (A.HP === B.HP ? \"Draw\" : (A.HP > B.HP ? A.name : B.name));\r\n\r\n    return {\r\n        winner,\r\n        aHP: Math.round((A.HP / A.MaxHP) * 100),\r\n        bHP: Math.round((B.HP / B.MaxHP) * 100),\r\n        aRecommended: recA,\r\n        bRecommended: recB,\r\n        summary: log.slice(0, 12)\r\n    };\r\n}\r\n\r\n/* ---------------- best-of-three wrapper ---------------- */\r\nexport function bestOfThree(mine, enemy, myShields, foeShields, _book, leagueName = \"Master League\") {\r\n    const fights = (mine || []).map(m => {\r\n        const you = { ...m, name: m.name || m.speciesId };\r\n        const foe = { ...enemy, name: enemy.name || enemy.speciesId };\r\n        const r = simulateDuel(you, foe, myShields, foeShields, MOVES, leagueName);\r\n        const score = r.winner === you.name ? 1 : (r.winner === \"Draw\" ? 0 : -1);\r\n        return { you: you.name, vs: foe.name, ...r, score };\r\n    });\r\n    fights.sort((a, b) => (b.score - a.score) || (b.aHP - a.aHP) || (b.bHP - a.bHP));\r\n    return { best: fights[0], fights };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}