{"ast":null,"code":"// PvP lite sim with fixed turn-order (fast first, then charged by CMP),\n// corrected shield decision (estimate using ATTACKER stats), and\n// full exports used by App.js: buildMoveBook, recommendMovesFor, bestOfThree, simulateDuel.\n\n/* --------------------- Books --------------------- */\nlet SPECIES = {}; // speciesId -> { atk, def, sta, types: [...] }\nlet MOVES = {}; // MOVE_ID   -> { id, kind: \"fast\"|\"charged\", type, power, energyGain, energyCost, turns }\n\n/* --------------------- Utils --------------------- */\nconst num = (v, d = 0) => Number.isFinite(Number(v)) ? Number(v) : d;\nfunction canonMoveId(s) {\n  if (!s) return \"\";\n  return String(s).trim().replace(/^COMBAT_V\\d+_MOVE_/i, \"\").replace(/^V\\d+_/i, \"\").replace(/[^A-Za-z0-9]+/g, \"_\").replace(/_+/g, \"_\").replace(/^_|_$/g, \"\").toUpperCase();\n}\nfunction normId(s) {\n  return String(s || \"\").toLowerCase().replace(/[^\\w]+/g, \"_\").replace(/^_+|_+$/g, \"\");\n}\nfunction tcase(s) {\n  return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();\n}\nfunction normType(s) {\n  if (!s) return null;\n  const raw = String(s).replace(/^POKEMON_TYPE_/, \"\").replace(/_/g, \" \").trim().toLowerCase();\n  const T = tcase(raw);\n  return TYPES.includes(T) ? T : null;\n}\nfunction capLeague(league) {\n  var _map$league;\n  const map = {\n    \"Great League\": 1500,\n    \"Ultra League\": 2500,\n    \"Master League\": Infinity\n  };\n  return typeof league === \"string\" ? (_map$league = map[league]) !== null && _map$league !== void 0 ? _map$league : Infinity : Number.isFinite(league) ? Number(league) : Infinity;\n}\n\n/* --------------------- CPM & Level --------------------- */\nconst CPM = [];\n(function fillCPM() {\n  const t = [0.094, 0.135137432, 0.16639787, 0.192650919, 0.21573247, 0.236572661, 0.25572005, 0.273530381, 0.29024988, 0.306057377, 0.3210876, 0.335445036, 0.34921268, 0.362457751, 0.37523559, 0.387592406, 0.39956728, 0.411193551, 0.42250001, 0.432926419, 0.44310755, 0.4530599578, 0.46279839, 0.472336083, 0.48168495, 0.4908558, 0.49985844, 0.508701765, 0.51739395, 0.525942511, 0.53435433, 0.542635767, 0.55079269, 0.558830576, 0.56675452, 0.574569153, 0.58227891, 0.589887907, 0.59740001, 0.604818814, 0.61215729, 0.619399365, 0.62656713, 0.633644533, 0.64065295, 0.647576426, 0.65443563, 0.661214806, 0.667934, 0.674577537, 0.68116492, 0.687680648, 0.69414365, 0.700538673, 0.70688421, 0.713164996, 0.71939909, 0.725571552, 0.7317, 0.734741009, 0.73776948, 0.740785574, 0.74378943, 0.746781211, 0.74976104, 0.752729087, 0.75568551, 0.758630378, 0.76156384, 0.764486065, 0.76739717, 0.770297266, 0.7731865, 0.776064962, 0.77893275, 0.781790055, 0.78463697, 0.787473578, 0.79030001, 0.792803968, 0.79530001, 0.797803921, 0.8003];\n  CPM.length = 100;\n  CPM.fill(0);\n  for (let i = 0; i < t.length; i++) CPM[i + 1] = t[i];\n})();\nfunction cp(a, d, s, c) {\n  return Math.floor(a * Math.sqrt(d) * Math.sqrt(s) * c * c / 10);\n}\nfunction levelForCap(baseAtk, baseDef, baseSta, cap) {\n  if (!isFinite(cap)) return 99;\n  let best = 1;\n  for (let i = 1; i < CPM.length; i++) {\n    const c = CPM[i];\n    if (!c) continue;\n    if (cp(baseAtk * c, baseDef * c, baseSta * c, 1) <= cap) best = i;\n  }\n  return best;\n}\n\n/* --------------------- Types & Damage --------------------- */\nconst TYPES = [\"Normal\", \"Fighting\", \"Flying\", \"Poison\", \"Ground\", \"Rock\", \"Bug\", \"Ghost\", \"Steel\", \"Fire\", \"Water\", \"Grass\", \"Electric\", \"Psychic\", \"Ice\", \"Dragon\", \"Dark\", \"Fairy\"];\nconst EFF = {};\nTYPES.forEach(a => {\n  EFF[a] = {};\n  TYPES.forEach(d => EFF[a][d] = 1);\n});\nfunction S(atk, arr, m) {\n  arr.forEach(d => EFF[atk][d] = m);\n}\n_c = S;\nS(\"Fighting\", [\"Normal\", \"Rock\", \"Ice\", \"Dark\", \"Steel\"], 1.6);\nS(\"Fighting\", [\"Flying\", \"Poison\", \"Bug\", \"Psychic\", \"Fairy\"], 0.625);\nS(\"Flying\", [\"Fighting\", \"Bug\", \"Grass\"], 1.6);\nS(\"Flying\", [\"Rock\", \"Steel\", \"Electric\"], 0.625);\nS(\"Poison\", [\"Grass\", \"Fairy\"], 1.6);\nS(\"Poison\", [\"Poison\", \"Ground\", \"Rock\", \"Ghost\"], 0.625);\nS(\"Poison\", [\"Steel\"], 0.390625);\nS(\"Ground\", [\"Poison\", \"Rock\", \"Steel\", \"Fire\", \"Electric\"], 1.6);\nS(\"Ground\", [\"Bug\", \"Grass\"], 0.625);\nS(\"Ground\", [\"Flying\"], 0.390625);\nS(\"Rock\", [\"Flying\", \"Bug\", \"Fire\", \"Ice\"], 1.6);\nS(\"Rock\", [\"Fighting\", \"Ground\", \"Steel\"], 0.625);\nS(\"Bug\", [\"Grass\", \"Psychic\", \"Dark\"], 1.6);\nS(\"Bug\", [\"Fighting\", \"Flying\", \"Poison\", \"Ghost\", \"Steel\", \"Fire\", \"Fairy\"], 0.625);\nS(\"Ghost\", [\"Ghost\", \"Psychic\"], 1.6);\nS(\"Ghost\", [\"Dark\"], 0.625);\nS(\"Steel\", [\"Rock\", \"Ice\", \"Fairy\"], 1.6);\nS(\"Steel\", [\"Steel\", \"Fire\", \"Water\", \"Electric\"], 0.625);\nS(\"Fire\", [\"Bug\", \"Steel\", \"Grass\", \"Ice\"], 1.6);\nS(\"Fire\", [\"Rock\", \"Fire\", \"Water\", \"Dragon\"], 0.625);\nS(\"Water\", [\"Ground\", \"Rock\", \"Fire\"], 1.6);\nS(\"Water\", [\"Water\", \"Grass\", \"Dragon\"], 0.625);\nS(\"Grass\", [\"Ground\", \"Rock\", \"Water\"], 1.6);\nS(\"Grass\", [\"Flying\", \"Poison\", \"Bug\", \"Steel\", \"Fire\", \"Grass\", \"Dragon\"], 0.625);\nS(\"Electric\", [\"Flying\", \"Water\"], 1.6);\nS(\"Electric\", [\"Grass\", \"Electric\", \"Dragon\"], 0.625);\nS(\"Electric\", [\"Ground\"], 0.390625);\nS(\"Psychic\", [\"Fighting\", \"Poison\"], 1.6);\nS(\"Psychic\", [\"Psychic\", \"Steel\"], 0.625);\nS(\"Psychic\", [\"Dark\"], 0.390625);\nS(\"Ice\", [\"Flying\", \"Ground\", \"Grass\", \"Dragon\"], 1.6);\nS(\"Ice\", [\"Steel\", \"Fire\", \"Water\", \"Ice\"], 0.625);\nS(\"Dragon\", [\"Dragon\"], 1.6);\nS(\"Dragon\", [\"Steel\"], 0.625);\nS(\"Dragon\", [\"Fairy\"], 0.390625);\nS(\"Dark\", [\"Ghost\", \"Psychic\"], 1.6);\nS(\"Dark\", [\"Fighting\", \"Dark\", \"Fairy\"], 0.625);\nS(\"Fairy\", [\"Fighting\", \"Dragon\", \"Dark\"], 1.6);\nS(\"Fairy\", [\"Poison\", \"Steel\", \"Fire\"], 0.625);\nconst STAB = 1.2;\nfunction eff(multType, defTypes) {\n  let m = 1;\n  for (const t of defTypes) {\n    var _EFF$multType$t, _EFF$multType;\n    m *= (_EFF$multType$t = (_EFF$multType = EFF[multType]) === null || _EFF$multType === void 0 ? void 0 : _EFF$multType[t]) !== null && _EFF$multType$t !== void 0 ? _EFF$multType$t : 1;\n  }\n  return m;\n}\nfunction dmg(power, atk, def, stab, effm) {\n  const raw = 0.5 * num(power, 0) * (num(atk, 1) / Math.max(1, num(def, 1))) * (stab || 1) * (effm || 1);\n  return Math.max(1, Math.floor(raw) + 1);\n}\n\n/* --------------------- Build books from GM --------------------- */\nfunction buildSpeciesBook(gm) {\n  var _gm$data;\n  const lists = [gm === null || gm === void 0 ? void 0 : gm.pokemon, gm === null || gm === void 0 ? void 0 : (_gm$data = gm.data) === null || _gm$data === void 0 ? void 0 : _gm$data.pokemon, gm === null || gm === void 0 ? void 0 : gm.species, gm === null || gm === void 0 ? void 0 : gm.pokemonList, gm === null || gm === void 0 ? void 0 : gm.pokemonSettings].filter(Boolean);\n  const out = {};\n  for (const L of lists) {\n    for (const p of L) {\n      var _ref, _ref2, _p$baseAttack, _ref3, _ref4, _p$baseDefense, _ref5, _ref6, _p$baseStamina;\n      const id = normId(p.speciesId || p.pokemonId || p.templateId || p.id || p.name);\n      if (!id) continue;\n      const bs = p.baseStats || p.stats || {};\n      const atk = num((_ref = (_ref2 = (_p$baseAttack = p.baseAttack) !== null && _p$baseAttack !== void 0 ? _p$baseAttack : bs.atk) !== null && _ref2 !== void 0 ? _ref2 : bs.attack) !== null && _ref !== void 0 ? _ref : p.attack, 200);\n      const def = num((_ref3 = (_ref4 = (_p$baseDefense = p.baseDefense) !== null && _p$baseDefense !== void 0 ? _p$baseDefense : bs.def) !== null && _ref4 !== void 0 ? _ref4 : bs.defense) !== null && _ref3 !== void 0 ? _ref3 : p.defense, 200);\n      const sta = num((_ref5 = (_ref6 = (_p$baseStamina = p.baseStamina) !== null && _p$baseStamina !== void 0 ? _p$baseStamina : bs.sta) !== null && _ref6 !== void 0 ? _ref6 : bs.stamina) !== null && _ref5 !== void 0 ? _ref5 : p.stamina, 200);\n      const typesArr = p.types || [p.type1, p.type2].filter(Boolean);\n      const types = (typesArr || []).map(normType).filter(Boolean);\n      out[id] = {\n        atk,\n        def,\n        sta,\n        types: types.length ? types : [\"Normal\"]\n      };\n    }\n  }\n  return out;\n}\nexport function buildMoveBook(gm) {\n  var _gm$data2, _gm$data3;\n  SPECIES = buildSpeciesBook(gm);\n  const pools = [gm === null || gm === void 0 ? void 0 : gm.moves, gm === null || gm === void 0 ? void 0 : gm.combatMoves, gm === null || gm === void 0 ? void 0 : (_gm$data2 = gm.data) === null || _gm$data2 === void 0 ? void 0 : _gm$data2.moves, gm === null || gm === void 0 ? void 0 : (_gm$data3 = gm.data) === null || _gm$data3 === void 0 ? void 0 : _gm$data3.combatMoves, gm === null || gm === void 0 ? void 0 : gm.moveList].filter(Boolean);\n  const out = {};\n  for (const list of pools) {\n    for (const m of list) {\n      var _ref7, _ref8, _ref9, _ref0, _m$moveId, _ref1, _ref10, _m$pvpPower, _ref11, _m$durationTurns;\n      const rawId = (_ref7 = (_ref8 = (_ref9 = (_ref0 = (_m$moveId = m.moveId) !== null && _m$moveId !== void 0 ? _m$moveId : m.id) !== null && _ref0 !== void 0 ? _ref0 : m.uniqueId) !== null && _ref9 !== void 0 ? _ref9 : m.templateId) !== null && _ref8 !== void 0 ? _ref8 : m.name) !== null && _ref7 !== void 0 ? _ref7 : \"\";\n      const id = canonMoveId(rawId);\n      if (!id) continue;\n      const type = normType(m.type || m.pokemonType || m.moveType) || \"Normal\";\n      const power = num((_ref1 = (_ref10 = (_m$pvpPower = m.pvpPower) !== null && _m$pvpPower !== void 0 ? _m$pvpPower : m.power) !== null && _ref10 !== void 0 ? _ref10 : m.combatPower) !== null && _ref1 !== void 0 ? _ref1 : m.damage, 3);\n      let kind = \"fast\",\n        energyGain = 0,\n        energyCost = 0,\n        turns = 1;\n      if (m.energyDelta != null) {\n        const ed = num(m.energyDelta, 0);\n        if (ed > 0) {\n          kind = \"fast\";\n          energyGain = ed;\n        }\n        if (ed < 0) {\n          kind = \"charged\";\n          energyCost = Math.abs(ed);\n        }\n      }\n      if (m.energyGain != null) {\n        kind = \"fast\";\n        energyGain = num(m.energyGain, 0);\n      }\n      if (m.energy != null) {\n        kind = \"charged\";\n        energyCost = Math.abs(num(m.energy, 0));\n      }\n      turns = num((_ref11 = (_m$durationTurns = m.durationTurns) !== null && _m$durationTurns !== void 0 ? _m$durationTurns : m.turns) !== null && _ref11 !== void 0 ? _ref11 : m.cooldownTurns, kind === \"fast\" ? 1 : 0);\n      if (kind === \"fast\") turns = Math.max(1, Math.floor(turns) || 1);\n      if (kind === \"fast\" && energyGain <= 0) {\n        energyGain = 8;\n      }\n      if (kind === \"charged\" && energyCost <= 0) {\n        energyCost = 45;\n      }\n      const mv = {\n        id,\n        kind,\n        type,\n        power,\n        energyGain,\n        energyCost,\n        turns\n      };\n      if (!out[id] || power > out[id].power) out[id] = mv;\n    }\n  }\n\n  // Fallback fast & generic charged\n  out.TACKLE = out.TACKLE || {\n    id: \"TACKLE\",\n    kind: \"fast\",\n    type: \"Normal\",\n    power: 3,\n    energyGain: 8,\n    energyCost: 0,\n    turns: 1\n  };\n  out.GENERIC_CHARGED = {\n    id: \"GENERIC_CHARGED\",\n    kind: \"charged\",\n    type: \"Normal\",\n    power: 70,\n    energyCost: 45\n  };\n  out.GENERIC_CHARGED2 = {\n    id: \"GENERIC_CHARGED2\",\n    kind: \"charged\",\n    type: \"Normal\",\n    power: 90,\n    energyCost: 55\n  };\n  MOVES = out;\n  return out;\n}\n\n/* --------------------- Fighters --------------------- */\nfunction buildFighter(src, leagueName) {\n  const cap = capLeague(leagueName);\n  const sid = normId(src.speciesId || src.name);\n  const base = SPECIES[sid] || {\n    atk: 200,\n    def: 200,\n    sta: 200,\n    types: [\"Normal\"]\n  };\n  const lvl = levelForCap(base.atk, base.def, base.sta, cap);\n  const cpm = CPM[lvl] || CPM[99];\n  const Atk = base.atk * cpm;\n  const Def = base.def * cpm;\n  const HP = Math.max(1, Math.floor(base.sta * cpm));\n  const fast = MOVES[canonMoveId(src.fastMove)] || MOVES.TACKLE;\n  const chargedMoves = (src.chargedMoves || []).map(canonMoveId).map(id => MOVES[id]).filter(Boolean);\n  if (chargedMoves.length === 0) {\n    chargedMoves.push(MOVES.GENERIC_CHARGED, MOVES.GENERIC_CHARGED2);\n  }\n  return {\n    name: src.name || src.speciesId,\n    speciesId: sid,\n    types: base.types,\n    Atk,\n    Def,\n    MaxHP: HP,\n    HP,\n    fast,\n    chargedMoves,\n    energy: 0,\n    cooldown: 0\n  };\n}\n\n/* --------------------- Master move recommendations (editable) --------------------- */\n/*  Keys are normalized species ids (normId). Only used when league entry lacks moves.\r\n    These can be tuned to your meta or corrected as you like.  */\nconst MOVE_RECS = {\n  // Dragons / legendaries\n  dragonite: {\n    fastMove: \"DRAGON_BREATH\",\n    chargedMoves: [\"DRAGON_CLAW\", \"SUPERPOWER\"]\n  },\n  dialga: {\n    fastMove: \"DRAGON_BREATH\",\n    chargedMoves: [\"IRON_HEAD\", \"DRACO_METEOR\"]\n  },\n  dialga_origin: {\n    fastMove: \"DRAGON_BREATH\",\n    chargedMoves: [\"ROAR_OF_TIME\", \"IRON_HEAD\"]\n  },\n  garchomp: {\n    fastMove: \"MUD_SHOT\",\n    chargedMoves: [\"EARTH_POWER\", \"OUTRAGE\"]\n  },\n  kyurem: {\n    fastMove: \"DRAGON_BREATH\",\n    chargedMoves: [\"GLACIATE\", \"DRAGON_CLAW\"]\n  },\n  palkia: {\n    fastMove: \"DRAGON_BREATH\",\n    chargedMoves: [\"AQUA_TAIL\", \"DRACO_METEOR\"]\n  },\n  reshiram: {\n    fastMove: \"DRAGON_BREATH\",\n    chargedMoves: [\"FUSION_FLARE\", \"DRACO_METEOR\"]\n  },\n  zekrom: {\n    fastMove: \"DRAGON_BREATH\",\n    chargedMoves: [\"FUSION_BOLT\", \"CRUNCH\"]\n  },\n  // Primals / heavy hitters\n  groudon: {\n    fastMove: \"MUD_SHOT\",\n    chargedMoves: [\"PRECIPICE_BLADES\", \"FIRE_PUNCH\"]\n  },\n  kyogre: {\n    fastMove: \"WATERFALL\",\n    chargedMoves: [\"SURF\", \"THUNDER\"]\n  },\n  ho_oh: {\n    fastMove: \"INCINERATE\",\n    chargedMoves: [\"SACRED_FIRE\", \"BRAVE_BIRD\"]\n  },\n  mewtwo: {\n    fastMove: \"PSYCHO_CUT\",\n    chargedMoves: [\"PSYSTRIKE\", \"SHADOW_BALL\"]\n  },\n  // Steel / ground cores\n  metagross: {\n    fastMove: \"BULLET_PUNCH\",\n    chargedMoves: [\"METEOR_MASH\", \"EARTHQUAKE\"]\n  },\n  melmetal: {\n    fastMove: \"THUNDER_SHOCK\",\n    chargedMoves: [\"DOUBLE_IRON_BASH\", \"ROCK_SLIDE\"]\n  },\n  rhyperior: {\n    fastMove: \"SMACK_DOWN\",\n    chargedMoves: [\"ROCK_WRECKER\", \"SURF\"]\n  },\n  excadrill: {\n    fastMove: \"MUD_SHOT\",\n    chargedMoves: [\"DRILL_RUN\", \"ROCK_SLIDE\"]\n  },\n  landorus_therian: {\n    fastMove: \"MUD_SHOT\",\n    chargedMoves: [\"STONE_EDGE\", \"EARTHQUAKE\"]\n  },\n  // Fairies / darks (note: Crowned forms here use steel-centric kit per your note)\n  togekiss: {\n    fastMove: \"CHARM\",\n    chargedMoves: [\"ANCIENT_POWER\", \"FLAMETHROWER\"]\n  },\n  yveltal: {\n    fastMove: \"SNARL\",\n    chargedMoves: [\"OBLIVION_WING\", \"DARK_PULSE\"]\n  },\n  xerneas: {\n    fastMove: \"GEOMANCY\",\n    chargedMoves: [\"MOONBLAST\", \"THUNDER\"]\n  },\n  hydreigon: {\n    fastMove: \"DRAGON_BREATH\",\n    chargedMoves: [\"BRUTAL_SWING\", \"DRAGON_PULSE\"]\n  },\n  // Crowned forms (adjusted away from Snarl/fairy as requested)\n  zacian_crowned_sword: {\n    fastMove: \"METAL_CLAW\",\n    chargedMoves: [\"CLOSE_COMBAT\", \"IRON_HEAD\"]\n  },\n  zamazenta_crowned_shield: {\n    fastMove: \"METAL_CLAW\",\n    chargedMoves: [\"CLOSE_COMBAT\", \"IRON_HEAD\"]\n  },\n  // Others seen in ML\n  primarina: {\n    fastMove: \"CHARM\",\n    chargedMoves: [\"MOONBLAST\", \"HYDRO_PUMP\"]\n  }\n};\n\n/* --------------------- Helpers used by App --------------------- */\n// If league list already supplies moves, leave it alone. Otherwise use MOVE_RECS; else safe fallbacks.\nexport function recommendMovesFor(_speciesId, baseEntry) {\n  var _baseEntry$chargedMov;\n  if (baseEntry !== null && baseEntry !== void 0 && baseEntry.fastMove || baseEntry !== null && baseEntry !== void 0 && (_baseEntry$chargedMov = baseEntry.chargedMoves) !== null && _baseEntry$chargedMov !== void 0 && _baseEntry$chargedMov.length) return {};\n  const sid = normId(_speciesId || (baseEntry === null || baseEntry === void 0 ? void 0 : baseEntry.speciesId));\n  const rec = MOVE_RECS[sid];\n  if (rec) return rec;\n  return {\n    fastMove: \"TACKLE\",\n    chargedMoves: [\"GENERIC_CHARGED\", \"GENERIC_CHARGED2\"]\n  };\n}\nfunction bestCharged(att, def) {\n  let best = null,\n    bestVal = -Infinity;\n  for (const m of att.chargedMoves || []) {\n    if (!m || m.kind !== \"charged\") continue;\n    const stab = att.types.includes(m.type) ? STAB : 1;\n    const mult = eff(m.type, def.types);\n    const val = dmg(m.power, att.Atk, def.Def, stab, mult);\n    if (val > bestVal) {\n      bestVal = val;\n      best = m;\n    }\n  }\n  return best;\n}\n\n/* --------------------- Duel (fixed turn order + shields) --------------------- */\nfunction shouldShield(attacker, defender, incomingMove, shieldsLeft) {\n  if (shieldsLeft <= 0) return false;\n  const stab = attacker.types.includes(incomingMove.type) ? STAB : 1;\n  const mult = eff(incomingMove.type, defender.types);\n  const hit = dmg(incomingMove.power, attacker.Atk, defender.Def, stab, mult);\n  const threshold = shieldsLeft === 2 ? 0.32 : 0.45;\n  return hit >= defender.HP || hit >= defender.MaxHP * threshold;\n}\nexport function simulateDuel(attackerIn, defenderIn, shieldsA = 2, shieldsB = 2, _book = MOVES, leagueName = \"Master League\") {\n  var _bestCharged, _bestCharged2, _A$fast, _B$fast;\n  const A = buildFighter(attackerIn, leagueName);\n  const B = buildFighter(defenderIn, leagueName);\n  const recA = ((_bestCharged = bestCharged(A, B)) === null || _bestCharged === void 0 ? void 0 : _bestCharged.id) || null;\n  const recB = ((_bestCharged2 = bestCharged(B, A)) === null || _bestCharged2 === void 0 ? void 0 : _bestCharged2.id) || null;\n  let aSh = Math.max(0, shieldsA | 0),\n    bSh = Math.max(0, shieldsB | 0);\n  let t = 0;\n  const MAX_TURNS = 2000;\n  const log = [];\n  function progressFast(user, foe) {\n    if (!user.fast) return;\n    user.cooldown--;\n    if (user.cooldown <= 0) {\n      const stab = user.types.includes(user.fast.type) ? STAB : 1;\n      const mult = eff(user.fast.type, foe.types);\n      const hit = dmg(user.fast.power, user.Atk, foe.Def, stab, mult);\n      foe.HP = Math.max(0, foe.HP - hit);\n      user.energy = Math.min(100, user.energy + (user.fast.energyGain || 0));\n      user.cooldown = user.fast.turns || 1;\n    }\n  }\n  function canThrow(u) {\n    return (u.chargedMoves || []).some(m => u.energy >= (m.energyCost || 45));\n  }\n  function chooseThrow(u, foe) {\n    let pick = null,\n      best = -Infinity;\n    for (const m of u.chargedMoves || []) {\n      if (u.energy < (m.energyCost || 45)) continue;\n      const stab = u.types.includes(m.type) ? STAB : 1;\n      const mult = eff(m.type, foe.types);\n      const val = dmg(m.power, u.Atk, foe.Def, stab, mult);\n      if (val > best) {\n        best = val;\n        pick = m;\n      }\n    }\n    return pick;\n  }\n  function doThrow(attacker, defender, who) {\n    var _attacker$fast;\n    const move = chooseThrow(attacker, defender);\n    if (!move) return;\n    let shielded = false;\n    if (who === \"A\" ? shouldShield(attacker, defender, move, bSh) : shouldShield(attacker, defender, move, aSh)) {\n      if (who === \"A\") bSh--;else aSh--;\n      shielded = true;\n    } else {\n      const stab = attacker.types.includes(move.type) ? STAB : 1;\n      const mult = eff(move.type, defender.types);\n      const hit = dmg(move.power, attacker.Atk, defender.Def, stab, mult);\n      defender.HP = Math.max(0, defender.HP - hit);\n    }\n    attacker.energy -= move.energyCost || 45;\n    attacker.cooldown = ((_attacker$fast = attacker.fast) === null || _attacker$fast === void 0 ? void 0 : _attacker$fast.turns) || 1;\n    log.push(`${who} throws ${move.id}${shielded ? \" (shielded)\" : \"\"}`);\n  }\n  A.cooldown = ((_A$fast = A.fast) === null || _A$fast === void 0 ? void 0 : _A$fast.turns) || 1;\n  B.cooldown = ((_B$fast = B.fast) === null || _B$fast === void 0 ? void 0 : _B$fast.turns) || 1;\n  while (A.HP > 0 && B.HP > 0 && t < MAX_TURNS) {\n    t++;\n\n    // 1) both sides advance fast first\n    progressFast(A, B);\n    if (B.HP <= 0) break;\n    progressFast(B, A);\n    if (A.HP <= 0) break;\n\n    // 2) then resolve charged in CMP order\n    const aReady = canThrow(A);\n    const bReady = canThrow(B);\n    if (aReady || bReady) {\n      const aFirst = aReady && (!bReady || A.Atk >= B.Atk);\n      if (aFirst) {\n        doThrow(A, B, \"A\");\n        if (B.HP <= 0) break;\n        if (bReady) {\n          doThrow(B, A, \"B\");\n          if (A.HP <= 0) break;\n        }\n      } else {\n        doThrow(B, A, \"B\");\n        if (A.HP <= 0) break;\n        if (aReady) {\n          doThrow(A, B, \"A\");\n          if (B.HP <= 0) break;\n        }\n      }\n    }\n  }\n  const winner = A.HP <= 0 && B.HP <= 0 ? \"Draw\" : A.HP <= 0 ? B.name : B.HP <= 0 ? A.name : A.HP === B.HP ? \"Draw\" : A.HP > B.HP ? A.name : B.name;\n  return {\n    winner,\n    aHP: Math.round(A.HP / A.MaxHP * 100),\n    bHP: Math.round(B.HP / B.MaxHP * 100),\n    aRecommended: recA,\n    bRecommended: recB,\n    summary: log.slice(0, 12)\n  };\n}\n\n/* --------------------- Timing helpers for Quick Matrix --------------------- */\nexport function getMoveDetails(id) {\n  if (!id) return null;\n  const key = canonMoveId(id);\n  return MOVES[key] || null;\n}\nexport function secondsToFirstCharged(fastId, chargedId) {\n  const f = getMoveDetails(fastId);\n  const c = getMoveDetails(chargedId);\n  if (!f || !c || f.kind !== \"fast\" || c.kind !== \"charged\") return null;\n  const fastsNeeded = Math.ceil((c.energyCost || 45) / Math.max(1, f.energyGain || 8));\n  const turns = fastsNeeded * (f.turns || 1);\n  // PvP turn is 0.5s\n  return Number((turns * 0.5).toFixed(1));\n}\nexport function fastsToFirstCharged(fastId, chargedId) {\n  const f = getMoveDetails(fastId);\n  const c = getMoveDetails(chargedId);\n  if (!f || !c || f.kind !== \"fast\" || c.kind !== \"charged\") return null;\n  return Math.ceil((c.energyCost || 45) / Math.max(1, f.energyGain || 8));\n}\n\n/* --------------------- Best-of-three wrapper --------------------- */\nexport function bestOfThree(mine, enemy, myShields, foeShields, _book = MOVES, leagueName = \"Master League\") {\n  const fights = mine.map(m => {\n    const you = {\n      ...m,\n      name: m.name || m.speciesId\n    };\n    const foe = {\n      ...enemy,\n      name: enemy.name || enemy.speciesId\n    };\n    const r = simulateDuel(you, foe, myShields, foeShields, MOVES, leagueName);\n    const score = r.winner === you.name ? 1 : r.winner === \"Draw\" ? 0 : -1;\n    return {\n      you: you.name,\n      vs: foe.name,\n      ...r,\n      score\n    };\n  });\n  fights.sort((a, b) => b.score - a.score || b.aHP - a.aHP || b.bHP - a.bHP);\n  return {\n    best: fights[0],\n    fights\n  };\n}\nvar _c;\n$RefreshReg$(_c, \"S\");","map":{"version":3,"names":["SPECIES","MOVES","num","v","d","Number","isFinite","canonMoveId","s","String","trim","replace","toUpperCase","normId","toLowerCase","tcase","charAt","slice","normType","raw","T","TYPES","includes","capLeague","league","_map$league","map","Infinity","CPM","fillCPM","t","length","fill","i","cp","a","c","Math","floor","sqrt","levelForCap","baseAtk","baseDef","baseSta","cap","best","EFF","forEach","S","atk","arr","m","_c","STAB","eff","multType","defTypes","_EFF$multType$t","_EFF$multType","dmg","power","def","stab","effm","max","buildSpeciesBook","gm","_gm$data","lists","pokemon","data","species","pokemonList","pokemonSettings","filter","Boolean","out","L","p","_ref","_ref2","_p$baseAttack","_ref3","_ref4","_p$baseDefense","_ref5","_ref6","_p$baseStamina","id","speciesId","pokemonId","templateId","name","bs","baseStats","stats","baseAttack","attack","baseDefense","defense","sta","baseStamina","stamina","typesArr","types","type1","type2","buildMoveBook","_gm$data2","_gm$data3","pools","moves","combatMoves","moveList","list","_ref7","_ref8","_ref9","_ref0","_m$moveId","_ref1","_ref10","_m$pvpPower","_ref11","_m$durationTurns","rawId","moveId","uniqueId","type","pokemonType","moveType","pvpPower","combatPower","damage","kind","energyGain","energyCost","turns","energyDelta","ed","abs","energy","durationTurns","cooldownTurns","mv","TACKLE","GENERIC_CHARGED","GENERIC_CHARGED2","buildFighter","src","leagueName","sid","base","lvl","cpm","Atk","Def","HP","fast","fastMove","chargedMoves","push","MaxHP","cooldown","MOVE_RECS","dragonite","dialga","dialga_origin","garchomp","kyurem","palkia","reshiram","zekrom","groudon","kyogre","ho_oh","mewtwo","metagross","melmetal","rhyperior","excadrill","landorus_therian","togekiss","yveltal","xerneas","hydreigon","zacian_crowned_sword","zamazenta_crowned_shield","primarina","recommendMovesFor","_speciesId","baseEntry","_baseEntry$chargedMov","rec","bestCharged","att","bestVal","mult","val","shouldShield","attacker","defender","incomingMove","shieldsLeft","hit","threshold","simulateDuel","attackerIn","defenderIn","shieldsA","shieldsB","_book","_bestCharged","_bestCharged2","_A$fast","_B$fast","A","B","recA","recB","aSh","bSh","MAX_TURNS","log","progressFast","user","foe","min","canThrow","u","some","chooseThrow","pick","doThrow","who","_attacker$fast","move","shielded","aReady","bReady","aFirst","winner","aHP","round","bHP","aRecommended","bRecommended","summary","getMoveDetails","key","secondsToFirstCharged","fastId","chargedId","f","fastsNeeded","ceil","toFixed","fastsToFirstCharged","bestOfThree","mine","enemy","myShields","foeShields","fights","you","r","score","vs","sort","b","$RefreshReg$"],"sources":["C:/Users/ben/Projects/nebsojipvptrainer/src/battleCalc.js"],"sourcesContent":["// PvP lite sim with fixed turn-order (fast first, then charged by CMP),\r\n// corrected shield decision (estimate using ATTACKER stats), and\r\n// full exports used by App.js: buildMoveBook, recommendMovesFor, bestOfThree, simulateDuel.\r\n\r\n/* --------------------- Books --------------------- */\r\nlet SPECIES = {}; // speciesId -> { atk, def, sta, types: [...] }\r\nlet MOVES = {};   // MOVE_ID   -> { id, kind: \"fast\"|\"charged\", type, power, energyGain, energyCost, turns }\r\n\r\n/* --------------------- Utils --------------------- */\r\nconst num = (v, d = 0) => (Number.isFinite(Number(v)) ? Number(v) : d);\r\n\r\nfunction canonMoveId(s) {\r\n    if (!s) return \"\";\r\n    return String(s)\r\n        .trim()\r\n        .replace(/^COMBAT_V\\d+_MOVE_/i, \"\")\r\n        .replace(/^V\\d+_/i, \"\")\r\n        .replace(/[^A-Za-z0-9]+/g, \"_\")\r\n        .replace(/_+/g, \"_\")\r\n        .replace(/^_|_$/g, \"\")\r\n        .toUpperCase();\r\n}\r\nfunction normId(s) {\r\n    return String(s || \"\").toLowerCase().replace(/[^\\w]+/g, \"_\").replace(/^_+|_+$/g, \"\");\r\n}\r\nfunction tcase(s) { return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase(); }\r\nfunction normType(s) {\r\n    if (!s) return null;\r\n    const raw = String(s).replace(/^POKEMON_TYPE_/, \"\").replace(/_/g, \" \").trim().toLowerCase();\r\n    const T = tcase(raw);\r\n    return TYPES.includes(T) ? T : null;\r\n}\r\nfunction capLeague(league) {\r\n    const map = { \"Great League\": 1500, \"Ultra League\": 2500, \"Master League\": Infinity };\r\n    return typeof league === \"string\" ? (map[league] ?? Infinity) : (Number.isFinite(league) ? Number(league) : Infinity);\r\n}\r\n\r\n/* --------------------- CPM & Level --------------------- */\r\nconst CPM = [];\r\n(function fillCPM() {\r\n    const t = [\r\n        0.094, 0.135137432, 0.16639787, 0.192650919, 0.21573247, 0.236572661, 0.25572005, 0.273530381,\r\n        0.29024988, 0.306057377, 0.3210876, 0.335445036, 0.34921268, 0.362457751, 0.37523559, 0.387592406,\r\n        0.39956728, 0.411193551, 0.42250001, 0.432926419, 0.44310755, 0.4530599578, 0.46279839, 0.472336083,\r\n        0.48168495, 0.4908558, 0.49985844, 0.508701765, 0.51739395, 0.525942511, 0.53435433, 0.542635767,\r\n        0.55079269, 0.558830576, 0.56675452, 0.574569153, 0.58227891, 0.589887907, 0.59740001, 0.604818814,\r\n        0.61215729, 0.619399365, 0.62656713, 0.633644533, 0.64065295, 0.647576426, 0.65443563, 0.661214806,\r\n        0.667934, 0.674577537, 0.68116492, 0.687680648, 0.69414365, 0.700538673, 0.70688421, 0.713164996,\r\n        0.71939909, 0.725571552, 0.7317, 0.734741009, 0.73776948, 0.740785574, 0.74378943, 0.746781211,\r\n        0.74976104, 0.752729087, 0.75568551, 0.758630378, 0.76156384, 0.764486065, 0.76739717, 0.770297266,\r\n        0.7731865, 0.776064962, 0.77893275, 0.781790055, 0.78463697, 0.787473578, 0.79030001, 0.792803968,\r\n        0.79530001, 0.797803921, 0.8003\r\n    ];\r\n    CPM.length = 100; CPM.fill(0);\r\n    for (let i = 0; i < t.length; i++) CPM[i + 1] = t[i];\r\n})();\r\nfunction cp(a, d, s, c) { return Math.floor((a * Math.sqrt(d) * Math.sqrt(s) * c * c) / 10); }\r\nfunction levelForCap(baseAtk, baseDef, baseSta, cap) {\r\n    if (!isFinite(cap)) return 99;\r\n    let best = 1;\r\n    for (let i = 1; i < CPM.length; i++) {\r\n        const c = CPM[i]; if (!c) continue;\r\n        if (cp(baseAtk * c, baseDef * c, baseSta * c, 1) <= cap) best = i;\r\n    }\r\n    return best;\r\n}\r\n\r\n/* --------------------- Types & Damage --------------------- */\r\nconst TYPES = [\r\n    \"Normal\", \"Fighting\", \"Flying\", \"Poison\", \"Ground\", \"Rock\", \"Bug\", \"Ghost\", \"Steel\",\r\n    \"Fire\", \"Water\", \"Grass\", \"Electric\", \"Psychic\", \"Ice\", \"Dragon\", \"Dark\", \"Fairy\"\r\n];\r\nconst EFF = {};\r\nTYPES.forEach(a => { EFF[a] = {}; TYPES.forEach(d => EFF[a][d] = 1); });\r\nfunction S(atk, arr, m) { arr.forEach(d => EFF[atk][d] = m); }\r\nS(\"Fighting\", [\"Normal\", \"Rock\", \"Ice\", \"Dark\", \"Steel\"], 1.6); S(\"Fighting\", [\"Flying\", \"Poison\", \"Bug\", \"Psychic\", \"Fairy\"], 0.625);\r\nS(\"Flying\", [\"Fighting\", \"Bug\", \"Grass\"], 1.6); S(\"Flying\", [\"Rock\", \"Steel\", \"Electric\"], 0.625);\r\nS(\"Poison\", [\"Grass\", \"Fairy\"], 1.6); S(\"Poison\", [\"Poison\", \"Ground\", \"Rock\", \"Ghost\"], 0.625); S(\"Poison\", [\"Steel\"], 0.390625);\r\nS(\"Ground\", [\"Poison\", \"Rock\", \"Steel\", \"Fire\", \"Electric\"], 1.6); S(\"Ground\", [\"Bug\", \"Grass\"], 0.625); S(\"Ground\", [\"Flying\"], 0.390625);\r\nS(\"Rock\", [\"Flying\", \"Bug\", \"Fire\", \"Ice\"], 1.6); S(\"Rock\", [\"Fighting\", \"Ground\", \"Steel\"], 0.625);\r\nS(\"Bug\", [\"Grass\", \"Psychic\", \"Dark\"], 1.6); S(\"Bug\", [\"Fighting\", \"Flying\", \"Poison\", \"Ghost\", \"Steel\", \"Fire\", \"Fairy\"], 0.625);\r\nS(\"Ghost\", [\"Ghost\", \"Psychic\"], 1.6); S(\"Ghost\", [\"Dark\"], 0.625);\r\nS(\"Steel\", [\"Rock\", \"Ice\", \"Fairy\"], 1.6); S(\"Steel\", [\"Steel\", \"Fire\", \"Water\", \"Electric\"], 0.625);\r\nS(\"Fire\", [\"Bug\", \"Steel\", \"Grass\", \"Ice\"], 1.6); S(\"Fire\", [\"Rock\", \"Fire\", \"Water\", \"Dragon\"], 0.625);\r\nS(\"Water\", [\"Ground\", \"Rock\", \"Fire\"], 1.6); S(\"Water\", [\"Water\", \"Grass\", \"Dragon\"], 0.625);\r\nS(\"Grass\", [\"Ground\", \"Rock\", \"Water\"], 1.6); S(\"Grass\", [\"Flying\", \"Poison\", \"Bug\", \"Steel\", \"Fire\", \"Grass\", \"Dragon\"], 0.625);\r\nS(\"Electric\", [\"Flying\", \"Water\"], 1.6); S(\"Electric\", [\"Grass\", \"Electric\", \"Dragon\"], 0.625); S(\"Electric\", [\"Ground\"], 0.390625);\r\nS(\"Psychic\", [\"Fighting\", \"Poison\"], 1.6); S(\"Psychic\", [\"Psychic\", \"Steel\"], 0.625); S(\"Psychic\", [\"Dark\"], 0.390625);\r\nS(\"Ice\", [\"Flying\", \"Ground\", \"Grass\", \"Dragon\"], 1.6); S(\"Ice\", [\"Steel\", \"Fire\", \"Water\", \"Ice\"], 0.625);\r\nS(\"Dragon\", [\"Dragon\"], 1.6); S(\"Dragon\", [\"Steel\"], 0.625); S(\"Dragon\", [\"Fairy\"], 0.390625);\r\nS(\"Dark\", [\"Ghost\", \"Psychic\"], 1.6); S(\"Dark\", [\"Fighting\", \"Dark\", \"Fairy\"], 0.625);\r\nS(\"Fairy\", [\"Fighting\", \"Dragon\", \"Dark\"], 1.6); S(\"Fairy\", [\"Poison\", \"Steel\", \"Fire\"], 0.625);\r\n\r\nconst STAB = 1.2;\r\nfunction eff(multType, defTypes) { let m = 1; for (const t of defTypes) { m *= (EFF[multType]?.[t] ?? 1); } return m; }\r\nfunction dmg(power, atk, def, stab, effm) {\r\n    const raw = 0.5 * num(power, 0) * (num(atk, 1) / Math.max(1, num(def, 1))) * (stab || 1) * (effm || 1);\r\n    return Math.max(1, Math.floor(raw) + 1);\r\n}\r\n\r\n/* --------------------- Build books from GM --------------------- */\r\nfunction buildSpeciesBook(gm) {\r\n    const lists = [gm?.pokemon, gm?.data?.pokemon, gm?.species, gm?.pokemonList, gm?.pokemonSettings].filter(Boolean);\r\n    const out = {};\r\n    for (const L of lists) {\r\n        for (const p of L) {\r\n            const id = normId(p.speciesId || p.pokemonId || p.templateId || p.id || p.name);\r\n            if (!id) continue;\r\n            const bs = p.baseStats || p.stats || {};\r\n            const atk = num(p.baseAttack ?? bs.atk ?? bs.attack ?? p.attack, 200);\r\n            const def = num(p.baseDefense ?? bs.def ?? bs.defense ?? p.defense, 200);\r\n            const sta = num(p.baseStamina ?? bs.sta ?? bs.stamina ?? p.stamina, 200);\r\n            const typesArr = p.types || [p.type1, p.type2].filter(Boolean);\r\n            const types = (typesArr || []).map(normType).filter(Boolean);\r\n            out[id] = { atk, def, sta, types: types.length ? types : [\"Normal\"] };\r\n        }\r\n    }\r\n    return out;\r\n}\r\n\r\nexport function buildMoveBook(gm) {\r\n    SPECIES = buildSpeciesBook(gm);\r\n    const pools = [gm?.moves, gm?.combatMoves, gm?.data?.moves, gm?.data?.combatMoves, gm?.moveList].filter(Boolean);\r\n    const out = {};\r\n\r\n    for (const list of pools) {\r\n        for (const m of list) {\r\n            const rawId = m.moveId ?? m.id ?? m.uniqueId ?? m.templateId ?? m.name ?? \"\";\r\n            const id = canonMoveId(rawId);\r\n            if (!id) continue;\r\n            const type = normType(m.type || m.pokemonType || m.moveType) || \"Normal\";\r\n            const power = num(m.pvpPower ?? m.power ?? m.combatPower ?? m.damage, 3);\r\n            let kind = \"fast\", energyGain = 0, energyCost = 0, turns = 1;\r\n\r\n            if (m.energyDelta != null) {\r\n                const ed = num(m.energyDelta, 0);\r\n                if (ed > 0) { kind = \"fast\"; energyGain = ed; }\r\n                if (ed < 0) { kind = \"charged\"; energyCost = Math.abs(ed); }\r\n            }\r\n            if (m.energyGain != null) { kind = \"fast\"; energyGain = num(m.energyGain, 0); }\r\n            if (m.energy != null) { kind = \"charged\"; energyCost = Math.abs(num(m.energy, 0)); }\r\n            turns = num(m.durationTurns ?? m.turns ?? m.cooldownTurns, kind === \"fast\" ? 1 : 0);\r\n            if (kind === \"fast\") turns = Math.max(1, Math.floor(turns) || 1);\r\n\r\n            if (kind === \"fast\" && energyGain <= 0) { energyGain = 8; }\r\n            if (kind === \"charged\" && energyCost <= 0) { energyCost = 45; }\r\n\r\n            const mv = { id, kind, type, power, energyGain, energyCost, turns };\r\n            if (!out[id] || power > out[id].power) out[id] = mv;\r\n        }\r\n    }\r\n\r\n    // Fallback fast & generic charged\r\n    out.TACKLE = out.TACKLE || { id: \"TACKLE\", kind: \"fast\", type: \"Normal\", power: 3, energyGain: 8, energyCost: 0, turns: 1 };\r\n    out.GENERIC_CHARGED = { id: \"GENERIC_CHARGED\", kind: \"charged\", type: \"Normal\", power: 70, energyCost: 45 };\r\n    out.GENERIC_CHARGED2 = { id: \"GENERIC_CHARGED2\", kind: \"charged\", type: \"Normal\", power: 90, energyCost: 55 };\r\n\r\n    MOVES = out;\r\n    return out;\r\n}\r\n\r\n/* --------------------- Fighters --------------------- */\r\nfunction buildFighter(src, leagueName) {\r\n    const cap = capLeague(leagueName);\r\n    const sid = normId(src.speciesId || src.name);\r\n    const base = SPECIES[sid] || { atk: 200, def: 200, sta: 200, types: [\"Normal\"] };\r\n\r\n    const lvl = levelForCap(base.atk, base.def, base.sta, cap);\r\n    const cpm = CPM[lvl] || CPM[99];\r\n\r\n    const Atk = base.atk * cpm;\r\n    const Def = base.def * cpm;\r\n    const HP = Math.max(1, Math.floor(base.sta * cpm));\r\n\r\n    const fast = MOVES[canonMoveId(src.fastMove)] || MOVES.TACKLE;\r\n    const chargedMoves = (src.chargedMoves || [])\r\n        .map(canonMoveId)\r\n        .map(id => MOVES[id])\r\n        .filter(Boolean);\r\n    if (chargedMoves.length === 0) {\r\n        chargedMoves.push(MOVES.GENERIC_CHARGED, MOVES.GENERIC_CHARGED2);\r\n    }\r\n\r\n    return {\r\n        name: src.name || src.speciesId,\r\n        speciesId: sid,\r\n        types: base.types,\r\n        Atk, Def, MaxHP: HP, HP,\r\n        fast, chargedMoves,\r\n        energy: 0,\r\n        cooldown: 0\r\n    };\r\n}\r\n\r\n/* --------------------- Master move recommendations (editable) --------------------- */\r\n/*  Keys are normalized species ids (normId). Only used when league entry lacks moves.\r\n    These can be tuned to your meta or corrected as you like.  */\r\nconst MOVE_RECS = {\r\n    // Dragons / legendaries\r\n    dragonite: { fastMove: \"DRAGON_BREATH\", chargedMoves: [\"DRAGON_CLAW\", \"SUPERPOWER\"] },\r\n    dialga: { fastMove: \"DRAGON_BREATH\", chargedMoves: [\"IRON_HEAD\", \"DRACO_METEOR\"] },\r\n    dialga_origin: { fastMove: \"DRAGON_BREATH\", chargedMoves: [\"ROAR_OF_TIME\", \"IRON_HEAD\"] },\r\n    garchomp: { fastMove: \"MUD_SHOT\", chargedMoves: [\"EARTH_POWER\", \"OUTRAGE\"] },\r\n    kyurem: { fastMove: \"DRAGON_BREATH\", chargedMoves: [\"GLACIATE\", \"DRAGON_CLAW\"] },\r\n    palkia: { fastMove: \"DRAGON_BREATH\", chargedMoves: [\"AQUA_TAIL\", \"DRACO_METEOR\"] },\r\n    reshiram: { fastMove: \"DRAGON_BREATH\", chargedMoves: [\"FUSION_FLARE\", \"DRACO_METEOR\"] },\r\n    zekrom: { fastMove: \"DRAGON_BREATH\", chargedMoves: [\"FUSION_BOLT\", \"CRUNCH\"] },\r\n\r\n    // Primals / heavy hitters\r\n    groudon: { fastMove: \"MUD_SHOT\", chargedMoves: [\"PRECIPICE_BLADES\", \"FIRE_PUNCH\"] },\r\n    kyogre: { fastMove: \"WATERFALL\", chargedMoves: [\"SURF\", \"THUNDER\"] },\r\n    ho_oh: { fastMove: \"INCINERATE\", chargedMoves: [\"SACRED_FIRE\", \"BRAVE_BIRD\"] },\r\n    mewtwo: { fastMove: \"PSYCHO_CUT\", chargedMoves: [\"PSYSTRIKE\", \"SHADOW_BALL\"] },\r\n\r\n    // Steel / ground cores\r\n    metagross: { fastMove: \"BULLET_PUNCH\", chargedMoves: [\"METEOR_MASH\", \"EARTHQUAKE\"] },\r\n    melmetal: { fastMove: \"THUNDER_SHOCK\", chargedMoves: [\"DOUBLE_IRON_BASH\", \"ROCK_SLIDE\"] },\r\n    rhyperior: { fastMove: \"SMACK_DOWN\", chargedMoves: [\"ROCK_WRECKER\", \"SURF\"] },\r\n    excadrill: { fastMove: \"MUD_SHOT\", chargedMoves: [\"DRILL_RUN\", \"ROCK_SLIDE\"] },\r\n    landorus_therian: { fastMove: \"MUD_SHOT\", chargedMoves: [\"STONE_EDGE\", \"EARTHQUAKE\"] },\r\n\r\n    // Fairies / darks (note: Crowned forms here use steel-centric kit per your note)\r\n    togekiss: { fastMove: \"CHARM\", chargedMoves: [\"ANCIENT_POWER\", \"FLAMETHROWER\"] },\r\n    yveltal: { fastMove: \"SNARL\", chargedMoves: [\"OBLIVION_WING\", \"DARK_PULSE\"] },\r\n    xerneas: { fastMove: \"GEOMANCY\", chargedMoves: [\"MOONBLAST\", \"THUNDER\"] },\r\n    hydreigon: { fastMove: \"DRAGON_BREATH\", chargedMoves: [\"BRUTAL_SWING\", \"DRAGON_PULSE\"] },\r\n\r\n    // Crowned forms (adjusted away from Snarl/fairy as requested)\r\n    zacian_crowned_sword: { fastMove: \"METAL_CLAW\", chargedMoves: [\"CLOSE_COMBAT\", \"IRON_HEAD\"] },\r\n    zamazenta_crowned_shield: { fastMove: \"METAL_CLAW\", chargedMoves: [\"CLOSE_COMBAT\", \"IRON_HEAD\"] },\r\n\r\n    // Others seen in ML\r\n    primarina: { fastMove: \"CHARM\", chargedMoves: [\"MOONBLAST\", \"HYDRO_PUMP\"] },\r\n};\r\n\r\n/* --------------------- Helpers used by App --------------------- */\r\n// If league list already supplies moves, leave it alone. Otherwise use MOVE_RECS; else safe fallbacks.\r\nexport function recommendMovesFor(_speciesId, baseEntry) {\r\n    if (baseEntry?.fastMove || (baseEntry?.chargedMoves?.length)) return {};\r\n    const sid = normId(_speciesId || baseEntry?.speciesId);\r\n    const rec = MOVE_RECS[sid];\r\n    if (rec) return rec;\r\n    return { fastMove: \"TACKLE\", chargedMoves: [\"GENERIC_CHARGED\", \"GENERIC_CHARGED2\"] };\r\n}\r\n\r\nfunction bestCharged(att, def) {\r\n    let best = null, bestVal = -Infinity;\r\n    for (const m of (att.chargedMoves || [])) {\r\n        if (!m || m.kind !== \"charged\") continue;\r\n        const stab = att.types.includes(m.type) ? STAB : 1;\r\n        const mult = eff(m.type, def.types);\r\n        const val = dmg(m.power, att.Atk, def.Def, stab, mult);\r\n        if (val > bestVal) { bestVal = val; best = m; }\r\n    }\r\n    return best;\r\n}\r\n\r\n/* --------------------- Duel (fixed turn order + shields) --------------------- */\r\nfunction shouldShield(attacker, defender, incomingMove, shieldsLeft) {\r\n    if (shieldsLeft <= 0) return false;\r\n    const stab = attacker.types.includes(incomingMove.type) ? STAB : 1;\r\n    const mult = eff(incomingMove.type, defender.types);\r\n    const hit = dmg(incomingMove.power, attacker.Atk, defender.Def, stab, mult);\r\n    const threshold = shieldsLeft === 2 ? 0.32 : 0.45;\r\n    return hit >= defender.HP || hit >= defender.MaxHP * threshold;\r\n}\r\n\r\nexport function simulateDuel(attackerIn, defenderIn, shieldsA = 2, shieldsB = 2, _book = MOVES, leagueName = \"Master League\") {\r\n    const A = buildFighter(attackerIn, leagueName);\r\n    const B = buildFighter(defenderIn, leagueName);\r\n\r\n    const recA = bestCharged(A, B)?.id || null;\r\n    const recB = bestCharged(B, A)?.id || null;\r\n\r\n    let aSh = Math.max(0, shieldsA | 0), bSh = Math.max(0, shieldsB | 0);\r\n    let t = 0; const MAX_TURNS = 2000; const log = [];\r\n\r\n    function progressFast(user, foe) {\r\n        if (!user.fast) return;\r\n        user.cooldown--;\r\n        if (user.cooldown <= 0) {\r\n            const stab = user.types.includes(user.fast.type) ? STAB : 1;\r\n            const mult = eff(user.fast.type, foe.types);\r\n            const hit = dmg(user.fast.power, user.Atk, foe.Def, stab, mult);\r\n            foe.HP = Math.max(0, foe.HP - hit);\r\n            user.energy = Math.min(100, user.energy + (user.fast.energyGain || 0));\r\n            user.cooldown = user.fast.turns || 1;\r\n        }\r\n    }\r\n\r\n    function canThrow(u) { return (u.chargedMoves || []).some(m => u.energy >= (m.energyCost || 45)); }\r\n    function chooseThrow(u, foe) {\r\n        let pick = null, best = -Infinity;\r\n        for (const m of (u.chargedMoves || [])) {\r\n            if (u.energy < (m.energyCost || 45)) continue;\r\n            const stab = u.types.includes(m.type) ? STAB : 1;\r\n            const mult = eff(m.type, foe.types);\r\n            const val = dmg(m.power, u.Atk, foe.Def, stab, mult);\r\n            if (val > best) { best = val; pick = m; }\r\n        }\r\n        return pick;\r\n    }\r\n\r\n    function doThrow(attacker, defender, who) {\r\n        const move = chooseThrow(attacker, defender);\r\n        if (!move) return;\r\n        let shielded = false;\r\n        if (who === \"A\" ? shouldShield(attacker, defender, move, bSh)\r\n            : shouldShield(attacker, defender, move, aSh)) {\r\n            if (who === \"A\") bSh--; else aSh--;\r\n            shielded = true;\r\n        } else {\r\n            const stab = attacker.types.includes(move.type) ? STAB : 1;\r\n            const mult = eff(move.type, defender.types);\r\n            const hit = dmg(move.power, attacker.Atk, defender.Def, stab, mult);\r\n            defender.HP = Math.max(0, defender.HP - hit);\r\n        }\r\n        attacker.energy -= (move.energyCost || 45);\r\n        attacker.cooldown = attacker.fast?.turns || 1;\r\n        log.push(`${who} throws ${move.id}${shielded ? \" (shielded)\" : \"\"}`);\r\n    }\r\n\r\n    A.cooldown = A.fast?.turns || 1;\r\n    B.cooldown = B.fast?.turns || 1;\r\n\r\n    while (A.HP > 0 && B.HP > 0 && t < MAX_TURNS) {\r\n        t++;\r\n\r\n        // 1) both sides advance fast first\r\n        progressFast(A, B);\r\n        if (B.HP <= 0) break;\r\n        progressFast(B, A);\r\n        if (A.HP <= 0) break;\r\n\r\n        // 2) then resolve charged in CMP order\r\n        const aReady = canThrow(A);\r\n        const bReady = canThrow(B);\r\n        if (aReady || bReady) {\r\n            const aFirst = aReady && (!bReady || (A.Atk >= B.Atk));\r\n            if (aFirst) {\r\n                doThrow(A, B, \"A\");\r\n                if (B.HP <= 0) break;\r\n                if (bReady) { doThrow(B, A, \"B\"); if (A.HP <= 0) break; }\r\n            } else {\r\n                doThrow(B, A, \"B\");\r\n                if (A.HP <= 0) break;\r\n                if (aReady) { doThrow(A, B, \"A\"); if (B.HP <= 0) break; }\r\n            }\r\n        }\r\n    }\r\n\r\n    const winner =\r\n        A.HP <= 0 && B.HP <= 0 ? \"Draw\" :\r\n            A.HP <= 0 ? B.name :\r\n                B.HP <= 0 ? A.name :\r\n                    (A.HP === B.HP ? \"Draw\" : (A.HP > B.HP ? A.name : B.name));\r\n\r\n    return {\r\n        winner,\r\n        aHP: Math.round((A.HP / A.MaxHP) * 100),\r\n        bHP: Math.round((B.HP / B.MaxHP) * 100),\r\n        aRecommended: recA,\r\n        bRecommended: recB,\r\n        summary: log.slice(0, 12)\r\n    };\r\n}\r\n\r\n/* --------------------- Timing helpers for Quick Matrix --------------------- */\r\nexport function getMoveDetails(id) {\r\n    if (!id) return null;\r\n    const key = canonMoveId(id);\r\n    return MOVES[key] || null;\r\n}\r\nexport function secondsToFirstCharged(fastId, chargedId) {\r\n    const f = getMoveDetails(fastId);\r\n    const c = getMoveDetails(chargedId);\r\n    if (!f || !c || f.kind !== \"fast\" || c.kind !== \"charged\") return null;\r\n    const fastsNeeded = Math.ceil((c.energyCost || 45) / Math.max(1, f.energyGain || 8));\r\n    const turns = fastsNeeded * (f.turns || 1);\r\n    // PvP turn is 0.5s\r\n    return Number((turns * 0.5).toFixed(1));\r\n}\r\nexport function fastsToFirstCharged(fastId, chargedId) {\r\n    const f = getMoveDetails(fastId);\r\n    const c = getMoveDetails(chargedId);\r\n    if (!f || !c || f.kind !== \"fast\" || c.kind !== \"charged\") return null;\r\n    return Math.ceil((c.energyCost || 45) / Math.max(1, f.energyGain || 8));\r\n}\r\n\r\n/* --------------------- Best-of-three wrapper --------------------- */\r\nexport function bestOfThree(mine, enemy, myShields, foeShields, _book = MOVES, leagueName = \"Master League\") {\r\n    const fights = mine.map(m => {\r\n        const you = { ...m, name: m.name || m.speciesId };\r\n        const foe = { ...enemy, name: enemy.name || enemy.speciesId };\r\n        const r = simulateDuel(you, foe, myShields, foeShields, MOVES, leagueName);\r\n        const score = r.winner === you.name ? 1 : (r.winner === \"Draw\" ? 0 : -1);\r\n        return { you: you.name, vs: foe.name, ...r, score };\r\n    });\r\n    fights.sort((a, b) => (b.score - a.score) || (b.aHP - a.aHP) || (b.bHP - a.bHP));\r\n    return { best: fights[0], fights };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}