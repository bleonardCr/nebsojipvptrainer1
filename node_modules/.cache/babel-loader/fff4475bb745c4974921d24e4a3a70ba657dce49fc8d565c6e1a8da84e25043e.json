{"ast":null,"code":"// src/battleCalc.js\n// Thin adapter your App uses. It calls the battle engine and returns the shape App expects.\n\nimport { simulateBattle } from \"./engine/battleEngine\";\nlet SPECIES = {};\nlet MOVES = {};\n\n// ---- tiny helpers kept for bootstrap compatibility ----\nconst num = (v, d = 0) => Number.isFinite(Number(v)) ? Number(v) : d;\nconst canonMoveId = s => String(s || \"\").trim().replace(/^COMBAT_V\\d+_MOVE_/i, \"\").replace(/^V\\d+_/i, \"\").replace(/[^A-Za-z0-9]+/g, \"_\").replace(/_+/g, \"_\").replace(/^_|_$/g, \"\").toUpperCase();\nconst normId = s => String(s || \"\").toLowerCase().replace(/[^\\w]+/g, \"_\").replace(/^_+|_+$/g, \"\");\nfunction capLeague(league) {\n  var _map$league;\n  const map = {\n    \"Great League\": 1500,\n    \"Ultra League\": 2500,\n    \"Master League\": Infinity\n  };\n  return typeof league === \"string\" ? (_map$league = map[league]) !== null && _map$league !== void 0 ? _map$league : Infinity : Number.isFinite(league) ? Number(league) : Infinity;\n}\n\n// CPM helpers\nconst CPM = [];\n(function fillCPM() {\n  const table = [0.094, 0.135137432, 0.16639787, 0.192650919, 0.21573247, 0.236572661, 0.25572005, 0.273530381, 0.29024988, 0.306057377, 0.3210876, 0.335445036, 0.34921268, 0.362457751, 0.37523559, 0.387592406, 0.39956728, 0.411193551, 0.42250001, 0.432926419, 0.44310755, 0.4530599578, 0.46279839, 0.472336083, 0.48168495, 0.4908558, 0.49985844, 0.508701765, 0.51739395, 0.525942511, 0.53435433, 0.542635767, 0.55079269, 0.558830576, 0.56675452, 0.574569153, 0.58227891, 0.589887907, 0.59740001, 0.604818814, 0.61215729, 0.619399365, 0.62656713, 0.633644533, 0.64065295, 0.647576426, 0.65443563, 0.661214806, 0.667934, 0.674577537, 0.68116492, 0.687680648, 0.69414365, 0.700538673, 0.70688421, 0.713164996, 0.71939909, 0.725571552, 0.7317, 0.734741009, 0.73776948, 0.740785574, 0.74378943, 0.746781211, 0.74976104, 0.752729087, 0.75568551, 0.758630378, 0.76156384, 0.764486065, 0.76739717, 0.770297266, 0.7731865, 0.776064962, 0.77893275, 0.781790055, 0.78463697, 0.787473578, 0.79030001, 0.792803968, 0.79530001, 0.797803921, 0.8003];\n  CPM.length = 100;\n  CPM.fill(0);\n  for (let i = 0; i < table.length; i++) CPM[i + 1] = table[i];\n})();\nfunction cp(a, d, s, c) {\n  return Math.floor(a * Math.sqrt(d) * Math.sqrt(s) * c * c / 10);\n}\nfunction levelForCap(baseAtk, baseDef, baseSta, cap) {\n  if (!isFinite(cap)) return 50;\n  let best = 1;\n  for (let i = 1; i < CPM.length; i++) {\n    const c = CPM[i];\n    if (!c) continue;\n    if (cp(baseAtk * c, baseDef * c, baseSta * c, 1) <= cap) best = i;\n  }\n  return best;\n}\n\n// Build species/moves from gamemaster (used by App bootstrap)\nfunction buildSpeciesBook(gm) {\n  var _gm$data;\n  const lists = [gm === null || gm === void 0 ? void 0 : gm.pokemon, gm === null || gm === void 0 ? void 0 : (_gm$data = gm.data) === null || _gm$data === void 0 ? void 0 : _gm$data.pokemon].filter(Boolean);\n  const out = {};\n  for (const L of lists) {\n    for (const p of L) {\n      var _bs$atk, _bs$def, _ref, _bs$hp;\n      const id = normId(p.speciesId || p.id || p.name);\n      const bs = p.baseStats || p.stats || {};\n      const typesArr = p.types || [p.type1, p.type2].filter(Boolean);\n      const types = (typesArr || []).map(t => String(t).replace(/^POKEMON_TYPE_/, \"\").toLowerCase());\n      out[id] = {\n        atk: num((_bs$atk = bs.atk) !== null && _bs$atk !== void 0 ? _bs$atk : bs.attack, 200),\n        def: num((_bs$def = bs.def) !== null && _bs$def !== void 0 ? _bs$def : bs.defense, 200),\n        sta: num((_ref = (_bs$hp = bs.hp) !== null && _bs$hp !== void 0 ? _bs$hp : bs.sta) !== null && _ref !== void 0 ? _ref : bs.stamina, 200),\n        types: types.length ? types : [\"normal\"]\n      };\n    }\n  }\n  return out;\n}\nexport function buildMoveBook(gm) {\n  var _gm$data2, _gm$data3;\n  SPECIES = buildSpeciesBook(gm);\n  const pools = [gm === null || gm === void 0 ? void 0 : gm.moves, gm === null || gm === void 0 ? void 0 : (_gm$data2 = gm.data) === null || _gm$data2 === void 0 ? void 0 : _gm$data2.moves, gm === null || gm === void 0 ? void 0 : gm.combatMoves, gm === null || gm === void 0 ? void 0 : (_gm$data3 = gm.data) === null || _gm$data3 === void 0 ? void 0 : _gm$data3.combatMoves].filter(Boolean);\n  const out = {};\n  for (const list of pools) {\n    for (const m of list) {\n      var _ref2, _ref3, _ref4, _m$moveId, _ref5, _ref6, _m$pvpPower, _ref7, _m$durationTurns;\n      const id = canonMoveId((_ref2 = (_ref3 = (_ref4 = (_m$moveId = m.moveId) !== null && _m$moveId !== void 0 ? _m$moveId : m.id) !== null && _ref4 !== void 0 ? _ref4 : m.uniqueId) !== null && _ref3 !== void 0 ? _ref3 : m.templateId) !== null && _ref2 !== void 0 ? _ref2 : m.name);\n      if (!id) continue;\n      const type = String(m.type || m.pokemonType || m.moveType || \"Normal\").replace(/^POKEMON_TYPE_/, \"\").toLowerCase();\n      const power = num((_ref5 = (_ref6 = (_m$pvpPower = m.pvpPower) !== null && _m$pvpPower !== void 0 ? _m$pvpPower : m.power) !== null && _ref6 !== void 0 ? _ref6 : m.combatPower) !== null && _ref5 !== void 0 ? _ref5 : m.damage, 3);\n      let kind = \"fast\",\n        energyGain = 0,\n        energyCost = 0,\n        turns = 1;\n      if (m.energyDelta != null) {\n        const ed = num(m.energyDelta, 0);\n        if (ed > 0) {\n          kind = \"fast\";\n          energyGain = ed;\n        }\n        if (ed < 0) {\n          kind = \"charged\";\n          energyCost = Math.abs(ed);\n        }\n      }\n      if (m.energyGain != null) {\n        kind = \"fast\";\n        energyGain = num(m.energyGain, 0);\n      }\n      if (m.energy != null) {\n        kind = \"charged\";\n        energyCost = Math.abs(num(m.energy, 0));\n      }\n      turns = num((_ref7 = (_m$durationTurns = m.durationTurns) !== null && _m$durationTurns !== void 0 ? _m$durationTurns : m.turns) !== null && _ref7 !== void 0 ? _ref7 : m.cooldownTurns, kind === \"fast\" ? 1 : 0);\n      if (kind === \"fast\") turns = Math.max(1, Math.floor(turns) || 1);\n      out[id] = {\n        id,\n        kind,\n        type,\n        power,\n        energyGain,\n        energyCost,\n        turns\n      };\n    }\n  }\n  out.TACKLE ||= {\n    id: \"TACKLE\",\n    kind: \"fast\",\n    type: \"normal\",\n    power: 3,\n    energyGain: 8,\n    energyCost: 0,\n    turns: 1\n  };\n  MOVES = out;\n  return out;\n}\n\n// ---- Adapter â†’ engine ----\nfunction toEngineSide(src, leagueName, shields) {\n  const cap = capLeague(leagueName);\n  const sid = (src === null || src === void 0 ? void 0 : src.speciesId) || (src === null || src === void 0 ? void 0 : src.name) || \"\";\n  const base = SPECIES[normId(sid)] || {\n    atk: 200,\n    def: 200,\n    sta: 200\n  };\n  const level = levelForCap(base.atk, base.def, base.sta, cap);\n  return {\n    speciesId: sid,\n    name: (src === null || src === void 0 ? void 0 : src.name) || (src === null || src === void 0 ? void 0 : src.speciesId) || sid,\n    fastMove: src === null || src === void 0 ? void 0 : src.fastMove,\n    chargedMoves: (src === null || src === void 0 ? void 0 : src.chargedMoves) || [],\n    shields: Math.max(0, shields | 0),\n    level,\n    // pass basic stats/types for the engine\n    base\n  };\n}\nexport function simulateDuel(attackerIn, defenderIn, shieldsA = 2, shieldsB = 2, _bookIgnored, leagueName = \"Master League\") {\n  const p1 = toEngineSide(attackerIn, leagueName, shieldsA);\n  const p2 = toEngineSide(defenderIn, leagueName, shieldsB);\n  const r = simulateBattle(p1, p2, MOVES); // { result, p1:{hp}, p2:{hp}, p1Best, p2Best }\n\n  return {\n    winner: r.result === \"draw\" ? \"Draw\" : r.result === \"p1\" ? attackerIn.name || attackerIn.speciesId : r.result === \"p2\" ? defenderIn.name || defenderIn.speciesId : \"Draw\",\n    aHP: r.p1.hp,\n    bHP: r.p2.hp,\n    aRecommended: r.p1Best || attackerIn.chargedMoves && attackerIn.chargedMoves[0] || null,\n    bRecommended: r.p2Best || defenderIn.chargedMoves && defenderIn.chargedMoves[0] || null,\n    summary: []\n  };\n}\nexport function bestOfThree(mine, enemy, myShields, foeShields, _bookIgnored, leagueName = \"Master League\") {\n  const fights = mine.map(m => {\n    const you = {\n      ...m,\n      name: m.name || m.speciesId\n    };\n    const foe = {\n      ...enemy,\n      name: enemy.name || enemy.speciesId\n    };\n    const r = simulateDuel(you, foe, myShields, foeShields, null, leagueName);\n    const score = r.winner === you.name ? 1 : r.winner === \"Draw\" ? 0 : -1;\n    return {\n      you: you.name,\n      vs: foe.name,\n      ...r,\n      score\n    };\n  });\n  fights.sort((a, b) => b.score - a.score || b.aHP - a.aHP || b.bHP - a.bHP);\n  return {\n    best: fights[0],\n    fights\n  };\n}","map":{"version":3,"names":["simulateBattle","SPECIES","MOVES","num","v","d","Number","isFinite","canonMoveId","s","String","trim","replace","toUpperCase","normId","toLowerCase","capLeague","league","_map$league","map","Infinity","CPM","fillCPM","table","length","fill","i","cp","a","c","Math","floor","sqrt","levelForCap","baseAtk","baseDef","baseSta","cap","best","buildSpeciesBook","gm","_gm$data","lists","pokemon","data","filter","Boolean","out","L","p","_bs$atk","_bs$def","_ref","_bs$hp","id","speciesId","name","bs","baseStats","stats","typesArr","types","type1","type2","t","atk","attack","def","defense","sta","hp","stamina","buildMoveBook","_gm$data2","_gm$data3","pools","moves","combatMoves","list","m","_ref2","_ref3","_ref4","_m$moveId","_ref5","_ref6","_m$pvpPower","_ref7","_m$durationTurns","moveId","uniqueId","templateId","type","pokemonType","moveType","power","pvpPower","combatPower","damage","kind","energyGain","energyCost","turns","energyDelta","ed","abs","energy","durationTurns","cooldownTurns","max","TACKLE","toEngineSide","src","leagueName","shields","sid","base","level","fastMove","chargedMoves","simulateDuel","attackerIn","defenderIn","shieldsA","shieldsB","_bookIgnored","p1","p2","r","winner","result","aHP","bHP","aRecommended","p1Best","bRecommended","p2Best","summary","bestOfThree","mine","enemy","myShields","foeShields","fights","you","foe","score","vs","sort","b"],"sources":["C:/Users/ben/Projects/nebsojipvptrainer/src/battleCalc.js"],"sourcesContent":["// src/battleCalc.js\r\n// Thin adapter your App uses. It calls the battle engine and returns the shape App expects.\r\n\r\nimport { simulateBattle } from \"./engine/battleEngine\";\r\n\r\nlet SPECIES = {};\r\nlet MOVES = {};\r\n\r\n// ---- tiny helpers kept for bootstrap compatibility ----\r\nconst num = (v, d = 0) => (Number.isFinite(Number(v)) ? Number(v) : d);\r\nconst canonMoveId = (s) => String(s || \"\")\r\n    .trim()\r\n    .replace(/^COMBAT_V\\d+_MOVE_/i, \"\")\r\n    .replace(/^V\\d+_/i, \"\")\r\n    .replace(/[^A-Za-z0-9]+/g, \"_\")\r\n    .replace(/_+/g, \"_\")\r\n    .replace(/^_|_$/g, \"\")\r\n    .toUpperCase();\r\nconst normId = (s) => String(s || \"\").toLowerCase().replace(/[^\\w]+/g, \"_\").replace(/^_+|_+$/g, \"\");\r\nfunction capLeague(league) {\r\n    const map = { \"Great League\": 1500, \"Ultra League\": 2500, \"Master League\": Infinity };\r\n    return typeof league === \"string\" ? (map[league] ?? Infinity) : (Number.isFinite(league) ? Number(league) : Infinity);\r\n}\r\n\r\n// CPM helpers\r\nconst CPM = []; (function fillCPM() {\r\n    const table = [0.094, 0.135137432, 0.16639787, 0.192650919, 0.21573247, 0.236572661, 0.25572005, 0.273530381, 0.29024988, 0.306057377, 0.3210876, 0.335445036, 0.34921268, 0.362457751, 0.37523559, 0.387592406, 0.39956728, 0.411193551, 0.42250001, 0.432926419, 0.44310755, 0.4530599578, 0.46279839, 0.472336083, 0.48168495, 0.4908558, 0.49985844, 0.508701765, 0.51739395, 0.525942511, 0.53435433, 0.542635767, 0.55079269, 0.558830576, 0.56675452, 0.574569153, 0.58227891, 0.589887907, 0.59740001, 0.604818814, 0.61215729, 0.619399365, 0.62656713, 0.633644533, 0.64065295, 0.647576426, 0.65443563, 0.661214806, 0.667934, 0.674577537, 0.68116492, 0.687680648, 0.69414365, 0.700538673, 0.70688421, 0.713164996, 0.71939909, 0.725571552, 0.7317, 0.734741009, 0.73776948, 0.740785574, 0.74378943, 0.746781211, 0.74976104, 0.752729087, 0.75568551, 0.758630378, 0.76156384, 0.764486065, 0.76739717, 0.770297266, 0.7731865, 0.776064962, 0.77893275, 0.781790055, 0.78463697, 0.787473578, 0.79030001, 0.792803968, 0.79530001, 0.797803921, 0.8003];\r\n    CPM.length = 100; CPM.fill(0); for (let i = 0; i < table.length; i++) CPM[i + 1] = table[i];\r\n})();\r\nfunction cp(a, d, s, c) { return Math.floor((a * Math.sqrt(d) * Math.sqrt(s) * c * c) / 10); }\r\nfunction levelForCap(baseAtk, baseDef, baseSta, cap) {\r\n    if (!isFinite(cap)) return 50;\r\n    let best = 1; for (let i = 1; i < CPM.length; i++) { const c = CPM[i]; if (!c) continue; if (cp(baseAtk * c, baseDef * c, baseSta * c, 1) <= cap) best = i; }\r\n    return best;\r\n}\r\n\r\n// Build species/moves from gamemaster (used by App bootstrap)\r\nfunction buildSpeciesBook(gm) {\r\n    const lists = [gm?.pokemon, gm?.data?.pokemon].filter(Boolean);\r\n    const out = {};\r\n    for (const L of lists) {\r\n        for (const p of L) {\r\n            const id = normId(p.speciesId || p.id || p.name);\r\n            const bs = p.baseStats || p.stats || {};\r\n            const typesArr = p.types || [p.type1, p.type2].filter(Boolean);\r\n            const types = (typesArr || []).map(t => String(t).replace(/^POKEMON_TYPE_/, \"\").toLowerCase());\r\n            out[id] = {\r\n                atk: num(bs.atk ?? bs.attack, 200),\r\n                def: num(bs.def ?? bs.defense, 200),\r\n                sta: num(bs.hp ?? bs.sta ?? bs.stamina, 200),\r\n                types: types.length ? types : [\"normal\"]\r\n            };\r\n        }\r\n    }\r\n    return out;\r\n}\r\n\r\nexport function buildMoveBook(gm) {\r\n    SPECIES = buildSpeciesBook(gm);\r\n    const pools = [gm?.moves, gm?.data?.moves, gm?.combatMoves, gm?.data?.combatMoves].filter(Boolean);\r\n    const out = {};\r\n    for (const list of pools) {\r\n        for (const m of list) {\r\n            const id = canonMoveId(m.moveId ?? m.id ?? m.uniqueId ?? m.templateId ?? m.name);\r\n            if (!id) continue;\r\n            const type = String(m.type || m.pokemonType || m.moveType || \"Normal\").replace(/^POKEMON_TYPE_/, \"\").toLowerCase();\r\n            const power = num(m.pvpPower ?? m.power ?? m.combatPower ?? m.damage, 3);\r\n            let kind = \"fast\", energyGain = 0, energyCost = 0, turns = 1;\r\n            if (m.energyDelta != null) { const ed = num(m.energyDelta, 0); if (ed > 0) { kind = \"fast\"; energyGain = ed; } if (ed < 0) { kind = \"charged\"; energyCost = Math.abs(ed); } }\r\n            if (m.energyGain != null) { kind = \"fast\"; energyGain = num(m.energyGain, 0); }\r\n            if (m.energy != null) { kind = \"charged\"; energyCost = Math.abs(num(m.energy, 0)); }\r\n            turns = num(m.durationTurns ?? m.turns ?? m.cooldownTurns, kind === \"fast\" ? 1 : 0);\r\n            if (kind === \"fast\") turns = Math.max(1, Math.floor(turns) || 1);\r\n            out[id] = { id, kind, type, power, energyGain, energyCost, turns };\r\n        }\r\n    }\r\n    out.TACKLE ||= { id: \"TACKLE\", kind: \"fast\", type: \"normal\", power: 3, energyGain: 8, energyCost: 0, turns: 1 };\r\n    MOVES = out;\r\n    return out;\r\n}\r\n\r\n// ---- Adapter â†’ engine ----\r\nfunction toEngineSide(src, leagueName, shields) {\r\n    const cap = capLeague(leagueName);\r\n    const sid = src?.speciesId || src?.name || \"\";\r\n    const base = SPECIES[normId(sid)] || { atk: 200, def: 200, sta: 200 };\r\n    const level = levelForCap(base.atk, base.def, base.sta, cap);\r\n    return {\r\n        speciesId: sid,\r\n        name: src?.name || src?.speciesId || sid,\r\n        fastMove: src?.fastMove,\r\n        chargedMoves: src?.chargedMoves || [],\r\n        shields: Math.max(0, shields | 0),\r\n        level,\r\n        // pass basic stats/types for the engine\r\n        base\r\n    };\r\n}\r\n\r\nexport function simulateDuel(attackerIn, defenderIn, shieldsA = 2, shieldsB = 2, _bookIgnored, leagueName = \"Master League\") {\r\n    const p1 = toEngineSide(attackerIn, leagueName, shieldsA);\r\n    const p2 = toEngineSide(defenderIn, leagueName, shieldsB);\r\n    const r = simulateBattle(p1, p2, MOVES); // { result, p1:{hp}, p2:{hp}, p1Best, p2Best }\r\n\r\n    return {\r\n        winner:\r\n            r.result === \"draw\" ? \"Draw\" :\r\n                r.result === \"p1\" ? (attackerIn.name || attackerIn.speciesId) :\r\n                    r.result === \"p2\" ? (defenderIn.name || defenderIn.speciesId) : \"Draw\",\r\n        aHP: r.p1.hp,\r\n        bHP: r.p2.hp,\r\n        aRecommended: r.p1Best || (attackerIn.chargedMoves && attackerIn.chargedMoves[0]) || null,\r\n        bRecommended: r.p2Best || (defenderIn.chargedMoves && defenderIn.chargedMoves[0]) || null,\r\n        summary: []\r\n    };\r\n}\r\n\r\nexport function bestOfThree(mine, enemy, myShields, foeShields, _bookIgnored, leagueName = \"Master League\") {\r\n    const fights = mine.map(m => {\r\n        const you = { ...m, name: m.name || m.speciesId };\r\n        const foe = { ...enemy, name: enemy.name || enemy.speciesId };\r\n        const r = simulateDuel(you, foe, myShields, foeShields, null, leagueName);\r\n        const score = r.winner === you.name ? 1 : (r.winner === \"Draw\" ? 0 : -1);\r\n        return { you: you.name, vs: foe.name, ...r, score };\r\n    });\r\n    fights.sort((a, b) => (b.score - a.score) || (b.aHP - a.aHP) || (b.bHP - a.bHP));\r\n    return { best: fights[0], fights };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}