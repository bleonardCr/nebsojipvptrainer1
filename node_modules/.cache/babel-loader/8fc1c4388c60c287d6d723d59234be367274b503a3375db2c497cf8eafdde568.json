{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ben\\\\Projects\\\\nebsojipvptrainer\\\\src\\\\components\\\\PokemonSelect.jsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PokemonSelect({\n  id,\n  label,\n  options = [],\n  // array of strings (e.g., \"Dialga (Origin)\")\n  value = \"\",\n  // parent's selected label (controlled)\n  onChange,\n  // (label: string) => void\n  placeholder = \"Start typing�\",\n  maxSuggestions = 5\n}) {\n  _s();\n  const [term, setTerm] = useState(\"\");\n  const [editing, setEditing] = useState(false);\n\n  // keep local edit state in sync if parent clears its value\n  useEffect(() => {\n    if (!value && !editing) setTerm(\"\");\n  }, [value, editing]);\n\n  // prefix-only / word-start matcher\n  const norm = s => String(s || \"\").toLowerCase();\n  const startsAtWord = (label, q) => {\n    const L = norm(label);\n    const Q = norm(q).trim();\n    if (!Q) return false;\n    if (L.startsWith(Q)) return true;\n    return L.split(/[\\s\\-()_]+/g).some(w => w.startsWith(Q));\n  };\n\n  // only show suggestions when the user typed something\n  const suggestions = useMemo(() => {\n    if (!term) return [];\n    return options.filter(o => startsAtWord(o, term)).slice(0, maxSuggestions);\n  }, [options, term, maxSuggestions]);\n\n  // which text to render in the input\n  const inputValue = editing ? term : value;\n  function accept(label) {\n    if (!label) return;\n    onChange === null || onChange === void 0 ? void 0 : onChange(label);\n    setEditing(false);\n    setTerm(\"\"); // clear editing buffer; parent now owns what's shown\n  }\n  function handleChange(e) {\n    const v = e.target.value;\n    // if user picked an exact option from datalist, accept it\n    if (options.includes(v)) {\n      accept(v);\n      return;\n    }\n    // otherwise, they're typing\n    setEditing(true);\n    setTerm(v);\n  }\n  function handleKeyDown(e) {\n    // quick-accept the single suggestion on Enter/Tab\n    if ((e.key === \"Enter\" || e.key === \"Tab\") && suggestions.length === 1) {\n      e.preventDefault();\n      accept(suggestions[0]);\n    }\n  }\n  function handleBlur() {\n    // stop editing on blur, keep parent value visible\n    setEditing(false);\n    setTerm(\"\");\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: 12\n    },\n    children: [label && /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: id,\n      style: {\n        display: \"block\",\n        marginBottom: 6\n      },\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: id,\n      list: `${id}-list`,\n      value: inputValue,\n      placeholder: placeholder,\n      onChange: handleChange,\n      onKeyDown: handleKeyDown,\n      onFocus: () => setEditing(true),\n      onBlur: handleBlur,\n      autoComplete: \"off\",\n      style: {\n        width: 320,\n        // compact width to avoid colliding with your �X� buttons\n        padding: 8,\n        border: \"1px solid #d1d5db\",\n        borderRadius: 8\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n      id: `${id}-list`,\n      children: suggestions.map(name => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: name\n      }, name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n_s(PokemonSelect, \"xET4ZitZNFrZB1IteoONqA4PeJk=\");\n_c = PokemonSelect;\nvar _c;\n$RefreshReg$(_c, \"PokemonSelect\");","map":{"version":3,"names":["React","useMemo","useState","useEffect","jsxDEV","_jsxDEV","PokemonSelect","id","label","options","value","onChange","placeholder","maxSuggestions","_s","term","setTerm","editing","setEditing","norm","s","String","toLowerCase","startsAtWord","q","L","Q","trim","startsWith","split","some","w","suggestions","filter","o","slice","inputValue","accept","handleChange","e","v","target","includes","handleKeyDown","key","length","preventDefault","handleBlur","style","marginBottom","children","htmlFor","display","fileName","_jsxFileName","lineNumber","columnNumber","list","onKeyDown","onFocus","onBlur","autoComplete","width","padding","border","borderRadius","map","name","_c","$RefreshReg$"],"sources":["C:/Users/ben/Projects/nebsojipvptrainer/src/components/PokemonSelect.jsx"],"sourcesContent":["import React, { useMemo, useState, useEffect } from \"react\";\r\n\r\nexport default function PokemonSelect({\r\n    id,\r\n    label,\r\n    options = [],          // array of strings (e.g., \"Dialga (Origin)\")\r\n    value = \"\",            // parent's selected label (controlled)\r\n    onChange,              // (label: string) => void\r\n    placeholder = \"Start typing�\",\r\n    maxSuggestions = 5,\r\n}) {\r\n    const [term, setTerm] = useState(\"\");\r\n    const [editing, setEditing] = useState(false);\r\n\r\n    // keep local edit state in sync if parent clears its value\r\n    useEffect(() => {\r\n        if (!value && !editing) setTerm(\"\");\r\n    }, [value, editing]);\r\n\r\n    // prefix-only / word-start matcher\r\n    const norm = (s) => String(s || \"\").toLowerCase();\r\n    const startsAtWord = (label, q) => {\r\n        const L = norm(label);\r\n        const Q = norm(q).trim();\r\n        if (!Q) return false;\r\n        if (L.startsWith(Q)) return true;\r\n        return L.split(/[\\s\\-()_]+/g).some((w) => w.startsWith(Q));\r\n    };\r\n\r\n    // only show suggestions when the user typed something\r\n    const suggestions = useMemo(() => {\r\n        if (!term) return [];\r\n        return options.filter((o) => startsAtWord(o, term)).slice(0, maxSuggestions);\r\n    }, [options, term, maxSuggestions]);\r\n\r\n    // which text to render in the input\r\n    const inputValue = editing ? term : value;\r\n\r\n    function accept(label) {\r\n        if (!label) return;\r\n        onChange?.(label);\r\n        setEditing(false);\r\n        setTerm(\"\"); // clear editing buffer; parent now owns what's shown\r\n    }\r\n\r\n    function handleChange(e) {\r\n        const v = e.target.value;\r\n        // if user picked an exact option from datalist, accept it\r\n        if (options.includes(v)) {\r\n            accept(v);\r\n            return;\r\n        }\r\n        // otherwise, they're typing\r\n        setEditing(true);\r\n        setTerm(v);\r\n    }\r\n\r\n    function handleKeyDown(e) {\r\n        // quick-accept the single suggestion on Enter/Tab\r\n        if ((e.key === \"Enter\" || e.key === \"Tab\") && suggestions.length === 1) {\r\n            e.preventDefault();\r\n            accept(suggestions[0]);\r\n        }\r\n    }\r\n\r\n    function handleBlur() {\r\n        // stop editing on blur, keep parent value visible\r\n        setEditing(false);\r\n        setTerm(\"\");\r\n    }\r\n\r\n    return (\r\n        <div style={{ marginBottom: 12 }}>\r\n            {label && (\r\n                <label htmlFor={id} style={{ display: \"block\", marginBottom: 6 }}>\r\n                    {label}\r\n                </label>\r\n            )}\r\n\r\n            <input\r\n                id={id}\r\n                list={`${id}-list`}\r\n                value={inputValue}\r\n                placeholder={placeholder}\r\n                onChange={handleChange}\r\n                onKeyDown={handleKeyDown}\r\n                onFocus={() => setEditing(true)}\r\n                onBlur={handleBlur}\r\n                autoComplete=\"off\"\r\n                style={{\r\n                    width: 320,               // compact width to avoid colliding with your �X� buttons\r\n                    padding: 8,\r\n                    border: \"1px solid #d1d5db\",\r\n                    borderRadius: 8,\r\n                }}\r\n            />\r\n\r\n            {/* native suggestions; hidden until the user types */}\r\n            <datalist id={`${id}-list`}>\r\n                {suggestions.map((name) => (\r\n                    <option key={name} value={name} />\r\n                ))}\r\n            </datalist>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}