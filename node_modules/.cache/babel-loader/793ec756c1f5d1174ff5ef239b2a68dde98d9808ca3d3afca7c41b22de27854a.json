{"ast":null,"code":"// src/battleCalc.js\n// Turn-accurate PvP lite sim with shields, CMP, STAB, types, and robust GM parsing.\n\nlet SPECIES = {}; // speciesId -> { atk, def, sta, types:[...], pool:{fast:[], charged:[]} }\nlet MOVES = {}; // MOVE_ID  -> { id, kind:\"fast\"|\"charged\", type, power, energyGain, energyCost, turns }\n\n// ---------------- Utilities ----------------\nconst num = (v, d = 0) => Number.isFinite(Number(v)) ? Number(v) : d;\nfunction canonMoveId(s) {\n  if (!s) return \"\";\n  return String(s).trim().replace(/^COMBAT_V\\d+_MOVE_/i, \"\").replace(/^V\\d+_/i, \"\").replace(/[^A-Za-z0-9]+/g, \"_\").replace(/_+/g, \"_\").replace(/^_|_$/g, \"\").toUpperCase();\n}\nfunction normId(s) {\n  return String(s || \"\").toLowerCase().replace(/[^\\w]+/g, \"_\").replace(/^_+|_+$/g, \"\");\n}\nfunction capLeague(league) {\n  var _map$league;\n  const map = {\n    \"Great League\": 1500,\n    \"Ultra League\": 2500,\n    \"Master League\": Infinity\n  };\n  return typeof league === \"string\" ? (_map$league = map[league]) !== null && _map$league !== void 0 ? _map$league : Infinity : Number.isFinite(league) ? Number(league) : Infinity;\n}\nfunction tcase(s) {\n  return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();\n}\nfunction normType(s) {\n  if (!s) return null;\n  const raw = String(s).replace(/^POKEMON_TYPE_/, \"\").replace(/_/g, \" \").trim().toLowerCase();\n  const T = tcase(raw);\n  return TYPES.includes(T) ? T : null;\n}\n\n// ---------------- CP multipliers (0.5 levels to 50) ----------------\nconst CPM = [];\n(function fillCPM() {\n  const table = [0.094, 0.135137432, 0.16639787, 0.192650919, 0.21573247, 0.236572661, 0.25572005, 0.273530381, 0.29024988, 0.306057377, 0.3210876, 0.335445036, 0.34921268, 0.362457751, 0.37523559, 0.387592406, 0.39956728, 0.411193551, 0.42250001, 0.432926419, 0.44310755, 0.4530599578, 0.46279839, 0.472336083, 0.48168495, 0.4908558, 0.49985844, 0.508701765, 0.51739395, 0.525942511, 0.53435433, 0.542635767, 0.55079269, 0.558830576, 0.56675452, 0.574569153, 0.58227891, 0.589887907, 0.59740001, 0.604818814, 0.61215729, 0.619399365, 0.62656713, 0.633644533, 0.64065295, 0.647576426, 0.65443563, 0.661214806, 0.667934, 0.674577537, 0.68116492, 0.687680648, 0.69414365, 0.700538673, 0.70688421, 0.713164996, 0.71939909, 0.725571552, 0.7317, 0.734741009, 0.73776948, 0.740785574, 0.74378943, 0.746781211, 0.74976104, 0.752729087, 0.75568551, 0.758630378, 0.76156384, 0.764486065, 0.76739717, 0.770297266, 0.7731865, 0.776064962, 0.77893275, 0.781790055, 0.78463697, 0.787473578, 0.79030001, 0.792803968, 0.79530001, 0.797803921, 0.8003];\n  CPM.length = 100;\n  CPM.fill(0);\n  for (let i = 0; i < table.length; i++) CPM[i + 1] = table[i];\n})();\nfunction cp(a, d, s, c) {\n  return Math.floor(a * Math.sqrt(d) * Math.sqrt(s) * c * c / 10);\n}\nfunction levelForCap(baseAtk, baseDef, baseSta, cap) {\n  if (!isFinite(cap)) return 99; // level ~50\n  let best = 1;\n  for (let i = 1; i < CPM.length; i++) {\n    const c = CPM[i];\n    if (!c) continue;\n    if (cp(baseAtk * c, baseDef * c, baseSta * c, 1) <= cap) best = i;\n  }\n  return best;\n}\n\n// ---------------- Type chart & damage ----------------\nconst TYPES = [\"Normal\", \"Fighting\", \"Flying\", \"Poison\", \"Ground\", \"Rock\", \"Bug\", \"Ghost\", \"Steel\", \"Fire\", \"Water\", \"Grass\", \"Electric\", \"Psychic\", \"Ice\", \"Dragon\", \"Dark\", \"Fairy\"];\nconst EFF = {};\nTYPES.forEach(a => {\n  EFF[a] = {};\n  TYPES.forEach(d => EFF[a][d] = 1);\n});\nfunction S(atk, arr, m) {\n  arr.forEach(d => EFF[atk][d] = m);\n}\n_c = S;\nS(\"Fighting\", [\"Normal\", \"Rock\", \"Ice\", \"Dark\", \"Steel\"], 1.6);\nS(\"Fighting\", [\"Flying\", \"Poison\", \"Bug\", \"Psychic\", \"Fairy\"], 0.625);\nS(\"Flying\", [\"Fighting\", \"Bug\", \"Grass\"], 1.6);\nS(\"Flying\", [\"Rock\", \"Steel\", \"Electric\"], 0.625);\nS(\"Poison\", [\"Grass\", \"Fairy\"], 1.6);\nS(\"Poison\", [\"Poison\", \"Ground\", \"Rock\", \"Ghost\"], 0.625);\nS(\"Poison\", [\"Steel\"], 0.390625);\nS(\"Ground\", [\"Poison\", \"Rock\", \"Steel\", \"Fire\", \"Electric\"], 1.6);\nS(\"Ground\", [\"Bug\", \"Grass\"], 0.625);\nS(\"Ground\", [\"Flying\"], 0.390625);\nS(\"Rock\", [\"Flying\", \"Bug\", \"Fire\", \"Ice\"], 1.6);\nS(\"Rock\", [\"Fighting\", \"Ground\", \"Steel\"], 0.625);\nS(\"Bug\", [\"Grass\", \"Psychic\", \"Dark\"], 1.6);\nS(\"Bug\", [\"Fighting\", \"Flying\", \"Poison\", \"Ghost\", \"Steel\", \"Fire\", \"Fairy\"], 0.625);\nS(\"Ghost\", [\"Ghost\", \"Psychic\"], 1.6);\nS(\"Ghost\", [\"Dark\"], 0.625);\nS(\"Steel\", [\"Rock\", \"Ice\", \"Fairy\"], 1.6);\nS(\"Steel\", [\"Steel\", \"Fire\", \"Water\", \"Electric\"], 0.625);\nS(\"Fire\", [\"Bug\", \"Steel\", \"Grass\", \"Ice\"], 1.6);\nS(\"Fire\", [\"Rock\", \"Fire\", \"Water\", \"Dragon\"], 0.625);\nS(\"Water\", [\"Ground\", \"Rock\", \"Fire\"], 1.6);\nS(\"Water\", [\"Water\", \"Grass\", \"Dragon\"], 0.625);\nS(\"Grass\", [\"Ground\", \"Rock\", \"Water\"], 1.6);\nS(\"Grass\", [\"Flying\", \"Poison\", \"Bug\", \"Steel\", \"Fire\", \"Grass\", \"Dragon\"], 0.625);\nS(\"Electric\", [\"Flying\", \"Water\"], 1.6);\nS(\"Electric\", [\"Grass\", \"Electric\", \"Dragon\"], 0.625);\nS(\"Electric\", [\"Ground\"], 0.390625);\nS(\"Psychic\", [\"Fighting\", \"Poison\"], 1.6);\nS(\"Psychic\", [\"Psychic\", \"Steel\"], 0.625);\nS(\"Psychic\", [\"Dark\"], 0.390625);\nS(\"Ice\", [\"Flying\", \"Ground\", \"Grass\", \"Dragon\"], 1.6);\nS(\"Ice\", [\"Steel\", \"Fire\", \"Water\", \"Ice\"], 0.625);\nS(\"Dragon\", [\"Dragon\"], 1.6);\nS(\"Dragon\", [\"Steel\"], 0.625);\nS(\"Dragon\", [\"Fairy\"], 0.390625);\nS(\"Dark\", [\"Ghost\", \"Psychic\"], 1.6);\nS(\"Dark\", [\"Fighting\", \"Dark\", \"Fairy\"], 0.625);\nS(\"Fairy\", [\"Fighting\", \"Dragon\", \"Dark\"], 1.6);\nS(\"Fairy\", [\"Poison\", \"Steel\", \"Fire\"], 0.625);\nconst STAB = 1.2;\nfunction eff(multType, defendTypes) {\n  let m = 1;\n  for (const t of defendTypes) {\n    var _EFF$multType$t, _EFF$multType;\n    m *= (_EFF$multType$t = (_EFF$multType = EFF[multType]) === null || _EFF$multType === void 0 ? void 0 : _EFF$multType[t]) !== null && _EFF$multType$t !== void 0 ? _EFF$multType$t : 1;\n  }\n  return m;\n}\nfunction dmg(power, atk, def, stab, effm) {\n  const raw = 0.5 * num(power, 0) * (num(atk, 1) / Math.max(1, num(def, 1))) * (stab || 1) * (effm || 1);\n  return Math.max(1, Math.floor(raw) + 1); // PvP rounding (+1)\n}\n\n// ---------------- Books ----------------\nfunction buildSpeciesBook(gm) {\n  var _gm$data;\n  const lists = [gm === null || gm === void 0 ? void 0 : gm.pokemon, gm === null || gm === void 0 ? void 0 : (_gm$data = gm.data) === null || _gm$data === void 0 ? void 0 : _gm$data.pokemon, gm === null || gm === void 0 ? void 0 : gm.species, gm === null || gm === void 0 ? void 0 : gm.pokemonList, gm === null || gm === void 0 ? void 0 : gm.pokemonSettings].filter(Boolean);\n  const out = {};\n  for (const L of lists) {\n    for (const p of L) {\n      var _ref, _ref2, _p$baseAttack, _ref3, _ref4, _p$baseDefense, _ref5, _ref6, _p$baseStamina, _p$moves, _p$moves2;\n      const id = normId(p.speciesId || p.pokemonId || p.templateId || p.id || p.name);\n      if (!id) continue;\n      const bs = p.baseStats || p.stats || {};\n      const atk = num((_ref = (_ref2 = (_p$baseAttack = p.baseAttack) !== null && _p$baseAttack !== void 0 ? _p$baseAttack : bs.atk) !== null && _ref2 !== void 0 ? _ref2 : bs.attack) !== null && _ref !== void 0 ? _ref : p.attack, 200);\n      const def = num((_ref3 = (_ref4 = (_p$baseDefense = p.baseDefense) !== null && _p$baseDefense !== void 0 ? _p$baseDefense : bs.def) !== null && _ref4 !== void 0 ? _ref4 : bs.defense) !== null && _ref3 !== void 0 ? _ref3 : p.defense, 200);\n      const sta = num((_ref5 = (_ref6 = (_p$baseStamina = p.baseStamina) !== null && _p$baseStamina !== void 0 ? _p$baseStamina : bs.sta) !== null && _ref6 !== void 0 ? _ref6 : bs.stamina) !== null && _ref5 !== void 0 ? _ref5 : p.stamina, 200);\n      const typesArr = p.types || [p.type1, p.type2].filter(Boolean);\n      const types = (typesArr || []).map(normType).filter(Boolean);\n\n      // Move pools from various GM flavors\n      const fastPool = (p.fastMoves || p.quickMoves || ((_p$moves = p.moves) === null || _p$moves === void 0 ? void 0 : _p$moves.fast) || p.fastMovePool || []).map(canonMoveId).filter(Boolean);\n      const chargedPool = (p.chargedMoves || p.cinematicMoves || ((_p$moves2 = p.moves) === null || _p$moves2 === void 0 ? void 0 : _p$moves2.charged) || p.chargedMovePool || []).map(canonMoveId).filter(Boolean);\n      out[id] = {\n        atk,\n        def,\n        sta,\n        types: types.length ? types : [\"Normal\"],\n        pool: {\n          fast: fastPool,\n          charged: chargedPool\n        }\n      };\n    }\n  }\n  return out;\n}\nexport function buildMoveBook(gm) {\n  var _gm$data2, _gm$data3;\n  SPECIES = buildSpeciesBook(gm);\n  const pools = [gm === null || gm === void 0 ? void 0 : gm.moves, gm === null || gm === void 0 ? void 0 : gm.combatMoves, gm === null || gm === void 0 ? void 0 : (_gm$data2 = gm.data) === null || _gm$data2 === void 0 ? void 0 : _gm$data2.moves, gm === null || gm === void 0 ? void 0 : (_gm$data3 = gm.data) === null || _gm$data3 === void 0 ? void 0 : _gm$data3.combatMoves, gm === null || gm === void 0 ? void 0 : gm.moveList].filter(Boolean);\n  const out = {};\n  for (const list of pools) {\n    for (const m of list) {\n      var _ref7, _ref8, _ref9, _ref0, _m$moveId, _ref1, _ref10, _m$pvpPower, _ref11, _m$durationTurns;\n      const rawId = (_ref7 = (_ref8 = (_ref9 = (_ref0 = (_m$moveId = m.moveId) !== null && _m$moveId !== void 0 ? _m$moveId : m.id) !== null && _ref0 !== void 0 ? _ref0 : m.uniqueId) !== null && _ref9 !== void 0 ? _ref9 : m.templateId) !== null && _ref8 !== void 0 ? _ref8 : m.name) !== null && _ref7 !== void 0 ? _ref7 : \"\";\n      const id = canonMoveId(rawId);\n      if (!id) continue;\n      const type = normType(m.type || m.pokemonType || m.moveType) || \"Normal\";\n      const power = num((_ref1 = (_ref10 = (_m$pvpPower = m.pvpPower) !== null && _m$pvpPower !== void 0 ? _m$pvpPower : m.power) !== null && _ref10 !== void 0 ? _ref10 : m.combatPower) !== null && _ref1 !== void 0 ? _ref1 : m.damage, 3);\n      let kind = \"fast\",\n        energyGain = 0,\n        energyCost = 0,\n        turns = 1;\n      if (m.energyDelta != null) {\n        const ed = num(m.energyDelta, 0);\n        if (ed > 0) {\n          kind = \"fast\";\n          energyGain = ed;\n        }\n        if (ed < 0) {\n          kind = \"charged\";\n          energyCost = Math.abs(ed);\n        }\n      }\n      if (m.energyGain != null) {\n        kind = \"fast\";\n        energyGain = num(m.energyGain, 0);\n      }\n      if (m.energy != null) {\n        kind = \"charged\";\n        energyCost = Math.abs(num(m.energy, 0));\n      }\n      turns = num((_ref11 = (_m$durationTurns = m.durationTurns) !== null && _m$durationTurns !== void 0 ? _m$durationTurns : m.turns) !== null && _ref11 !== void 0 ? _ref11 : m.cooldownTurns, kind === \"fast\" ? 1 : 0);\n      if (kind === \"fast\") turns = Math.max(1, Math.floor(turns) || 1);\n      if (kind === \"fast\" && energyGain <= 0) {\n        energyGain = 8;\n      }\n      if (kind === \"charged\" && energyCost <= 0) {\n        energyCost = 45;\n      }\n      const mv = {\n        id,\n        kind,\n        type,\n        power,\n        energyGain,\n        energyCost,\n        turns\n      };\n      if (!out[id] || power > out[id].power) out[id] = mv;\n    }\n  }\n\n  // safe fallback fast move\n  out.TACKLE = out.TACKLE || {\n    id: \"TACKLE\",\n    kind: \"fast\",\n    type: \"Normal\",\n    power: 3,\n    energyGain: 8,\n    energyCost: 0,\n    turns: 1\n  };\n  MOVES = out;\n  return out;\n}\n\n// ---------------- Move recommendations ----------------\nconst USER_MOVE_OVERRIDES = {\n  // Example override\n  \"dialga_origin\": {\n    fastMove: \"DRAGON_BREATH\",\n    chargedMoves: [\"ROAR_OF_TIME\", \"IRON_HEAD\"]\n  },\n  \"dialga\": {\n    fastMove: \"DRAGON_BREATH\",\n    chargedMoves: [\"ROAR_OF_TIME\", \"IRON_HEAD\"]\n  }\n};\nexport function recommendMovesFor(speciesId, leagueEntry) {\n  var _entry$chargedMoves;\n  const sid = normId(speciesId);\n  const entry = leagueEntry || {};\n\n  // If league file already set moves, keep them\n  if (entry.fastMove || (_entry$chargedMoves = entry.chargedMoves) !== null && _entry$chargedMoves !== void 0 && _entry$chargedMoves.length) {\n    return {\n      fastMove: entry.fastMove,\n      chargedMoves: entry.chargedMoves\n    };\n  }\n\n  // User override wins\n  if (USER_MOVE_OVERRIDES[sid]) return USER_MOVE_OVERRIDES[sid];\n\n  // Fall back to gamemaster move pools\n  const sp = SPECIES[sid];\n  const pool = (sp === null || sp === void 0 ? void 0 : sp.pool) || {};\n  const fastChoices = (pool.fast || []).map(id => MOVES[canonMoveId(id)]).filter(Boolean);\n  const chargedChoices = (pool.charged || []).map(id => MOVES[canonMoveId(id)]).filter(m => (m === null || m === void 0 ? void 0 : m.energyCost) > 0);\n\n  // pick fastest energy gain fast move (tiebreak power), else TACKLE\n  const bestFast = fastChoices.sort((a, b) => b.energyGain / Math.max(1, b.turns) - a.energyGain / Math.max(1, a.turns) || b.power - a.power)[0];\n  const fastMove = (bestFast === null || bestFast === void 0 ? void 0 : bestFast.id) || \"TACKLE\";\n\n  // pick a bait (lowest cost, tiebreak DPE) + a nuke (highest power)\n  const byCost = [...chargedChoices].sort((a, b) => a.energyCost - b.energyCost || b.power / Math.max(1, b.energyCost) - a.power / Math.max(1, a.energyCost));\n  const bait = byCost[0];\n  const byNuke = [...chargedChoices].sort((a, b) => b.power - a.power);\n  const nuke = byNuke[0];\n  const chargedMoves = Array.from(new Set([bait === null || bait === void 0 ? void 0 : bait.id, nuke === null || nuke === void 0 ? void 0 : nuke.id])).filter(Boolean).slice(0, 2);\n  return {\n    fastMove,\n    chargedMoves\n  };\n}\n\n// ---------------- Build fighters at league cap ----------------\nfunction buildFighter(src, leagueName) {\n  const cap = capLeague(leagueName);\n  const sid = normId(src.speciesId || src.name);\n  const base = SPECIES[sid] || {\n    atk: 200,\n    def: 200,\n    sta: 200,\n    types: [\"Normal\"]\n  };\n  const lvl = levelForCap(base.atk, base.def, base.sta, cap);\n  const cpm = CPM[lvl] || CPM[99];\n  const Atk = base.atk * cpm;\n  const Def = base.def * cpm;\n  const HP = Math.max(1, Math.floor(base.sta * cpm));\n  const fast = MOVES[canonMoveId(src.fastMove)] || MOVES.TACKLE;\n  const chargedMoves = (src.chargedMoves || []).map(canonMoveId).map(id => MOVES[id]).filter(Boolean);\n  return {\n    name: src.name || src.speciesId,\n    speciesId: sid,\n    types: base.types,\n    Atk,\n    Def,\n    MaxHP: HP,\n    HP,\n    fast,\n    chargedMoves,\n    energy: 0,\n    cooldown: 0 // turns until next fast connects\n  };\n}\n\n// pick charged with highest *actual* damage vs current foe\nfunction bestCharged(att, def) {\n  let best = null,\n    bestVal = -Infinity;\n  for (const m of att.chargedMoves || []) {\n    if (!m || m.kind !== \"charged\") continue;\n    const stab = att.types.includes(m.type) ? STAB : 1;\n    const mult = eff(m.type, def.types);\n    const val = dmg(m.power, att.Atk, def.Def, stab, mult);\n    if (val > bestVal) {\n      bestVal = val;\n      best = m;\n    }\n  }\n  return best;\n}\n\n// ---------------- Simulate one duel ----------------\nexport function simulateDuel(attackerIn, defenderIn, shieldsA = 2, shieldsB = 2, _book = MOVES, leagueName = \"Master League\") {\n  var _bestCharged, _bestCharged2, _A$fast, _B$fast;\n  const A = buildFighter(attackerIn, leagueName);\n  const B = buildFighter(defenderIn, leagueName);\n  const recA = ((_bestCharged = bestCharged(A, B)) === null || _bestCharged === void 0 ? void 0 : _bestCharged.id) || null;\n  const recB = ((_bestCharged2 = bestCharged(B, A)) === null || _bestCharged2 === void 0 ? void 0 : _bestCharged2.id) || null;\n  let aSh = Math.max(0, shieldsA | 0),\n    bSh = Math.max(0, shieldsB | 0);\n  let t = 0;\n  const MAX_TURNS = 2000;\n  const log = [];\n  function tryFast(user, foe) {\n    if (!user.fast) return;\n    user.cooldown--;\n    if (user.cooldown <= 0) {\n      // apply fast damage & energy when the move \"lands\"\n      const stab = user.types.includes(user.fast.type) ? STAB : 1;\n      const mult = eff(user.fast.type, foe.types);\n      const hit = dmg(user.fast.power, user.Atk, foe.Def, stab, mult);\n      foe.HP = Math.max(0, foe.HP - hit);\n      user.energy = Math.min(100, user.energy + num(user.fast.energyGain, 0));\n      user.cooldown = user.fast.turns; // reset cooldown\n    }\n  }\n  function canThrow(u) {\n    return (u.chargedMoves || []).some(m => u.energy >= (m.energyCost || 45));\n  }\n  function chooseThrow(u, foe) {\n    // choose move with max actual damage that is ready\n    let pick = null,\n      best = -Infinity;\n    for (const m of u.chargedMoves || []) {\n      if (u.energy < (m.energyCost || 45)) continue;\n      const stab = u.types.includes(m.type) ? STAB : 1;\n      const mult = eff(m.type, foe.types);\n      const val = dmg(m.power, u.Atk, foe.Def, stab, mult);\n      if (val > best) {\n        best = val;\n        pick = m;\n      }\n    }\n    return pick;\n  }\n  function shouldShield(foe, incoming, shieldsLeft) {\n    if (shieldsLeft <= 0) return false;\n    const stab = foe.types.includes(incoming.type) ? STAB : 1;\n    const mult = eff(incoming.type, foe.types);\n    const hit = dmg(incoming.power, (/*att not used*/1) * foe.Atk || foe.Atk, foe.Def, stab, mult); // rough\n    const th = shieldsLeft === 2 ? 0.32 : 0.45; // early bait vs late conserve\n    return hit >= foe.HP || hit >= foe.MaxHP * th;\n  }\n\n  // initialize fast cooldowns so first fast lands at its \"turns\"\n  A.cooldown = ((_A$fast = A.fast) === null || _A$fast === void 0 ? void 0 : _A$fast.turns) || 1;\n  B.cooldown = ((_B$fast = B.fast) === null || _B$fast === void 0 ? void 0 : _B$fast.turns) || 1;\n  while (A.HP > 0 && B.HP > 0 && t < MAX_TURNS) {\n    t++;\n\n    // if both have a charged ready at the start of a turn, CMP decides order\n    const aReady = canThrow(A);\n    const bReady = canThrow(B);\n    if (aReady || bReady) {\n      const aFirst = aReady && (!bReady || A.Atk >= B.Atk);\n      const resolve = (user, foe, who) => {\n        var _user$fast;\n        const move = chooseThrow(user, foe);\n        if (!move) return;\n        let shielded = false;\n        if (shouldShield(foe, move, who === \"A\" ? bSh : aSh)) {\n          if (who === \"A\") bSh--;else aSh--;\n          shielded = true;\n        } else {\n          const stab = user.types.includes(move.type) ? STAB : 1;\n          const mult = eff(move.type, foe.types);\n          const hit = dmg(move.power, user.Atk, foe.Def, stab, mult);\n          foe.HP = Math.max(0, foe.HP - hit);\n        }\n        user.energy -= move.energyCost || 45;\n        user.cooldown = ((_user$fast = user.fast) === null || _user$fast === void 0 ? void 0 : _user$fast.turns) || 1; // using a charged consumes the turn; fast window resets\n        log.push(`${who} throws ${move.id}${shielded ? \" (shielded)\" : \"\"}`);\n      };\n      if (aFirst) {\n        resolve(A, B, \"A\");\n        if (B.HP <= 0) break;\n        if (bReady) resolve(B, A, \"B\");\n        if (A.HP <= 0) break;\n      } else {\n        resolve(B, A, \"B\");\n        if (A.HP <= 0) break;\n        if (aReady) resolve(A, B, \"A\");\n        if (B.HP <= 0) break;\n      }\n      continue; // no fast damage on a charged-throw turn\n    }\n\n    // otherwise, apply fast progression this turn\n    tryFast(A, B);\n    if (B.HP <= 0) break;\n    tryFast(B, A);\n    if (A.HP <= 0) break;\n  }\n  const winner = A.HP <= 0 && B.HP <= 0 ? \"Draw\" : A.HP <= 0 ? B.name : B.HP <= 0 ? A.name : A.HP === B.HP ? \"Draw\" : A.HP > B.HP ? A.name : B.name;\n  return {\n    winner,\n    aHP: Math.round(A.HP / A.MaxHP * 100),\n    bHP: Math.round(B.HP / B.MaxHP * 100),\n    aRecommended: recA,\n    bRecommended: recB,\n    summary: log.slice(0, 12)\n  };\n}\n\n// ---------------- Best-of-three wrapper (UI expects this) ----------------\nexport function bestOfThree(mine, enemy, myShields, foeShields, _book = MOVES, leagueName = \"Master League\") {\n  const fights = mine.map(m => {\n    const you = {\n      ...m,\n      name: m.name || m.speciesId\n    };\n    const foe = {\n      ...enemy,\n      name: enemy.name || enemy.speciesId\n    };\n    const r = simulateDuel(you, foe, myShields, foeShields, MOVES, leagueName);\n    const score = r.winner === you.name ? 1 : r.winner === \"Draw\" ? 0 : -1;\n    return {\n      you: you.name,\n      vs: foe.name,\n      ...r,\n      score\n    };\n  });\n  fights.sort((a, b) => b.score - a.score || b.aHP - a.aHP || b.bHP - a.bHP);\n  return {\n    best: fights[0],\n    fights\n  };\n}\nvar _c;\n$RefreshReg$(_c, \"S\");","map":{"version":3,"names":["SPECIES","MOVES","num","v","d","Number","isFinite","canonMoveId","s","String","trim","replace","toUpperCase","normId","toLowerCase","capLeague","league","_map$league","map","Infinity","tcase","charAt","slice","normType","raw","T","TYPES","includes","CPM","fillCPM","table","length","fill","i","cp","a","c","Math","floor","sqrt","levelForCap","baseAtk","baseDef","baseSta","cap","best","EFF","forEach","S","atk","arr","m","_c","STAB","eff","multType","defendTypes","t","_EFF$multType$t","_EFF$multType","dmg","power","def","stab","effm","max","buildSpeciesBook","gm","_gm$data","lists","pokemon","data","species","pokemonList","pokemonSettings","filter","Boolean","out","L","p","_ref","_ref2","_p$baseAttack","_ref3","_ref4","_p$baseDefense","_ref5","_ref6","_p$baseStamina","_p$moves","_p$moves2","id","speciesId","pokemonId","templateId","name","bs","baseStats","stats","baseAttack","attack","baseDefense","defense","sta","baseStamina","stamina","typesArr","types","type1","type2","fastPool","fastMoves","quickMoves","moves","fast","fastMovePool","chargedPool","chargedMoves","cinematicMoves","charged","chargedMovePool","pool","buildMoveBook","_gm$data2","_gm$data3","pools","combatMoves","moveList","list","_ref7","_ref8","_ref9","_ref0","_m$moveId","_ref1","_ref10","_m$pvpPower","_ref11","_m$durationTurns","rawId","moveId","uniqueId","type","pokemonType","moveType","pvpPower","combatPower","damage","kind","energyGain","energyCost","turns","energyDelta","ed","abs","energy","durationTurns","cooldownTurns","mv","TACKLE","USER_MOVE_OVERRIDES","fastMove","recommendMovesFor","leagueEntry","_entry$chargedMoves","sid","entry","sp","fastChoices","chargedChoices","bestFast","sort","b","byCost","bait","byNuke","nuke","Array","from","Set","buildFighter","src","leagueName","base","lvl","cpm","Atk","Def","HP","MaxHP","cooldown","bestCharged","att","bestVal","mult","val","simulateDuel","attackerIn","defenderIn","shieldsA","shieldsB","_book","_bestCharged","_bestCharged2","_A$fast","_B$fast","A","B","recA","recB","aSh","bSh","MAX_TURNS","log","tryFast","user","foe","hit","min","canThrow","u","some","chooseThrow","pick","shouldShield","incoming","shieldsLeft","th","aReady","bReady","aFirst","resolve","who","_user$fast","move","shielded","push","winner","aHP","round","bHP","aRecommended","bRecommended","summary","bestOfThree","mine","enemy","myShields","foeShields","fights","you","r","score","vs","$RefreshReg$"],"sources":["C:/Users/ben/Projects/nebsojipvptrainer/src/battleCalc.js"],"sourcesContent":["// src/battleCalc.js\r\n// Turn-accurate PvP lite sim with shields, CMP, STAB, types, and robust GM parsing.\r\n\r\nlet SPECIES = {}; // speciesId -> { atk, def, sta, types:[...], pool:{fast:[], charged:[]} }\r\nlet MOVES = {};   // MOVE_ID  -> { id, kind:\"fast\"|\"charged\", type, power, energyGain, energyCost, turns }\r\n\r\n// ---------------- Utilities ----------------\r\nconst num = (v, d = 0) => (Number.isFinite(Number(v)) ? Number(v) : d);\r\n\r\nfunction canonMoveId(s) {\r\n    if (!s) return \"\";\r\n    return String(s)\r\n        .trim()\r\n        .replace(/^COMBAT_V\\d+_MOVE_/i, \"\")\r\n        .replace(/^V\\d+_/i, \"\")\r\n        .replace(/[^A-Za-z0-9]+/g, \"_\")\r\n        .replace(/_+/g, \"_\")\r\n        .replace(/^_|_$/g, \"\")\r\n        .toUpperCase();\r\n}\r\nfunction normId(s) { return String(s || \"\").toLowerCase().replace(/[^\\w]+/g, \"_\").replace(/^_+|_+$/g, \"\"); }\r\nfunction capLeague(league) {\r\n    const map = { \"Great League\": 1500, \"Ultra League\": 2500, \"Master League\": Infinity };\r\n    return typeof league === \"string\" ? (map[league] ?? Infinity) : (Number.isFinite(league) ? Number(league) : Infinity);\r\n}\r\nfunction tcase(s) { return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase(); }\r\nfunction normType(s) {\r\n    if (!s) return null;\r\n    const raw = String(s).replace(/^POKEMON_TYPE_/, \"\").replace(/_/g, \" \").trim().toLowerCase();\r\n    const T = tcase(raw);\r\n    return TYPES.includes(T) ? T : null;\r\n}\r\n\r\n// ---------------- CP multipliers (0.5 levels to 50) ----------------\r\nconst CPM = [];\r\n(function fillCPM() {\r\n    const table = [\r\n        0.094, 0.135137432, 0.16639787, 0.192650919, 0.21573247, 0.236572661, 0.25572005, 0.273530381,\r\n        0.29024988, 0.306057377, 0.3210876, 0.335445036, 0.34921268, 0.362457751, 0.37523559, 0.387592406,\r\n        0.39956728, 0.411193551, 0.42250001, 0.432926419, 0.44310755, 0.4530599578, 0.46279839, 0.472336083,\r\n        0.48168495, 0.4908558, 0.49985844, 0.508701765, 0.51739395, 0.525942511, 0.53435433, 0.542635767,\r\n        0.55079269, 0.558830576, 0.56675452, 0.574569153, 0.58227891, 0.589887907, 0.59740001, 0.604818814,\r\n        0.61215729, 0.619399365, 0.62656713, 0.633644533, 0.64065295, 0.647576426, 0.65443563, 0.661214806,\r\n        0.667934, 0.674577537, 0.68116492, 0.687680648, 0.69414365, 0.700538673, 0.70688421, 0.713164996,\r\n        0.71939909, 0.725571552, 0.7317, 0.734741009, 0.73776948, 0.740785574, 0.74378943, 0.746781211,\r\n        0.74976104, 0.752729087, 0.75568551, 0.758630378, 0.76156384, 0.764486065, 0.76739717, 0.770297266,\r\n        0.7731865, 0.776064962, 0.77893275, 0.781790055, 0.78463697, 0.787473578, 0.79030001, 0.792803968,\r\n        0.79530001, 0.797803921, 0.8003\r\n    ];\r\n    CPM.length = 100; CPM.fill(0);\r\n    for (let i = 0; i < table.length; i++) CPM[i + 1] = table[i];\r\n})();\r\nfunction cp(a, d, s, c) { return Math.floor((a * Math.sqrt(d) * Math.sqrt(s) * c * c) / 10); }\r\nfunction levelForCap(baseAtk, baseDef, baseSta, cap) {\r\n    if (!isFinite(cap)) return 99; // level ~50\r\n    let best = 1;\r\n    for (let i = 1; i < CPM.length; i++) {\r\n        const c = CPM[i]; if (!c) continue;\r\n        if (cp(baseAtk * c, baseDef * c, baseSta * c, 1) <= cap) best = i;\r\n    }\r\n    return best;\r\n}\r\n\r\n// ---------------- Type chart & damage ----------------\r\nconst TYPES = [\r\n    \"Normal\", \"Fighting\", \"Flying\", \"Poison\", \"Ground\", \"Rock\", \"Bug\", \"Ghost\", \"Steel\",\r\n    \"Fire\", \"Water\", \"Grass\", \"Electric\", \"Psychic\", \"Ice\", \"Dragon\", \"Dark\", \"Fairy\"\r\n];\r\nconst EFF = {};\r\nTYPES.forEach(a => { EFF[a] = {}; TYPES.forEach(d => EFF[a][d] = 1); });\r\nfunction S(atk, arr, m) { arr.forEach(d => EFF[atk][d] = m); }\r\nS(\"Fighting\", [\"Normal\", \"Rock\", \"Ice\", \"Dark\", \"Steel\"], 1.6); S(\"Fighting\", [\"Flying\", \"Poison\", \"Bug\", \"Psychic\", \"Fairy\"], 0.625);\r\nS(\"Flying\", [\"Fighting\", \"Bug\", \"Grass\"], 1.6); S(\"Flying\", [\"Rock\", \"Steel\", \"Electric\"], 0.625);\r\nS(\"Poison\", [\"Grass\", \"Fairy\"], 1.6); S(\"Poison\", [\"Poison\", \"Ground\", \"Rock\", \"Ghost\"], 0.625); S(\"Poison\", [\"Steel\"], 0.390625);\r\nS(\"Ground\", [\"Poison\", \"Rock\", \"Steel\", \"Fire\", \"Electric\"], 1.6); S(\"Ground\", [\"Bug\", \"Grass\"], 0.625); S(\"Ground\", [\"Flying\"], 0.390625);\r\nS(\"Rock\", [\"Flying\", \"Bug\", \"Fire\", \"Ice\"], 1.6); S(\"Rock\", [\"Fighting\", \"Ground\", \"Steel\"], 0.625);\r\nS(\"Bug\", [\"Grass\", \"Psychic\", \"Dark\"], 1.6); S(\"Bug\", [\"Fighting\", \"Flying\", \"Poison\", \"Ghost\", \"Steel\", \"Fire\", \"Fairy\"], 0.625);\r\nS(\"Ghost\", [\"Ghost\", \"Psychic\"], 1.6); S(\"Ghost\", [\"Dark\"], 0.625);\r\nS(\"Steel\", [\"Rock\", \"Ice\", \"Fairy\"], 1.6); S(\"Steel\", [\"Steel\", \"Fire\", \"Water\", \"Electric\"], 0.625);\r\nS(\"Fire\", [\"Bug\", \"Steel\", \"Grass\", \"Ice\"], 1.6); S(\"Fire\", [\"Rock\", \"Fire\", \"Water\", \"Dragon\"], 0.625);\r\nS(\"Water\", [\"Ground\", \"Rock\", \"Fire\"], 1.6); S(\"Water\", [\"Water\", \"Grass\", \"Dragon\"], 0.625);\r\nS(\"Grass\", [\"Ground\", \"Rock\", \"Water\"], 1.6); S(\"Grass\", [\"Flying\", \"Poison\", \"Bug\", \"Steel\", \"Fire\", \"Grass\", \"Dragon\"], 0.625);\r\nS(\"Electric\", [\"Flying\", \"Water\"], 1.6); S(\"Electric\", [\"Grass\", \"Electric\", \"Dragon\"], 0.625); S(\"Electric\", [\"Ground\"], 0.390625);\r\nS(\"Psychic\", [\"Fighting\", \"Poison\"], 1.6); S(\"Psychic\", [\"Psychic\", \"Steel\"], 0.625); S(\"Psychic\", [\"Dark\"], 0.390625);\r\nS(\"Ice\", [\"Flying\", \"Ground\", \"Grass\", \"Dragon\"], 1.6); S(\"Ice\", [\"Steel\", \"Fire\", \"Water\", \"Ice\"], 0.625);\r\nS(\"Dragon\", [\"Dragon\"], 1.6); S(\"Dragon\", [\"Steel\"], 0.625); S(\"Dragon\", [\"Fairy\"], 0.390625);\r\nS(\"Dark\", [\"Ghost\", \"Psychic\"], 1.6); S(\"Dark\", [\"Fighting\", \"Dark\", \"Fairy\"], 0.625);\r\nS(\"Fairy\", [\"Fighting\", \"Dragon\", \"Dark\"], 1.6); S(\"Fairy\", [\"Poison\", \"Steel\", \"Fire\"], 0.625);\r\n\r\nconst STAB = 1.2;\r\nfunction eff(multType, defendTypes) { let m = 1; for (const t of defendTypes) { m *= (EFF[multType]?.[t] ?? 1); } return m; }\r\nfunction dmg(power, atk, def, stab, effm) {\r\n    const raw = 0.5 * num(power, 0) * (num(atk, 1) / Math.max(1, num(def, 1))) * (stab || 1) * (effm || 1);\r\n    return Math.max(1, Math.floor(raw) + 1); // PvP rounding (+1)\r\n}\r\n\r\n// ---------------- Books ----------------\r\nfunction buildSpeciesBook(gm) {\r\n    const lists = [\r\n        gm?.pokemon, gm?.data?.pokemon, gm?.species, gm?.pokemonList, gm?.pokemonSettings\r\n    ].filter(Boolean);\r\n    const out = {};\r\n    for (const L of lists) {\r\n        for (const p of L) {\r\n            const id = normId(p.speciesId || p.pokemonId || p.templateId || p.id || p.name);\r\n            if (!id) continue;\r\n            const bs = p.baseStats || p.stats || {};\r\n            const atk = num(p.baseAttack ?? bs.atk ?? bs.attack ?? p.attack, 200);\r\n            const def = num(p.baseDefense ?? bs.def ?? bs.defense ?? p.defense, 200);\r\n            const sta = num(p.baseStamina ?? bs.sta ?? bs.stamina ?? p.stamina, 200);\r\n            const typesArr = p.types || [p.type1, p.type2].filter(Boolean);\r\n            const types = (typesArr || []).map(normType).filter(Boolean);\r\n\r\n            // Move pools from various GM flavors\r\n            const fastPool = (p.fastMoves || p.quickMoves || p.moves?.fast || p.fastMovePool || [])\r\n                .map(canonMoveId).filter(Boolean);\r\n            const chargedPool = (p.chargedMoves || p.cinematicMoves || p.moves?.charged || p.chargedMovePool || [])\r\n                .map(canonMoveId).filter(Boolean);\r\n\r\n            out[id] = { atk, def, sta, types: types.length ? types : [\"Normal\"], pool: { fast: fastPool, charged: chargedPool } };\r\n        }\r\n    }\r\n    return out;\r\n}\r\n\r\nexport function buildMoveBook(gm) {\r\n    SPECIES = buildSpeciesBook(gm);\r\n    const pools = [gm?.moves, gm?.combatMoves, gm?.data?.moves, gm?.data?.combatMoves, gm?.moveList].filter(Boolean);\r\n    const out = {};\r\n\r\n    for (const list of pools) {\r\n        for (const m of list) {\r\n            const rawId = m.moveId ?? m.id ?? m.uniqueId ?? m.templateId ?? m.name ?? \"\";\r\n            const id = canonMoveId(rawId);\r\n            if (!id) continue;\r\n\r\n            const type = normType(m.type || m.pokemonType || m.moveType) || \"Normal\";\r\n            const power = num(m.pvpPower ?? m.power ?? m.combatPower ?? m.damage, 3);\r\n\r\n            let kind = \"fast\", energyGain = 0, energyCost = 0, turns = 1;\r\n            if (m.energyDelta != null) { const ed = num(m.energyDelta, 0); if (ed > 0) { kind = \"fast\"; energyGain = ed; } if (ed < 0) { kind = \"charged\"; energyCost = Math.abs(ed); } }\r\n            if (m.energyGain != null) { kind = \"fast\"; energyGain = num(m.energyGain, 0); }\r\n            if (m.energy != null) { kind = \"charged\"; energyCost = Math.abs(num(m.energy, 0)); }\r\n            turns = num(m.durationTurns ?? m.turns ?? m.cooldownTurns, kind === \"fast\" ? 1 : 0);\r\n            if (kind === \"fast\") turns = Math.max(1, Math.floor(turns) || 1);\r\n\r\n            if (kind === \"fast\" && energyGain <= 0) { energyGain = 8; }\r\n            if (kind === \"charged\" && energyCost <= 0) { energyCost = 45; }\r\n\r\n            const mv = { id, kind, type, power, energyGain, energyCost, turns };\r\n            if (!out[id] || power > out[id].power) out[id] = mv;\r\n        }\r\n    }\r\n\r\n    // safe fallback fast move\r\n    out.TACKLE = out.TACKLE || { id: \"TACKLE\", kind: \"fast\", type: \"Normal\", power: 3, energyGain: 8, energyCost: 0, turns: 1 };\r\n\r\n    MOVES = out;\r\n    return out;\r\n}\r\n\r\n// ---------------- Move recommendations ----------------\r\nconst USER_MOVE_OVERRIDES = {\r\n    // Example override\r\n    \"dialga_origin\": { fastMove: \"DRAGON_BREATH\", chargedMoves: [\"ROAR_OF_TIME\", \"IRON_HEAD\"] },\r\n    \"dialga\": { fastMove: \"DRAGON_BREATH\", chargedMoves: [\"ROAR_OF_TIME\", \"IRON_HEAD\"] }\r\n};\r\n\r\nexport function recommendMovesFor(speciesId, leagueEntry) {\r\n    const sid = normId(speciesId);\r\n    const entry = leagueEntry || {};\r\n\r\n    // If league file already set moves, keep them\r\n    if (entry.fastMove || (entry.chargedMoves?.length)) {\r\n        return { fastMove: entry.fastMove, chargedMoves: entry.chargedMoves };\r\n    }\r\n\r\n    // User override wins\r\n    if (USER_MOVE_OVERRIDES[sid]) return USER_MOVE_OVERRIDES[sid];\r\n\r\n    // Fall back to gamemaster move pools\r\n    const sp = SPECIES[sid];\r\n    const pool = sp?.pool || {};\r\n    const fastChoices = (pool.fast || []).map((id) => MOVES[canonMoveId(id)]).filter(Boolean);\r\n    const chargedChoices = (pool.charged || []).map((id) => MOVES[canonMoveId(id)]).filter((m) => m?.energyCost > 0);\r\n\r\n    // pick fastest energy gain fast move (tiebreak power), else TACKLE\r\n    const bestFast = fastChoices\r\n        .sort((a, b) => (b.energyGain / Math.max(1, b.turns)) - (a.energyGain / Math.max(1, a.turns)) || (b.power - a.power))[0];\r\n    const fastMove = (bestFast?.id) || \"TACKLE\";\r\n\r\n    // pick a bait (lowest cost, tiebreak DPE) + a nuke (highest power)\r\n    const byCost = [...chargedChoices].sort(\r\n        (a, b) => (a.energyCost - b.energyCost) || ((b.power / Math.max(1, b.energyCost)) - (a.power / Math.max(1, a.energyCost)))\r\n    );\r\n    const bait = byCost[0];\r\n    const byNuke = [...chargedChoices].sort((a, b) => (b.power - a.power));\r\n    const nuke = byNuke[0];\r\n\r\n    const chargedMoves = Array.from(new Set([bait?.id, nuke?.id])).filter(Boolean).slice(0, 2);\r\n\r\n    return { fastMove, chargedMoves };\r\n}\r\n\r\n// ---------------- Build fighters at league cap ----------------\r\nfunction buildFighter(src, leagueName) {\r\n    const cap = capLeague(leagueName);\r\n    const sid = normId(src.speciesId || src.name);\r\n    const base = SPECIES[sid] || { atk: 200, def: 200, sta: 200, types: [\"Normal\"] };\r\n\r\n    const lvl = levelForCap(base.atk, base.def, base.sta, cap);\r\n    const cpm = CPM[lvl] || CPM[99];\r\n\r\n    const Atk = base.atk * cpm;\r\n    const Def = base.def * cpm;\r\n    const HP = Math.max(1, Math.floor(base.sta * cpm));\r\n\r\n    const fast = MOVES[canonMoveId(src.fastMove)] || MOVES.TACKLE;\r\n    const chargedMoves = (src.chargedMoves || [])\r\n        .map(canonMoveId)\r\n        .map(id => MOVES[id])\r\n        .filter(Boolean);\r\n\r\n    return {\r\n        name: src.name || src.speciesId,\r\n        speciesId: sid,\r\n        types: base.types,\r\n        Atk, Def, MaxHP: HP, HP,\r\n        fast, chargedMoves,\r\n        energy: 0,\r\n        cooldown: 0 // turns until next fast connects\r\n    };\r\n}\r\n\r\n// pick charged with highest *actual* damage vs current foe\r\nfunction bestCharged(att, def) {\r\n    let best = null, bestVal = -Infinity;\r\n    for (const m of (att.chargedMoves || [])) {\r\n        if (!m || m.kind !== \"charged\") continue;\r\n        const stab = att.types.includes(m.type) ? STAB : 1;\r\n        const mult = eff(m.type, def.types);\r\n        const val = dmg(m.power, att.Atk, def.Def, stab, mult);\r\n        if (val > bestVal) { bestVal = val; best = m; }\r\n    }\r\n    return best;\r\n}\r\n\r\n// ---------------- Simulate one duel ----------------\r\nexport function simulateDuel(attackerIn, defenderIn, shieldsA = 2, shieldsB = 2, _book = MOVES, leagueName = \"Master League\") {\r\n    const A = buildFighter(attackerIn, leagueName);\r\n    const B = buildFighter(defenderIn, leagueName);\r\n\r\n    const recA = bestCharged(A, B)?.id || null;\r\n    const recB = bestCharged(B, A)?.id || null;\r\n\r\n    let aSh = Math.max(0, shieldsA | 0), bSh = Math.max(0, shieldsB | 0);\r\n    let t = 0; const MAX_TURNS = 2000; const log = [];\r\n\r\n    function tryFast(user, foe) {\r\n        if (!user.fast) return;\r\n        user.cooldown--;\r\n        if (user.cooldown <= 0) {\r\n            // apply fast damage & energy when the move \"lands\"\r\n            const stab = user.types.includes(user.fast.type) ? STAB : 1;\r\n            const mult = eff(user.fast.type, foe.types);\r\n            const hit = dmg(user.fast.power, user.Atk, foe.Def, stab, mult);\r\n            foe.HP = Math.max(0, foe.HP - hit);\r\n            user.energy = Math.min(100, user.energy + num(user.fast.energyGain, 0));\r\n            user.cooldown = user.fast.turns; // reset cooldown\r\n        }\r\n    }\r\n\r\n    function canThrow(u) { return (u.chargedMoves || []).some(m => u.energy >= (m.energyCost || 45)); }\r\n    function chooseThrow(u, foe) {\r\n        // choose move with max actual damage that is ready\r\n        let pick = null, best = -Infinity;\r\n        for (const m of (u.chargedMoves || [])) {\r\n            if (u.energy < (m.energyCost || 45)) continue;\r\n            const stab = u.types.includes(m.type) ? STAB : 1;\r\n            const mult = eff(m.type, foe.types);\r\n            const val = dmg(m.power, u.Atk, foe.Def, stab, mult);\r\n            if (val > best) { best = val; pick = m; }\r\n        }\r\n        return pick;\r\n    }\r\n    function shouldShield(foe, incoming, shieldsLeft) {\r\n        if (shieldsLeft <= 0) return false;\r\n        const stab = foe.types.includes(incoming.type) ? STAB : 1;\r\n        const mult = eff(incoming.type, foe.types);\r\n        const hit = dmg(incoming.power, (/*att not used*/1) * foe.Atk || foe.Atk, foe.Def, stab, mult); // rough\r\n        const th = shieldsLeft === 2 ? 0.32 : 0.45; // early bait vs late conserve\r\n        return hit >= foe.HP || hit >= foe.MaxHP * th;\r\n    }\r\n\r\n    // initialize fast cooldowns so first fast lands at its \"turns\"\r\n    A.cooldown = A.fast?.turns || 1;\r\n    B.cooldown = B.fast?.turns || 1;\r\n\r\n    while (A.HP > 0 && B.HP > 0 && t < MAX_TURNS) {\r\n        t++;\r\n\r\n        // if both have a charged ready at the start of a turn, CMP decides order\r\n        const aReady = canThrow(A);\r\n        const bReady = canThrow(B);\r\n\r\n        if (aReady || bReady) {\r\n            const aFirst = aReady && (!bReady || (A.Atk >= B.Atk));\r\n\r\n            const resolve = (user, foe, who) => {\r\n                const move = chooseThrow(user, foe);\r\n                if (!move) return;\r\n                let shielded = false;\r\n                if (shouldShield(foe, move, (who === \"A\") ? bSh : aSh)) {\r\n                    if (who === \"A\") bSh--; else aSh--;\r\n                    shielded = true;\r\n                } else {\r\n                    const stab = user.types.includes(move.type) ? STAB : 1;\r\n                    const mult = eff(move.type, foe.types);\r\n                    const hit = dmg(move.power, user.Atk, foe.Def, stab, mult);\r\n                    foe.HP = Math.max(0, foe.HP - hit);\r\n                }\r\n                user.energy -= (move.energyCost || 45);\r\n                user.cooldown = user.fast?.turns || 1; // using a charged consumes the turn; fast window resets\r\n                log.push(`${who} throws ${move.id}${shielded ? \" (shielded)\" : \"\"}`);\r\n            };\r\n\r\n            if (aFirst) {\r\n                resolve(A, B, \"A\");\r\n                if (B.HP <= 0) break;\r\n                if (bReady) resolve(B, A, \"B\");\r\n                if (A.HP <= 0) break;\r\n            } else {\r\n                resolve(B, A, \"B\");\r\n                if (A.HP <= 0) break;\r\n                if (aReady) resolve(A, B, \"A\");\r\n                if (B.HP <= 0) break;\r\n            }\r\n            continue; // no fast damage on a charged-throw turn\r\n        }\r\n\r\n        // otherwise, apply fast progression this turn\r\n        tryFast(A, B);\r\n        if (B.HP <= 0) break;\r\n        tryFast(B, A);\r\n        if (A.HP <= 0) break;\r\n    }\r\n\r\n    const winner =\r\n        A.HP <= 0 && B.HP <= 0 ? \"Draw\" :\r\n            A.HP <= 0 ? B.name :\r\n                B.HP <= 0 ? A.name :\r\n                    (A.HP === B.HP ? \"Draw\" : (A.HP > B.HP ? A.name : B.name));\r\n\r\n    return {\r\n        winner,\r\n        aHP: Math.round((A.HP / A.MaxHP) * 100),\r\n        bHP: Math.round((B.HP / B.MaxHP) * 100),\r\n        aRecommended: recA,\r\n        bRecommended: recB,\r\n        summary: log.slice(0, 12)\r\n    };\r\n}\r\n\r\n// ---------------- Best-of-three wrapper (UI expects this) ----------------\r\nexport function bestOfThree(mine, enemy, myShields, foeShields, _book = MOVES, leagueName = \"Master League\") {\r\n    const fights = mine.map(m => {\r\n        const you = { ...m, name: m.name || m.speciesId };\r\n        const foe = { ...enemy, name: enemy.name || enemy.speciesId };\r\n        const r = simulateDuel(you, foe, myShields, foeShields, MOVES, leagueName);\r\n        const score = r.winner === you.name ? 1 : (r.winner === \"Draw\" ? 0 : -1);\r\n        return { you: you.name, vs: foe.name, ...r, score };\r\n    });\r\n    fights.sort((a, b) => (b.score - a.score) || (b.aHP - a.aHP) || (b.bHP - a.bHP));\r\n    return { best: fights[0], fights };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}