{"ast":null,"code":"// src/battleCalc.js\n// Adapter your App uses. Calls the battle engine and also exposes helpers:\n// - buildMoveBook (bootstrap from gamemaster)\n// - bestOfThree (UI helper)\n// - recommendMovesFor(speciesId, leagueEntry?) → {fastMove, chargedMoves}\n// - dangerMovesFor(enemySpeciesId, mySpeciesId, enemyChargedIds[]) → top 2 charged move IDs\n\nimport { simulateBattle } from \"./engine/battleEngine\";\nlet SPECIES = {};\nlet MOVES = {};\n\n// ---------------- small utils kept for compatibility ----------------\nconst num = (v, d = 0) => Number.isFinite(Number(v)) ? Number(v) : d;\nconst canonMoveId = s => String(s || \"\").trim().replace(/^COMBAT_V\\d+_MOVE_/i, \"\").replace(/^V\\d+_/i, \"\").replace(/[^A-Za-z0-9]+/g, \"_\").replace(/_+/g, \"_\").replace(/^_|_$/g, \"\").toUpperCase();\nconst normId = s => String(s || \"\").toLowerCase().replace(/[^\\w]+/g, \"_\").replace(/^_+|_+$/g, \"\");\nfunction capLeague(league) {\n  var _map$league;\n  const map = {\n    \"Great League\": 1500,\n    \"Ultra League\": 2500,\n    \"Master League\": Infinity\n  };\n  return typeof league === \"string\" ? (_map$league = map[league]) !== null && _map$league !== void 0 ? _map$league : Infinity : Number.isFinite(league) ? Number(league) : Infinity;\n}\n\n// CPM helpers\nconst CPM = [];\n(function fillCPM() {\n  const table = [0.094, 0.135137432, 0.16639787, 0.192650919, 0.21573247, 0.236572661, 0.25572005, 0.273530381, 0.29024988, 0.306057377, 0.3210876, 0.335445036, 0.34921268, 0.362457751, 0.37523559, 0.387592406, 0.39956728, 0.411193551, 0.42250001, 0.432926419, 0.44310755, 0.4530599578, 0.46279839, 0.472336083, 0.48168495, 0.4908558, 0.49985844, 0.508701765, 0.51739395, 0.525942511, 0.53435433, 0.542635767, 0.55079269, 0.558830576, 0.56675452, 0.574569153, 0.58227891, 0.589887907, 0.59740001, 0.604818814, 0.61215729, 0.619399365, 0.62656713, 0.633644533, 0.64065295, 0.647576426, 0.65443563, 0.661214806, 0.667934, 0.674577537, 0.68116492, 0.687680648, 0.69414365, 0.700538673, 0.70688421, 0.713164996, 0.71939909, 0.725571552, 0.7317, 0.734741009, 0.73776948, 0.740785574, 0.74378943, 0.746781211, 0.74976104, 0.752729087, 0.75568551, 0.758630378, 0.76156384, 0.764486065, 0.76739717, 0.770297266, 0.7731865, 0.776064962, 0.77893275, 0.781790055, 0.78463697, 0.787473578, 0.79030001, 0.792803968, 0.79530001, 0.797803921, 0.8003];\n  CPM.length = 100;\n  CPM.fill(0);\n  for (let i = 0; i < table.length; i++) CPM[i + 1] = table[i];\n})();\nfunction cp(a, d, s, c) {\n  return Math.floor(a * Math.sqrt(d) * Math.sqrt(s) * c * c / 10);\n}\nfunction levelForCap(baseAtk, baseDef, baseSta, cap) {\n  if (!isFinite(cap)) return 50;\n  let best = 1;\n  for (let i = 1; i < CPM.length; i++) {\n    const c = CPM[i];\n    if (!c) continue;\n    if (cp(baseAtk * c, baseDef * c, baseSta * c, 1) <= cap) best = i;\n  }\n  return best;\n}\n\n// ---------------- build species & moves from gamemaster ----------------\nfunction buildSpeciesBook(gm) {\n  var _gm$data;\n  const lists = [gm === null || gm === void 0 ? void 0 : gm.pokemon, gm === null || gm === void 0 ? void 0 : (_gm$data = gm.data) === null || _gm$data === void 0 ? void 0 : _gm$data.pokemon].filter(Boolean);\n  const out = {};\n  for (const L of lists) {\n    for (const p of L) {\n      var _bs$atk, _bs$def, _ref, _bs$hp;\n      const id = normId(p.speciesId || p.id || p.name);\n      const bs = p.baseStats || p.stats || {};\n      const typesArr = p.types || [p.type1, p.type2].filter(Boolean);\n      const types = (typesArr || []).map(t => String(t).replace(/^POKEMON_TYPE_/, \"\").toLowerCase()).filter(Boolean);\n      out[id] = {\n        atk: num((_bs$atk = bs.atk) !== null && _bs$atk !== void 0 ? _bs$atk : bs.attack, 200),\n        def: num((_bs$def = bs.def) !== null && _bs$def !== void 0 ? _bs$def : bs.defense, 200),\n        sta: num((_ref = (_bs$hp = bs.hp) !== null && _bs$hp !== void 0 ? _bs$hp : bs.sta) !== null && _ref !== void 0 ? _ref : bs.stamina, 200),\n        types: types.length ? types : [\"normal\"]\n      };\n    }\n  }\n  return out;\n}\nexport function buildMoveBook(gm) {\n  var _gm$data2, _gm$data3;\n  SPECIES = buildSpeciesBook(gm);\n  const pools = [gm === null || gm === void 0 ? void 0 : gm.moves, gm === null || gm === void 0 ? void 0 : (_gm$data2 = gm.data) === null || _gm$data2 === void 0 ? void 0 : _gm$data2.moves, gm === null || gm === void 0 ? void 0 : gm.combatMoves, gm === null || gm === void 0 ? void 0 : (_gm$data3 = gm.data) === null || _gm$data3 === void 0 ? void 0 : _gm$data3.combatMoves].filter(Boolean);\n  const out = {};\n  for (const list of pools) {\n    for (const m of list) {\n      var _ref2, _ref3, _ref4, _m$moveId, _ref5, _ref6, _m$pvpPower, _ref7, _m$durationTurns;\n      const id = canonMoveId((_ref2 = (_ref3 = (_ref4 = (_m$moveId = m.moveId) !== null && _m$moveId !== void 0 ? _m$moveId : m.id) !== null && _ref4 !== void 0 ? _ref4 : m.uniqueId) !== null && _ref3 !== void 0 ? _ref3 : m.templateId) !== null && _ref2 !== void 0 ? _ref2 : m.name);\n      if (!id) continue;\n      const type = String(m.type || m.pokemonType || m.moveType || \"Normal\").replace(/^POKEMON_TYPE_/, \"\").toLowerCase();\n      const power = num((_ref5 = (_ref6 = (_m$pvpPower = m.pvpPower) !== null && _m$pvpPower !== void 0 ? _m$pvpPower : m.power) !== null && _ref6 !== void 0 ? _ref6 : m.combatPower) !== null && _ref5 !== void 0 ? _ref5 : m.damage, 3);\n      let kind = \"fast\",\n        energyGain = 0,\n        energyCost = 0,\n        turns = 1;\n      if (m.energyDelta != null) {\n        const ed = num(m.energyDelta, 0);\n        if (ed > 0) {\n          kind = \"fast\";\n          energyGain = ed;\n        }\n        if (ed < 0) {\n          kind = \"charged\";\n          energyCost = Math.abs(ed);\n        }\n      }\n      if (m.energyGain != null) {\n        kind = \"fast\";\n        energyGain = num(m.energyGain, 0);\n      }\n      if (m.energy != null) {\n        kind = \"charged\";\n        energyCost = Math.abs(num(m.energy, 0));\n      }\n      turns = num((_ref7 = (_m$durationTurns = m.durationTurns) !== null && _m$durationTurns !== void 0 ? _m$durationTurns : m.turns) !== null && _ref7 !== void 0 ? _ref7 : m.cooldownTurns, kind === \"fast\" ? 1 : 0);\n      if (kind === \"fast\") turns = Math.max(1, Math.floor(turns) || 1);\n      out[id] = {\n        id,\n        kind,\n        type,\n        power,\n        energyGain,\n        energyCost,\n        turns\n      };\n    }\n  }\n  out.TACKLE ||= {\n    id: \"TACKLE\",\n    kind: \"fast\",\n    type: \"normal\",\n    power: 3,\n    energyGain: 8,\n    energyCost: 0,\n    turns: 1\n  };\n  MOVES = out;\n  return out;\n}\n\n// ---------------- move ranking helpers (danger moves) ----------------\nconst STAB = 1.2;\nconst TYPES = [\"normal\", \"fighting\", \"flying\", \"poison\", \"ground\", \"rock\", \"bug\", \"ghost\", \"steel\", \"fire\", \"water\", \"grass\", \"electric\", \"psychic\", \"ice\", \"dragon\", \"dark\", \"fairy\"];\nconst EFF = {};\nTYPES.forEach(a => {\n  EFF[a] = {};\n  TYPES.forEach(d => EFF[a][d] = 1);\n});\nfunction S(a, arr, m) {\n  arr.forEach(d => EFF[a][d] = m);\n}\n_c = S;\nS(\"fighting\", [\"normal\", \"rock\", \"ice\", \"dark\", \"steel\"], 1.6);\nS(\"fighting\", [\"flying\", \"poison\", \"bug\", \"psychic\", \"fairy\"], 0.625);\nS(\"flying\", [\"fighting\", \"bug\", \"grass\"], 1.6);\nS(\"flying\", [\"rock\", \"steel\", \"electric\"], 0.625);\nS(\"poison\", [\"grass\", \"fairy\"], 1.6);\nS(\"poison\", [\"poison\", \"ground\", \"rock\", \"ghost\"], 0.625);\nS(\"poison\", [\"steel\"], 0.390625);\nS(\"ground\", [\"poison\", \"rock\", \"steel\", \"fire\", \"electric\"], 1.6);\nS(\"ground\", [\"bug\", \"grass\"], 0.625);\nS(\"ground\", [\"flying\"], 0.390625);\nS(\"rock\", [\"flying\", \"bug\", \"fire\", \"ice\"], 1.6);\nS(\"rock\", [\"fighting\", \"ground\", \"steel\"], 0.625);\nS(\"bug\", [\"grass\", \"psychic\", \"dark\"], 1.6);\nS(\"bug\", [\"fighting\", \"flying\", \"poison\", \"ghost\", \"steel\", \"fire\", \"fairy\"], 0.625);\nS(\"ghost\", [\"ghost\", \"psychic\"], 1.6);\nS(\"ghost\", [\"dark\"], 0.625);\nS(\"steel\", [\"rock\", \"ice\", \"fairy\"], 1.6);\nS(\"steel\", [\"steel\", \"fire\", \"water\", \"electric\"], 0.625);\nS(\"fire\", [\"bug\", \"steel\", \"grass\", \"ice\"], 1.6);\nS(\"fire\", [\"rock\", \"fire\", \"water\", \"dragon\"], 0.625);\nS(\"water\", [\"ground\", \"rock\", \"fire\"], 1.6);\nS(\"water\", [\"water\", \"grass\", \"dragon\"], 0.625);\nS(\"grass\", [\"ground\", \"rock\", \"water\"], 1.6);\nS(\"grass\", [\"flying\", \"poison\", \"bug\", \"steel\", \"fire\", \"grass\", \"dragon\"], 0.625);\nS(\"electric\", [\"flying\", \"water\"], 1.6);\nS(\"electric\", [\"grass\", \"electric\", \"dragon\"], 0.625);\nS(\"electric\", [\"ground\"], 0.390625);\nS(\"psychic\", [\"fighting\", \"poison\"], 1.6);\nS(\"psychic\", [\"psychic\", \"steel\"], 0.625);\nS(\"psychic\", [\"dark\"], 0.390625);\nS(\"ice\", [\"flying\", \"ground\", \"grass\", \"dragon\"], 1.6);\nS(\"ice\", [\"steel\", \"fire\", \"water\", \"ice\"], 0.625);\nS(\"dragon\", [\"dragon\"], 1.6);\nS(\"dragon\", [\"steel\"], 0.625);\nS(\"dragon\", [\"fairy\"], 0.390625);\nS(\"dark\", [\"ghost\", \"psychic\"], 1.6);\nS(\"dark\", [\"fighting\", \"dark\", \"fairy\"], 0.625);\nS(\"fairy\", [\"fighting\", \"dragon\", \"dark\"], 1.6);\nS(\"fairy\", [\"poison\", \"steel\", \"fire\"], 0.625);\nconst eff = (type, defs) => (defs || []).reduce((m, t) => {\n  var _EFF$type$t, _EFF$type;\n  return m * ((_EFF$type$t = (_EFF$type = EFF[type]) === null || _EFF$type === void 0 ? void 0 : _EFF$type[t]) !== null && _EFF$type$t !== void 0 ? _EFF$type$t : 1);\n}, 1);\nconst dmg = (power, atk, def, stab, mult) => Math.max(1, Math.floor(0.5 * num(power, 0) * (num(atk, 1) / Math.max(1, num(def, 1))) * (stab || 1) * (mult || 1)) + 1);\n\n// ---------------- “best moves for my team” overrides ----------------\nconst USER_MOVE_OVERRIDES = {\n  \"dialga_origin\": {\n    fastMove: \"DRAGON_BREATH\",\n    chargedMoves: [\"ROAR_OF_TIME\", \"IRON_HEAD\"]\n  },\n  \"dialga\": {\n    fastMove: \"DRAGON_BREATH\",\n    chargedMoves: [\"ROAR_OF_TIME\", \"IRON_HEAD\"]\n  }\n};\nexport function recommendMovesFor(speciesId, leagueEntry) {\n  var _leagueEntry$chargedM;\n  const sid = normId(speciesId);\n  if (leagueEntry !== null && leagueEntry !== void 0 && leagueEntry.fastMove || leagueEntry !== null && leagueEntry !== void 0 && (_leagueEntry$chargedM = leagueEntry.chargedMoves) !== null && _leagueEntry$chargedM !== void 0 && _leagueEntry$chargedM.length) {\n    return {\n      fastMove: leagueEntry.fastMove,\n      chargedMoves: leagueEntry.chargedMoves\n    };\n  }\n  if (USER_MOVE_OVERRIDES[sid]) return USER_MOVE_OVERRIDES[sid];\n  return {\n    fastMove: leagueEntry === null || leagueEntry === void 0 ? void 0 : leagueEntry.fastMove,\n    chargedMoves: (leagueEntry === null || leagueEntry === void 0 ? void 0 : leagueEntry.chargedMoves) || []\n  };\n}\n\n// Rank enemy charged vs my types; return top 2 IDs\nexport function dangerMovesFor(enemySpeciesId, mySpeciesId, enemyChargedIds = []) {\n  const e = SPECIES[normId(enemySpeciesId)];\n  const me = SPECIES[normId(mySpeciesId)];\n  if (!e || !me || !(enemyChargedIds !== null && enemyChargedIds !== void 0 && enemyChargedIds.length)) return [];\n  const atk = e.atk,\n    def = me.def,\n    myTypes = me.types || [\"normal\"];\n  const scored = enemyChargedIds.map(mid => String(mid || \"\").toUpperCase()).map(id => MOVES[id]).filter(Boolean).map(m => {\n    const stab = (e.types || []).includes(m.type) ? STAB : 1;\n    const mult = eff(m.type, myTypes);\n    return {\n      id: m.id,\n      score: dmg(m.power, atk, def, stab, mult)\n    };\n  }).sort((a, b) => b.score - a.score);\n  return scored.slice(0, 2).map(x => x.id);\n}\n\n// ---------------- adapter → engine ----------------\nfunction toEngineSide(src, leagueName, shields) {\n  const cap = capLeague(leagueName);\n  const sid = (src === null || src === void 0 ? void 0 : src.speciesId) || (src === null || src === void 0 ? void 0 : src.name) || \"\";\n  const base = SPECIES[normId(sid)] || {\n    atk: 200,\n    def: 200,\n    sta: 200,\n    types: [\"normal\"]\n  };\n  const level = levelForCap(base.atk, base.def, base.sta, cap);\n  return {\n    speciesId: sid,\n    name: (src === null || src === void 0 ? void 0 : src.name) || (src === null || src === void 0 ? void 0 : src.speciesId) || sid,\n    fastMove: src === null || src === void 0 ? void 0 : src.fastMove,\n    chargedMoves: (src === null || src === void 0 ? void 0 : src.chargedMoves) || [],\n    shields: Math.max(0, shields | 0),\n    level,\n    base\n  };\n}\nexport function simulateDuel(attackerIn, defenderIn, shieldsA = 2, shieldsB = 2, _bookIgnored, leagueName = \"Master League\") {\n  const p1 = toEngineSide(attackerIn, leagueName, shieldsA);\n  const p2 = toEngineSide(defenderIn, leagueName, shieldsB);\n  const r = simulateBattle(p1, p2, MOVES);\n  return {\n    winner: r.result === \"draw\" ? \"Draw\" : r.result === \"p1\" ? attackerIn.name || attackerIn.speciesId : r.result === \"p2\" ? defenderIn.name || defenderIn.speciesId : \"Draw\",\n    aHP: r.p1.hp,\n    bHP: r.p2.hp,\n    aRecommended: r.p1Best || attackerIn.chargedMoves && attackerIn.chargedMoves[0] || null,\n    bRecommended: r.p2Best || defenderIn.chargedMoves && defenderIn.chargedMoves[0] || null,\n    summary: []\n  };\n}\nexport function bestOfThree(mine, enemy, myShields, foeShields, _bookIgnored, leagueName = \"Master League\") {\n  const fights = mine.map(m => {\n    const you = {\n      ...m,\n      name: m.name || m.speciesId\n    };\n    const foe = {\n      ...enemy,\n      name: enemy.name || enemy.speciesId\n    };\n    const r = simulateDuel(you, foe, myShields, foeShields, null, leagueName);\n    const score = r.winner === you.name ? 1 : r.winner === \"Draw\" ? 0 : -1;\n    return {\n      you: you.name,\n      vs: foe.name,\n      ...r,\n      score\n    };\n  });\n  fights.sort((a, b) => b.score - a.score || b.aHP - a.aHP || b.bHP - a.bHP);\n  return {\n    best: fights[0],\n    fights\n  };\n}\nvar _c;\n$RefreshReg$(_c, \"S\");","map":{"version":3,"names":["simulateBattle","SPECIES","MOVES","num","v","d","Number","isFinite","canonMoveId","s","String","trim","replace","toUpperCase","normId","toLowerCase","capLeague","league","_map$league","map","Infinity","CPM","fillCPM","table","length","fill","i","cp","a","c","Math","floor","sqrt","levelForCap","baseAtk","baseDef","baseSta","cap","best","buildSpeciesBook","gm","_gm$data","lists","pokemon","data","filter","Boolean","out","L","p","_bs$atk","_bs$def","_ref","_bs$hp","id","speciesId","name","bs","baseStats","stats","typesArr","types","type1","type2","t","atk","attack","def","defense","sta","hp","stamina","buildMoveBook","_gm$data2","_gm$data3","pools","moves","combatMoves","list","m","_ref2","_ref3","_ref4","_m$moveId","_ref5","_ref6","_m$pvpPower","_ref7","_m$durationTurns","moveId","uniqueId","templateId","type","pokemonType","moveType","power","pvpPower","combatPower","damage","kind","energyGain","energyCost","turns","energyDelta","ed","abs","energy","durationTurns","cooldownTurns","max","TACKLE","STAB","TYPES","EFF","forEach","S","arr","_c","eff","defs","reduce","_EFF$type$t","_EFF$type","dmg","stab","mult","USER_MOVE_OVERRIDES","fastMove","chargedMoves","recommendMovesFor","leagueEntry","_leagueEntry$chargedM","sid","dangerMovesFor","enemySpeciesId","mySpeciesId","enemyChargedIds","e","me","myTypes","scored","mid","includes","score","sort","b","slice","x","toEngineSide","src","leagueName","shields","base","level","simulateDuel","attackerIn","defenderIn","shieldsA","shieldsB","_bookIgnored","p1","p2","r","winner","result","aHP","bHP","aRecommended","p1Best","bRecommended","p2Best","summary","bestOfThree","mine","enemy","myShields","foeShields","fights","you","foe","vs","$RefreshReg$"],"sources":["C:/Users/ben/Projects/nebsojipvptrainer/src/battleCalc.js"],"sourcesContent":["// src/battleCalc.js\r\n// Adapter your App uses. Calls the battle engine and also exposes helpers:\r\n// - buildMoveBook (bootstrap from gamemaster)\r\n// - bestOfThree (UI helper)\r\n// - recommendMovesFor(speciesId, leagueEntry?) → {fastMove, chargedMoves}\r\n// - dangerMovesFor(enemySpeciesId, mySpeciesId, enemyChargedIds[]) → top 2 charged move IDs\r\n\r\nimport { simulateBattle } from \"./engine/battleEngine\";\r\n\r\nlet SPECIES = {};\r\nlet MOVES = {};\r\n\r\n// ---------------- small utils kept for compatibility ----------------\r\nconst num = (v, d = 0) => (Number.isFinite(Number(v)) ? Number(v) : d);\r\nconst canonMoveId = (s) =>\r\n    String(s || \"\")\r\n        .trim()\r\n        .replace(/^COMBAT_V\\d+_MOVE_/i, \"\")\r\n        .replace(/^V\\d+_/i, \"\")\r\n        .replace(/[^A-Za-z0-9]+/g, \"_\")\r\n        .replace(/_+/g, \"_\")\r\n        .replace(/^_|_$/g, \"\")\r\n        .toUpperCase();\r\nconst normId = (s) =>\r\n    String(s || \"\")\r\n        .toLowerCase()\r\n        .replace(/[^\\w]+/g, \"_\")\r\n        .replace(/^_+|_+$/g, \"\");\r\nfunction capLeague(league) {\r\n    const map = { \"Great League\": 1500, \"Ultra League\": 2500, \"Master League\": Infinity };\r\n    return typeof league === \"string\"\r\n        ? map[league] ?? Infinity\r\n        : Number.isFinite(league)\r\n            ? Number(league)\r\n            : Infinity;\r\n}\r\n\r\n// CPM helpers\r\nconst CPM = [];\r\n(function fillCPM() {\r\n    const table = [\r\n        0.094, 0.135137432, 0.16639787, 0.192650919, 0.21573247, 0.236572661, 0.25572005, 0.273530381,\r\n        0.29024988, 0.306057377, 0.3210876, 0.335445036, 0.34921268, 0.362457751, 0.37523559, 0.387592406,\r\n        0.39956728, 0.411193551, 0.42250001, 0.432926419, 0.44310755, 0.4530599578, 0.46279839, 0.472336083,\r\n        0.48168495, 0.4908558, 0.49985844, 0.508701765, 0.51739395, 0.525942511, 0.53435433, 0.542635767,\r\n        0.55079269, 0.558830576, 0.56675452, 0.574569153, 0.58227891, 0.589887907, 0.59740001, 0.604818814,\r\n        0.61215729, 0.619399365, 0.62656713, 0.633644533, 0.64065295, 0.647576426, 0.65443563, 0.661214806,\r\n        0.667934, 0.674577537, 0.68116492, 0.687680648, 0.69414365, 0.700538673, 0.70688421, 0.713164996,\r\n        0.71939909, 0.725571552, 0.7317, 0.734741009, 0.73776948, 0.740785574, 0.74378943, 0.746781211,\r\n        0.74976104, 0.752729087, 0.75568551, 0.758630378, 0.76156384, 0.764486065, 0.76739717, 0.770297266,\r\n        0.7731865, 0.776064962, 0.77893275, 0.781790055, 0.78463697, 0.787473578, 0.79030001, 0.792803968,\r\n        0.79530001, 0.797803921, 0.8003,\r\n    ];\r\n    CPM.length = 100;\r\n    CPM.fill(0);\r\n    for (let i = 0; i < table.length; i++) CPM[i + 1] = table[i];\r\n})();\r\nfunction cp(a, d, s, c) {\r\n    return Math.floor((a * Math.sqrt(d) * Math.sqrt(s) * c * c) / 10);\r\n}\r\nfunction levelForCap(baseAtk, baseDef, baseSta, cap) {\r\n    if (!isFinite(cap)) return 50;\r\n    let best = 1;\r\n    for (let i = 1; i < CPM.length; i++) {\r\n        const c = CPM[i];\r\n        if (!c) continue;\r\n        if (cp(baseAtk * c, baseDef * c, baseSta * c, 1) <= cap) best = i;\r\n    }\r\n    return best;\r\n}\r\n\r\n// ---------------- build species & moves from gamemaster ----------------\r\nfunction buildSpeciesBook(gm) {\r\n    const lists = [gm?.pokemon, gm?.data?.pokemon].filter(Boolean);\r\n    const out = {};\r\n    for (const L of lists) {\r\n        for (const p of L) {\r\n            const id = normId(p.speciesId || p.id || p.name);\r\n            const bs = p.baseStats || p.stats || {};\r\n            const typesArr = p.types || [p.type1, p.type2].filter(Boolean);\r\n            const types = (typesArr || [])\r\n                .map((t) => String(t).replace(/^POKEMON_TYPE_/, \"\").toLowerCase())\r\n                .filter(Boolean);\r\n            out[id] = {\r\n                atk: num(bs.atk ?? bs.attack, 200),\r\n                def: num(bs.def ?? bs.defense, 200),\r\n                sta: num(bs.hp ?? bs.sta ?? bs.stamina, 200),\r\n                types: types.length ? types : [\"normal\"],\r\n            };\r\n        }\r\n    }\r\n    return out;\r\n}\r\n\r\nexport function buildMoveBook(gm) {\r\n    SPECIES = buildSpeciesBook(gm);\r\n    const pools = [gm?.moves, gm?.data?.moves, gm?.combatMoves, gm?.data?.combatMoves].filter(Boolean);\r\n    const out = {};\r\n    for (const list of pools) {\r\n        for (const m of list) {\r\n            const id = canonMoveId(m.moveId ?? m.id ?? m.uniqueId ?? m.templateId ?? m.name);\r\n            if (!id) continue;\r\n            const type = String(m.type || m.pokemonType || m.moveType || \"Normal\")\r\n                .replace(/^POKEMON_TYPE_/, \"\")\r\n                .toLowerCase();\r\n            const power = num(m.pvpPower ?? m.power ?? m.combatPower ?? m.damage, 3);\r\n            let kind = \"fast\",\r\n                energyGain = 0,\r\n                energyCost = 0,\r\n                turns = 1;\r\n            if (m.energyDelta != null) {\r\n                const ed = num(m.energyDelta, 0);\r\n                if (ed > 0) {\r\n                    kind = \"fast\";\r\n                    energyGain = ed;\r\n                }\r\n                if (ed < 0) {\r\n                    kind = \"charged\";\r\n                    energyCost = Math.abs(ed);\r\n                }\r\n            }\r\n            if (m.energyGain != null) {\r\n                kind = \"fast\";\r\n                energyGain = num(m.energyGain, 0);\r\n            }\r\n            if (m.energy != null) {\r\n                kind = \"charged\";\r\n                energyCost = Math.abs(num(m.energy, 0));\r\n            }\r\n            turns = num(m.durationTurns ?? m.turns ?? m.cooldownTurns, kind === \"fast\" ? 1 : 0);\r\n            if (kind === \"fast\") turns = Math.max(1, Math.floor(turns) || 1);\r\n            out[id] = { id, kind, type, power, energyGain, energyCost, turns };\r\n        }\r\n    }\r\n    out.TACKLE ||= {\r\n        id: \"TACKLE\",\r\n        kind: \"fast\",\r\n        type: \"normal\",\r\n        power: 3,\r\n        energyGain: 8,\r\n        energyCost: 0,\r\n        turns: 1,\r\n    };\r\n    MOVES = out;\r\n    return out;\r\n}\r\n\r\n// ---------------- move ranking helpers (danger moves) ----------------\r\nconst STAB = 1.2;\r\nconst TYPES = [\r\n    \"normal\", \"fighting\", \"flying\", \"poison\", \"ground\", \"rock\", \"bug\", \"ghost\", \"steel\",\r\n    \"fire\", \"water\", \"grass\", \"electric\", \"psychic\", \"ice\", \"dragon\", \"dark\", \"fairy\"\r\n];\r\nconst EFF = {}; TYPES.forEach(a => { EFF[a] = {}; TYPES.forEach(d => EFF[a][d] = 1); });\r\nfunction S(a, arr, m) { arr.forEach(d => EFF[a][d] = m); }\r\nS(\"fighting\", [\"normal\", \"rock\", \"ice\", \"dark\", \"steel\"], 1.6); S(\"fighting\", [\"flying\", \"poison\", \"bug\", \"psychic\", \"fairy\"], 0.625);\r\nS(\"flying\", [\"fighting\", \"bug\", \"grass\"], 1.6); S(\"flying\", [\"rock\", \"steel\", \"electric\"], 0.625);\r\nS(\"poison\", [\"grass\", \"fairy\"], 1.6); S(\"poison\", [\"poison\", \"ground\", \"rock\", \"ghost\"], 0.625); S(\"poison\", [\"steel\"], 0.390625);\r\nS(\"ground\", [\"poison\", \"rock\", \"steel\", \"fire\", \"electric\"], 1.6); S(\"ground\", [\"bug\", \"grass\"], 0.625); S(\"ground\", [\"flying\"], 0.390625);\r\nS(\"rock\", [\"flying\", \"bug\", \"fire\", \"ice\"], 1.6); S(\"rock\", [\"fighting\", \"ground\", \"steel\"], 0.625);\r\nS(\"bug\", [\"grass\", \"psychic\", \"dark\"], 1.6); S(\"bug\", [\"fighting\", \"flying\", \"poison\", \"ghost\", \"steel\", \"fire\", \"fairy\"], 0.625);\r\nS(\"ghost\", [\"ghost\", \"psychic\"], 1.6); S(\"ghost\", [\"dark\"], 0.625);\r\nS(\"steel\", [\"rock\", \"ice\", \"fairy\"], 1.6); S(\"steel\", [\"steel\", \"fire\", \"water\", \"electric\"], 0.625);\r\nS(\"fire\", [\"bug\", \"steel\", \"grass\", \"ice\"], 1.6); S(\"fire\", [\"rock\", \"fire\", \"water\", \"dragon\"], 0.625);\r\nS(\"water\", [\"ground\", \"rock\", \"fire\"], 1.6); S(\"water\", [\"water\", \"grass\", \"dragon\"], 0.625);\r\nS(\"grass\", [\"ground\", \"rock\", \"water\"], 1.6); S(\"grass\", [\"flying\", \"poison\", \"bug\", \"steel\", \"fire\", \"grass\", \"dragon\"], 0.625);\r\nS(\"electric\", [\"flying\", \"water\"], 1.6); S(\"electric\", [\"grass\", \"electric\", \"dragon\"], 0.625); S(\"electric\", [\"ground\"], 0.390625);\r\nS(\"psychic\", [\"fighting\", \"poison\"], 1.6); S(\"psychic\", [\"psychic\", \"steel\"], 0.625); S(\"psychic\", [\"dark\"], 0.390625);\r\nS(\"ice\", [\"flying\", \"ground\", \"grass\", \"dragon\"], 1.6); S(\"ice\", [\"steel\", \"fire\", \"water\", \"ice\"], 0.625);\r\nS(\"dragon\", [\"dragon\"], 1.6); S(\"dragon\", [\"steel\"], 0.625); S(\"dragon\", [\"fairy\"], 0.390625);\r\nS(\"dark\", [\"ghost\", \"psychic\"], 1.6); S(\"dark\", [\"fighting\", \"dark\", \"fairy\"], 0.625);\r\nS(\"fairy\", [\"fighting\", \"dragon\", \"dark\"], 1.6); S(\"fairy\", [\"poison\", \"steel\", \"fire\"], 0.625);\r\n\r\nconst eff = (type, defs) => (defs || []).reduce((m, t) => m * (EFF[type]?.[t] ?? 1), 1);\r\nconst dmg = (power, atk, def, stab, mult) =>\r\n    Math.max(1, Math.floor(0.5 * num(power, 0) * (num(atk, 1) / Math.max(1, num(def, 1))) * (stab || 1) * (mult || 1)) + 1);\r\n\r\n// ---------------- “best moves for my team” overrides ----------------\r\nconst USER_MOVE_OVERRIDES = {\r\n    \"dialga_origin\": { fastMove: \"DRAGON_BREATH\", chargedMoves: [\"ROAR_OF_TIME\", \"IRON_HEAD\"] },\r\n    \"dialga\": { fastMove: \"DRAGON_BREATH\", chargedMoves: [\"ROAR_OF_TIME\", \"IRON_HEAD\"] },\r\n};\r\n\r\nexport function recommendMovesFor(speciesId, leagueEntry) {\r\n    const sid = normId(speciesId);\r\n    if (leagueEntry?.fastMove || (leagueEntry?.chargedMoves?.length)) {\r\n        return { fastMove: leagueEntry.fastMove, chargedMoves: leagueEntry.chargedMoves };\r\n    }\r\n    if (USER_MOVE_OVERRIDES[sid]) return USER_MOVE_OVERRIDES[sid];\r\n    return { fastMove: leagueEntry?.fastMove, chargedMoves: leagueEntry?.chargedMoves || [] };\r\n}\r\n\r\n// Rank enemy charged vs my types; return top 2 IDs\r\nexport function dangerMovesFor(enemySpeciesId, mySpeciesId, enemyChargedIds = []) {\r\n    const e = SPECIES[normId(enemySpeciesId)];\r\n    const me = SPECIES[normId(mySpeciesId)];\r\n    if (!e || !me || !enemyChargedIds?.length) return [];\r\n\r\n    const atk = e.atk, def = me.def, myTypes = me.types || [\"normal\"];\r\n    const scored = enemyChargedIds\r\n        .map((mid) => String(mid || \"\").toUpperCase())\r\n        .map((id) => MOVES[id])\r\n        .filter(Boolean)\r\n        .map((m) => {\r\n            const stab = (e.types || []).includes(m.type) ? STAB : 1;\r\n            const mult = eff(m.type, myTypes);\r\n            return { id: m.id, score: dmg(m.power, atk, def, stab, mult) };\r\n        })\r\n        .sort((a, b) => b.score - a.score);\r\n\r\n    return scored.slice(0, 2).map((x) => x.id);\r\n}\r\n\r\n// ---------------- adapter → engine ----------------\r\nfunction toEngineSide(src, leagueName, shields) {\r\n    const cap = capLeague(leagueName);\r\n    const sid = src?.speciesId || src?.name || \"\";\r\n    const base = SPECIES[normId(sid)] || { atk: 200, def: 200, sta: 200, types: [\"normal\"] };\r\n    const level = levelForCap(base.atk, base.def, base.sta, cap);\r\n    return {\r\n        speciesId: sid,\r\n        name: src?.name || src?.speciesId || sid,\r\n        fastMove: src?.fastMove,\r\n        chargedMoves: src?.chargedMoves || [],\r\n        shields: Math.max(0, shields | 0),\r\n        level,\r\n        base,\r\n    };\r\n}\r\n\r\nexport function simulateDuel(attackerIn, defenderIn, shieldsA = 2, shieldsB = 2, _bookIgnored, leagueName = \"Master League\") {\r\n    const p1 = toEngineSide(attackerIn, leagueName, shieldsA);\r\n    const p2 = toEngineSide(defenderIn, leagueName, shieldsB);\r\n    const r = simulateBattle(p1, p2, MOVES);\r\n\r\n    return {\r\n        winner:\r\n            r.result === \"draw\" ? \"Draw\" :\r\n                r.result === \"p1\" ? (attackerIn.name || attackerIn.speciesId) :\r\n                    r.result === \"p2\" ? (defenderIn.name || defenderIn.speciesId) : \"Draw\",\r\n        aHP: r.p1.hp,\r\n        bHP: r.p2.hp,\r\n        aRecommended: r.p1Best || (attackerIn.chargedMoves && attackerIn.chargedMoves[0]) || null,\r\n        bRecommended: r.p2Best || (defenderIn.chargedMoves && defenderIn.chargedMoves[0]) || null,\r\n        summary: [],\r\n    };\r\n}\r\n\r\nexport function bestOfThree(mine, enemy, myShields, foeShields, _bookIgnored, leagueName = \"Master League\") {\r\n    const fights = mine.map(m => {\r\n        const you = { ...m, name: m.name || m.speciesId };\r\n        const foe = { ...enemy, name: enemy.name || enemy.speciesId };\r\n        const r = simulateDuel(you, foe, myShields, foeShields, null, leagueName);\r\n        const score = r.winner === you.name ? 1 : (r.winner === \"Draw\" ? 0 : -1);\r\n        return { you: you.name, vs: foe.name, ...r, score };\r\n    });\r\n    fights.sort((a, b) => (b.score - a.score) || (b.aHP - a.aHP) || (b.bHP - a.bHP));\r\n    return { best: fights[0], fights };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}