{"ast":null,"code":"// src/battleCalc.js\n// Thin wrapper around PokemonBattle.simulateBattle with SAFE parsing.\n// Also provides tiny move recommendations and the old bestOfThree shape.\n\nimport simulateBattle from \"./PokemonBattle\";\n\n/* ---------------- shared helpers ---------------- */\nconst num = (v, d = 0) => Number.isFinite(+v) ? +v : d;\n\n// Normalize any entry into atk/def/sta regardless of shape.\nfunction coerceStats(entry = {}) {\n  var _ref, _ref2, _ref3, _s$attack, _ref4, _ref5, _ref6, _s$defense, _ref7, _ref8, _ref9, _ref0, _s$stamina;\n  const s = entry.stats || entry.baseStats || entry.base || {};\n  const atk = num((_ref = (_ref2 = (_ref3 = (_s$attack = s.attack) !== null && _s$attack !== void 0 ? _s$attack : s.atk) !== null && _ref3 !== void 0 ? _ref3 : entry.attack) !== null && _ref2 !== void 0 ? _ref2 : entry.atk) !== null && _ref !== void 0 ? _ref : entry.baseAttack, 200);\n  const def = num((_ref4 = (_ref5 = (_ref6 = (_s$defense = s.defense) !== null && _s$defense !== void 0 ? _s$defense : s.def) !== null && _ref6 !== void 0 ? _ref6 : entry.defense) !== null && _ref5 !== void 0 ? _ref5 : entry.def) !== null && _ref4 !== void 0 ? _ref4 : entry.baseDefense, 200);\n  const sta = num((_ref7 = (_ref8 = (_ref9 = (_ref0 = (_s$stamina = s.stamina) !== null && _s$stamina !== void 0 ? _s$stamina : s.sta) !== null && _ref0 !== void 0 ? _ref0 : s.hp) !== null && _ref9 !== void 0 ? _ref9 : entry.stamina) !== null && _ref8 !== void 0 ? _ref8 : entry.sta) !== null && _ref7 !== void 0 ? _ref7 : entry.baseStamina, 200);\n  return {\n    atk,\n    def,\n    sta\n  };\n}\n\n// Ensure we always have a usable fast and at least one charged move.\n// Accepts either strings or objects and normalizes to the simple form\n// expected by PokemonBattle (id/type/power/energyGain/energyCost/turns).\nfunction normalizeFast(entry = {}) {\n  var _ref1, _fm$power, _fm$energyGain, _ref10, _fm$turns;\n  // Prefer already-normalized\n  if (entry.fast && typeof entry.fast === \"object\") return entry.fast;\n\n  // From simple fields\n  if (typeof entry.fastMove === \"string\") return {\n    id: entry.fastMove,\n    type: entry.fastType || \"Normal\",\n    power: num(entry.fastPower, 3),\n    energyGain: num(entry.fastEnergyGain, 8),\n    turns: num(entry.fastTurns, 1),\n    kind: \"fast\"\n  };\n\n  // From arrays\n  const fm = Array.isArray(entry.fastMoves) ? entry.fastMoves[0] : null;\n  if (fm && typeof fm === \"object\") return {\n    id: fm.id || fm.moveId || fm.name || \"TACKLE\",\n    type: fm.type || fm.moveType || \"Normal\",\n    power: num((_ref1 = (_fm$power = fm.power) !== null && _fm$power !== void 0 ? _fm$power : fm.pvpPower) !== null && _ref1 !== void 0 ? _ref1 : fm.combatPower, 3),\n    energyGain: num((_fm$energyGain = fm.energyGain) !== null && _fm$energyGain !== void 0 ? _fm$energyGain : fm.energyDelta > 0 ? fm.energyDelta : 8, 8),\n    turns: num((_ref10 = (_fm$turns = fm.turns) !== null && _fm$turns !== void 0 ? _fm$turns : fm.durationTurns) !== null && _ref10 !== void 0 ? _ref10 : 1, 1),\n    kind: \"fast\"\n  };\n  if (typeof fm === \"string\") return {\n    id: fm,\n    type: \"Normal\",\n    power: 3,\n    energyGain: 8,\n    turns: 1,\n    kind: \"fast\"\n  };\n\n  // Fallback\n  return {\n    id: \"TACKLE\",\n    type: \"Normal\",\n    power: 3,\n    energyGain: 8,\n    turns: 1,\n    kind: \"fast\"\n  };\n}\nfunction normalizeCharged(entry = {}) {\n  const src = Array.isArray(entry.chargedMoves) ? entry.chargedMoves : [];\n  const out = [];\n  for (const m of src) {\n    if (!m) continue;\n    if (typeof m === \"string\") {\n      out.push({\n        id: m,\n        type: \"Normal\",\n        power: 90,\n        energyCost: 45,\n        kind: \"charged\"\n      });\n    } else {\n      var _ref11, _m$power, _ref12, _m$energyCost;\n      out.push({\n        id: m.id || m.moveId || m.name || \"UNKNOWN\",\n        type: m.type || m.moveType || \"Normal\",\n        power: num((_ref11 = (_m$power = m.power) !== null && _m$power !== void 0 ? _m$power : m.pvpPower) !== null && _ref11 !== void 0 ? _ref11 : m.combatPower, 90),\n        energyCost: num((_ref12 = (_m$energyCost = m.energyCost) !== null && _m$energyCost !== void 0 ? _m$energyCost : m.energy) !== null && _ref12 !== void 0 ? _ref12 : Math.abs(m.energyDelta), 45),\n        kind: \"charged\"\n      });\n    }\n  }\n  if (!out.length) out.push({\n    id: \"GENERIC_CHARGED\",\n    type: \"Normal\",\n    power: 90,\n    energyCost: 45,\n    kind: \"charged\"\n  });\n  return out;\n}\n\n// Our app used to call this to “fill in best moves”.\n// Keep it simple: if entry already has moves, keep them; otherwise fall back to\n// a very safe default so the engine never crashes.\nexport function recommendMovesFor(_speciesId, entry = {}) {\n  return {\n    fast: normalizeFast(entry),\n    chargedMoves: normalizeCharged(entry)\n  };\n}\n\n/* ---------------- public API used by App ---------------- */\n\n// No-op here, but keep the signature the app expects.\n// (If you later want to parse the GM here, you still can.)\nexport function buildMoveBook(_gm) {\n  return true;\n}\n\n// Simulate one duel via PokemonBattle.simulateBattle.\n// Accepts your/foe entries in *any* shape and sends only normalized objects to the engine.\nexport function simulateDuel(attackerIn, defenderIn, shieldsA = 2, shieldsB = 2) {\n  // Normalize “you”\n  const aStats = coerceStats(attackerIn);\n  const you = {\n    name: attackerIn.name || attackerIn.speciesId || \"You\",\n    types: attackerIn.types || attackerIn.type || [],\n    // The engine will re-read stats defensively as well, but we include them here\n    stats: {\n      attack: aStats.atk,\n      defense: aStats.def,\n      stamina: aStats.sta\n    },\n    fast: normalizeFast(attackerIn),\n    chargedMoves: normalizeCharged(attackerIn)\n  };\n\n  // Normalize “foe”\n  const bStats = coerceStats(defenderIn);\n  const foe = {\n    name: defenderIn.name || defenderIn.speciesId || \"Foe\",\n    types: defenderIn.types || defenderIn.type || [],\n    stats: {\n      attack: bStats.atk,\n      defense: bStats.def,\n      stamina: bStats.sta\n    },\n    fast: normalizeFast(defenderIn),\n    chargedMoves: normalizeCharged(defenderIn)\n  };\n\n  // Run the engine (it is also defensive)\n  return simulateBattle(you, foe, shieldsA, shieldsB);\n}\n\n// App expects { best, fights } where each fight has you/vs/winner/aHP/bHP etc.\nexport function bestOfThree(mine, enemy, myShields = 2, foeShields = 2) {\n  const fights = (mine || []).map(m => {\n    const youName = m.name || m.speciesId || \"You\";\n    const foeName = enemy.name || enemy.speciesId || \"Foe\";\n    const r = simulateDuel(m, enemy, myShields, foeShields);\n    const score = r.winner === youName ? 1 : r.winner === \"Draw\" ? 0 : -1;\n    return {\n      you: youName,\n      vs: foeName,\n      ...r,\n      score\n    };\n  });\n  fights.sort((a, b) => b.score - a.score || b.aHP - a.aHP || b.bHP - a.bHP);\n  return {\n    best: fights[0] || null,\n    fights\n  };\n}","map":{"version":3,"names":["simulateBattle","num","v","d","Number","isFinite","coerceStats","entry","_ref","_ref2","_ref3","_s$attack","_ref4","_ref5","_ref6","_s$defense","_ref7","_ref8","_ref9","_ref0","_s$stamina","s","stats","baseStats","base","atk","attack","baseAttack","def","defense","baseDefense","sta","stamina","hp","baseStamina","normalizeFast","_ref1","_fm$power","_fm$energyGain","_ref10","_fm$turns","fast","fastMove","id","type","fastType","power","fastPower","energyGain","fastEnergyGain","turns","fastTurns","kind","fm","Array","isArray","fastMoves","moveId","name","moveType","pvpPower","combatPower","energyDelta","durationTurns","normalizeCharged","src","chargedMoves","out","m","push","energyCost","_ref11","_m$power","_ref12","_m$energyCost","energy","Math","abs","length","recommendMovesFor","_speciesId","buildMoveBook","_gm","simulateDuel","attackerIn","defenderIn","shieldsA","shieldsB","aStats","you","speciesId","types","bStats","foe","bestOfThree","mine","enemy","myShields","foeShields","fights","map","youName","foeName","r","score","winner","vs","sort","a","b","aHP","bHP","best"],"sources":["C:/Users/ben/Projects/nebsojipvptrainer/src/battleCalc.js"],"sourcesContent":["// src/battleCalc.js\r\n// Thin wrapper around PokemonBattle.simulateBattle with SAFE parsing.\r\n// Also provides tiny move recommendations and the old bestOfThree shape.\r\n\r\nimport simulateBattle from \"./PokemonBattle\";\r\n\r\n/* ---------------- shared helpers ---------------- */\r\nconst num = (v, d = 0) => (Number.isFinite(+v) ? +v : d);\r\n\r\n// Normalize any entry into atk/def/sta regardless of shape.\r\nfunction coerceStats(entry = {}) {\r\n    const s = entry.stats || entry.baseStats || entry.base || {};\r\n    const atk = num(s.attack ?? s.atk ?? entry.attack ?? entry.atk ?? entry.baseAttack, 200);\r\n    const def = num(s.defense ?? s.def ?? entry.defense ?? entry.def ?? entry.baseDefense, 200);\r\n    const sta = num(\r\n        s.stamina ?? s.sta ?? s.hp ?? entry.stamina ?? entry.sta ?? entry.baseStamina,\r\n        200\r\n    );\r\n    return { atk, def, sta };\r\n}\r\n\r\n// Ensure we always have a usable fast and at least one charged move.\r\n// Accepts either strings or objects and normalizes to the simple form\r\n// expected by PokemonBattle (id/type/power/energyGain/energyCost/turns).\r\nfunction normalizeFast(entry = {}) {\r\n    // Prefer already-normalized\r\n    if (entry.fast && typeof entry.fast === \"object\") return entry.fast;\r\n\r\n    // From simple fields\r\n    if (typeof entry.fastMove === \"string\")\r\n        return {\r\n            id: entry.fastMove,\r\n            type: entry.fastType || \"Normal\",\r\n            power: num(entry.fastPower, 3),\r\n            energyGain: num(entry.fastEnergyGain, 8),\r\n            turns: num(entry.fastTurns, 1),\r\n            kind: \"fast\",\r\n        };\r\n\r\n    // From arrays\r\n    const fm = Array.isArray(entry.fastMoves) ? entry.fastMoves[0] : null;\r\n    if (fm && typeof fm === \"object\")\r\n        return {\r\n            id: fm.id || fm.moveId || fm.name || \"TACKLE\",\r\n            type: fm.type || fm.moveType || \"Normal\",\r\n            power: num(fm.power ?? fm.pvpPower ?? fm.combatPower, 3),\r\n            energyGain: num(fm.energyGain ?? (fm.energyDelta > 0 ? fm.energyDelta : 8), 8),\r\n            turns: num(fm.turns ?? fm.durationTurns ?? 1, 1),\r\n            kind: \"fast\",\r\n        };\r\n    if (typeof fm === \"string\")\r\n        return { id: fm, type: \"Normal\", power: 3, energyGain: 8, turns: 1, kind: \"fast\" };\r\n\r\n    // Fallback\r\n    return { id: \"TACKLE\", type: \"Normal\", power: 3, energyGain: 8, turns: 1, kind: \"fast\" };\r\n}\r\n\r\nfunction normalizeCharged(entry = {}) {\r\n    const src = Array.isArray(entry.chargedMoves) ? entry.chargedMoves : [];\r\n    const out = [];\r\n\r\n    for (const m of src) {\r\n        if (!m) continue;\r\n        if (typeof m === \"string\") {\r\n            out.push({ id: m, type: \"Normal\", power: 90, energyCost: 45, kind: \"charged\" });\r\n        } else {\r\n            out.push({\r\n                id: m.id || m.moveId || m.name || \"UNKNOWN\",\r\n                type: m.type || m.moveType || \"Normal\",\r\n                power: num(m.power ?? m.pvpPower ?? m.combatPower, 90),\r\n                energyCost: num(m.energyCost ?? m.energy ?? Math.abs(m.energyDelta), 45),\r\n                kind: \"charged\",\r\n            });\r\n        }\r\n    }\r\n\r\n    if (!out.length) out.push({ id: \"GENERIC_CHARGED\", type: \"Normal\", power: 90, energyCost: 45, kind: \"charged\" });\r\n    return out;\r\n}\r\n\r\n// Our app used to call this to “fill in best moves”.\r\n// Keep it simple: if entry already has moves, keep them; otherwise fall back to\r\n// a very safe default so the engine never crashes.\r\nexport function recommendMovesFor(_speciesId, entry = {}) {\r\n    return {\r\n        fast: normalizeFast(entry),\r\n        chargedMoves: normalizeCharged(entry),\r\n    };\r\n}\r\n\r\n/* ---------------- public API used by App ---------------- */\r\n\r\n// No-op here, but keep the signature the app expects.\r\n// (If you later want to parse the GM here, you still can.)\r\nexport function buildMoveBook(_gm) {\r\n    return true;\r\n}\r\n\r\n// Simulate one duel via PokemonBattle.simulateBattle.\r\n// Accepts your/foe entries in *any* shape and sends only normalized objects to the engine.\r\nexport function simulateDuel(attackerIn, defenderIn, shieldsA = 2, shieldsB = 2) {\r\n    // Normalize “you”\r\n    const aStats = coerceStats(attackerIn);\r\n    const you = {\r\n        name: attackerIn.name || attackerIn.speciesId || \"You\",\r\n        types: attackerIn.types || attackerIn.type || [],\r\n        // The engine will re-read stats defensively as well, but we include them here\r\n        stats: { attack: aStats.atk, defense: aStats.def, stamina: aStats.sta },\r\n        fast: normalizeFast(attackerIn),\r\n        chargedMoves: normalizeCharged(attackerIn),\r\n    };\r\n\r\n    // Normalize “foe”\r\n    const bStats = coerceStats(defenderIn);\r\n    const foe = {\r\n        name: defenderIn.name || defenderIn.speciesId || \"Foe\",\r\n        types: defenderIn.types || defenderIn.type || [],\r\n        stats: { attack: bStats.atk, defense: bStats.def, stamina: bStats.sta },\r\n        fast: normalizeFast(defenderIn),\r\n        chargedMoves: normalizeCharged(defenderIn),\r\n    };\r\n\r\n    // Run the engine (it is also defensive)\r\n    return simulateBattle(you, foe, shieldsA, shieldsB);\r\n}\r\n\r\n// App expects { best, fights } where each fight has you/vs/winner/aHP/bHP etc.\r\nexport function bestOfThree(mine, enemy, myShields = 2, foeShields = 2) {\r\n    const fights = (mine || []).map((m) => {\r\n        const youName = m.name || m.speciesId || \"You\";\r\n        const foeName = enemy.name || enemy.speciesId || \"Foe\";\r\n        const r = simulateDuel(m, enemy, myShields, foeShields);\r\n        const score = r.winner === youName ? 1 : (r.winner === \"Draw\" ? 0 : -1);\r\n        return { you: youName, vs: foeName, ...r, score };\r\n    });\r\n\r\n    fights.sort((a, b) => (b.score - a.score) || (b.aHP - a.aHP) || (b.bHP - a.bHP));\r\n    return { best: fights[0] || null, fights };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}