{"ast":null,"code":"// src/PokemonBattle.js\n// Small, resilient PvP-lite simulator with defensive stat parsing.\n// Exports both a named and default function: simulateBattle\n\n/* ----------------- helpers ----------------- */\nconst num = (v, d = 0) => Number.isFinite(+v) ? +v : d;\n\n// Try to pull atk/def/sta regardless of how league/GM shaped them.\nfunction coerceStats(src = {}) {\n  var _ref, _ref2, _ref3, _s$attack, _ref4, _ref5, _ref6, _s$defense, _ref7, _ref8, _ref9, _ref0, _s$stamina;\n  const s = src.stats || src.baseStats || src.base || {};\n  const atk = num((_ref = (_ref2 = (_ref3 = (_s$attack = s.attack) !== null && _s$attack !== void 0 ? _s$attack : s.atk) !== null && _ref3 !== void 0 ? _ref3 : src.attack) !== null && _ref2 !== void 0 ? _ref2 : src.atk) !== null && _ref !== void 0 ? _ref : src.baseAttack, 200);\n  const def = num((_ref4 = (_ref5 = (_ref6 = (_s$defense = s.defense) !== null && _s$defense !== void 0 ? _s$defense : s.def) !== null && _ref6 !== void 0 ? _ref6 : src.defense) !== null && _ref5 !== void 0 ? _ref5 : src.def) !== null && _ref4 !== void 0 ? _ref4 : src.baseDefense, 200);\n  const sta = num((_ref7 = (_ref8 = (_ref9 = (_ref0 = (_s$stamina = s.stamina) !== null && _s$stamina !== void 0 ? _s$stamina : s.sta) !== null && _ref0 !== void 0 ? _ref0 : s.hp) !== null && _ref9 !== void 0 ? _ref9 : src.stamina) !== null && _ref8 !== void 0 ? _ref8 : src.sta) !== null && _ref7 !== void 0 ? _ref7 : src.baseStamina, 200);\n  return {\n    atk,\n    def,\n    sta\n  };\n}\nfunction pickFast(src = {}) {\n  // Accepts either {fastMove: \"XXX\"} or {fast: {id:...}} or raw GM keys\n  if (src.fast && typeof src.fast === \"object\") return src.fast;\n  if (src.fastMove && typeof src.fastMove === \"string\") return {\n    id: src.fastMove,\n    power: num(src.fastPower, 3),\n    energyGain: num(src.fastEnergyGain, 8),\n    turns: num(src.fastTurns, 1),\n    type: src.fastType || \"Normal\",\n    kind: \"fast\"\n  };\n  // As a last resort, use TACKLE-like default so we never crash\n  return {\n    id: \"TACKLE\",\n    power: 3,\n    energyGain: 8,\n    turns: 1,\n    type: \"Normal\",\n    kind: \"fast\"\n  };\n}\nfunction pickChargedArray(src = {}) {\n  // Accepts {chargedMoves: [\"A\",\"B\"]} or {chargedMoves: [{...}]}\n  const list = Array.isArray(src.chargedMoves) ? src.chargedMoves : [];\n  const out = [];\n  for (const m of list) {\n    if (!m) continue;\n    if (typeof m === \"string\") {\n      out.push({\n        id: m,\n        energyCost: num(src[`${m}_energy`], 45),\n        power: num(src[`${m}_power`], 90),\n        type: src[`${m}_type`] || \"Normal\",\n        kind: \"charged\"\n      });\n    } else {\n      var _ref1, _m$energyCost, _ref10, _m$power;\n      out.push({\n        id: m.id || m.moveId || \"UNKNOWN\",\n        energyCost: num((_ref1 = (_m$energyCost = m.energyCost) !== null && _m$energyCost !== void 0 ? _m$energyCost : m.energy) !== null && _ref1 !== void 0 ? _ref1 : Math.abs(m.energyDelta), 45),\n        power: num((_ref10 = (_m$power = m.power) !== null && _m$power !== void 0 ? _m$power : m.pvpPower) !== null && _ref10 !== void 0 ? _ref10 : m.combatPower, 90),\n        type: m.type || m.moveType || \"Normal\",\n        kind: \"charged\"\n      });\n    }\n  }\n  // Always have something so the UI can show a recommendation\n  if (!out.length) out.push({\n    id: \"GENERIC_CHARGED\",\n    energyCost: 45,\n    power: 90,\n    type: \"Normal\",\n    kind: \"charged\"\n  });\n  return out;\n}\n\n/* -------- tiny type chart (enough for relative scoring) -------- */\nconst TYPES = [\"Normal\", \"Fighting\", \"Flying\", \"Poison\", \"Ground\", \"Rock\", \"Bug\", \"Ghost\", \"Steel\", \"Fire\", \"Water\", \"Grass\", \"Electric\", \"Psychic\", \"Ice\", \"Dragon\", \"Dark\", \"Fairy\"];\nconst EFF = {};\nfor (const a of TYPES) {\n  EFF[a] = {};\n  for (const d of TYPES) EFF[a][d] = 1;\n}\nfunction S(atk, arr, m) {\n  for (const d of arr) EFF[atk][d] = m;\n}\n// (same mappings as earlier lite engine)\n_c = S;\nS(\"Fighting\", [\"Normal\", \"Rock\", \"Ice\", \"Dark\", \"Steel\"], 1.6);\nS(\"Fighting\", [\"Flying\", \"Poison\", \"Bug\", \"Psychic\", \"Fairy\"], 0.625);\nS(\"Flying\", [\"Fighting\", \"Bug\", \"Grass\"], 1.6);\nS(\"Flying\", [\"Rock\", \"Steel\", \"Electric\"], 0.625);\nS(\"Poison\", [\"Grass\", \"Fairy\"], 1.6);\nS(\"Poison\", [\"Poison\", \"Ground\", \"Rock\", \"Ghost\"], 0.625);\nS(\"Poison\", [\"Steel\"], 0.390625);\nS(\"Ground\", [\"Poison\", \"Rock\", \"Steel\", \"Fire\", \"Electric\"], 1.6);\nS(\"Ground\", [\"Bug\", \"Grass\"], 0.625);\nS(\"Ground\", [\"Flying\"], 0.390625);\nS(\"Rock\", [\"Flying\", \"Bug\", \"Fire\", \"Ice\"], 1.6);\nS(\"Rock\", [\"Fighting\", \"Ground\", \"Steel\"], 0.625);\nS(\"Bug\", [\"Grass\", \"Psychic\", \"Dark\"], 1.6);\nS(\"Bug\", [\"Fighting\", \"Flying\", \"Poison\", \"Ghost\", \"Steel\", \"Fire\", \"Fairy\"], 0.625);\nS(\"Ghost\", [\"Ghost\", \"Psychic\"], 1.6);\nS(\"Ghost\", [\"Dark\"], 0.625);\nS(\"Steel\", [\"Rock\", \"Ice\", \"Fairy\"], 1.6);\nS(\"Steel\", [\"Steel\", \"Fire\", \"Water\", \"Electric\"], 0.625);\nS(\"Fire\", [\"Bug\", \"Steel\", \"Grass\", \"Ice\"], 1.6);\nS(\"Fire\", [\"Rock\", \"Fire\", \"Water\", \"Dragon\"], 0.625);\nS(\"Water\", [\"Ground\", \"Rock\", \"Fire\"], 1.6);\nS(\"Water\", [\"Water\", \"Grass\", \"Dragon\"], 0.625);\nS(\"Grass\", [\"Ground\", \"Rock\", \"Water\"], 1.6);\nS(\"Grass\", [\"Flying\", \"Poison\", \"Bug\", \"Steel\", \"Fire\", \"Grass\", \"Dragon\"], 0.625);\nS(\"Electric\", [\"Flying\", \"Water\"], 1.6);\nS(\"Electric\", [\"Grass\", \"Electric\", \"Dragon\"], 0.625);\nS(\"Electric\", [\"Ground\"], 0.390625);\nS(\"Psychic\", [\"Fighting\", \"Poison\"], 1.6);\nS(\"Psychic\", [\"Psychic\", \"Steel\"], 0.625);\nS(\"Psychic\", [\"Dark\"], 0.390625);\nS(\"Ice\", [\"Flying\", \"Ground\", \"Grass\", \"Dragon\"], 1.6);\nS(\"Ice\", [\"Steel\", \"Fire\", \"Water\", \"Ice\"], 0.625);\nS(\"Dragon\", [\"Dragon\"], 1.6);\nS(\"Dragon\", [\"Steel\"], 0.625);\nS(\"Dragon\", [\"Fairy\"], 0.390625);\nS(\"Dark\", [\"Ghost\", \"Psychic\"], 1.6);\nS(\"Dark\", [\"Fighting\", \"Dark\", \"Fairy\"], 0.625);\nS(\"Fairy\", [\"Fighting\", \"Dragon\", \"Dark\"], 1.6);\nS(\"Fairy\", [\"Poison\", \"Steel\", \"Fire\"], 0.625);\nconst STAB = 1.2;\nconst eff = (type, defendTypes = []) => (defendTypes || []).reduce((m, t) => {\n  var _EFF$type$t, _EFF$type;\n  return m * ((_EFF$type$t = (_EFF$type = EFF[type]) === null || _EFF$type === void 0 ? void 0 : _EFF$type[t]) !== null && _EFF$type$t !== void 0 ? _EFF$type$t : 1);\n}, 1);\nconst dmg = (power, atk, def, stab, effm) => Math.max(1, Math.floor(0.5 * num(power, 0) * (num(atk, 1) / Math.max(1, num(def, 1))) * (stab || 1) * (effm || 1)) + 1);\n\n/* ----------------- simulator ----------------- */\nexport function simulateBattle(attackerSrc = {}, defenderSrc = {}, shieldsA = 2, shieldsB = 2) {\n  var _bestCharged, _bestCharged2, _A$fast, _B$fast;\n  // 1) Normalize fighters\n  const Astats = coerceStats(attackerSrc);\n  const Bstats = coerceStats(defenderSrc);\n  const A = {\n    name: attackerSrc.name || attackerSrc.speciesId || \"You\",\n    types: attackerSrc.types || attackerSrc.type || [],\n    Atk: Astats.atk,\n    Def: Bstats.def ? Astats.def : Astats.def,\n    // keep shape; (typo-safe fallback)\n    MaxHP: Math.max(1, Math.floor(Astats.sta)),\n    HP: Math.max(1, Math.floor(Astats.sta)),\n    fast: pickFast(attackerSrc),\n    chargedMoves: pickChargedArray(attackerSrc),\n    energy: 0,\n    cooldown: 0\n  };\n  const B = {\n    name: defenderSrc.name || defenderSrc.speciesId || \"Foe\",\n    types: defenderSrc.types || defenderSrc.type || [],\n    Atk: Bstats.atk,\n    Def: Bstats.def,\n    MaxHP: Math.max(1, Math.floor(Bstats.sta)),\n    HP: Math.max(1, Math.floor(Bstats.sta)),\n    fast: pickFast(defenderSrc),\n    chargedMoves: pickChargedArray(defenderSrc),\n    energy: 0,\n    cooldown: 0\n  };\n\n  // If something still came in broken, just bail gracefully\n  if (!A.MaxHP || !B.MaxHP) {\n    var _A$chargedMoves, _A$chargedMoves$, _B$chargedMoves, _B$chargedMoves$;\n    return {\n      winner: \"Draw\",\n      aHP: 0,\n      bHP: 0,\n      aRecommended: ((_A$chargedMoves = A.chargedMoves) === null || _A$chargedMoves === void 0 ? void 0 : (_A$chargedMoves$ = _A$chargedMoves[0]) === null || _A$chargedMoves$ === void 0 ? void 0 : _A$chargedMoves$.id) || null,\n      bRecommended: ((_B$chargedMoves = B.chargedMoves) === null || _B$chargedMoves === void 0 ? void 0 : (_B$chargedMoves$ = _B$chargedMoves[0]) === null || _B$chargedMoves$ === void 0 ? void 0 : _B$chargedMoves$.id) || null,\n      summary: [\"Invalid stats; treating as draw.\"]\n    };\n  }\n\n  // Pre-compute �recommended� by raw damage vs the other�s typing\n  const bestCharged = (user, foe) => {\n    let best = null,\n      bestVal = -Infinity;\n    for (const m of user.chargedMoves || []) {\n      const stab = (user.types || []).includes(m.type) ? STAB : 1;\n      const mult = eff(m.type, foe.types || []);\n      const val = dmg(m.power, user.Atk, foe.Def, stab, mult);\n      if (val > bestVal) {\n        bestVal = val;\n        best = m;\n      }\n    }\n    return best;\n  };\n  const recA = ((_bestCharged = bestCharged(A, B)) === null || _bestCharged === void 0 ? void 0 : _bestCharged.id) || null;\n  const recB = ((_bestCharged2 = bestCharged(B, A)) === null || _bestCharged2 === void 0 ? void 0 : _bestCharged2.id) || null;\n\n  // Tiny turn engine: charged when ready (CMP = higher Atk), otherwise fast\n  const canThrow = u => (u.chargedMoves || []).some(m => u.energy >= (m.energyCost || 45));\n  const chooseThrow = (u, foe) => {\n    let pick = null,\n      best = -Infinity;\n    for (const m of u.chargedMoves || []) {\n      if (u.energy < (m.energyCost || 45)) continue;\n      const stab = (u.types || []).includes(m.type) ? STAB : 1;\n      const mult = eff(m.type, foe.types || []);\n      const val = dmg(m.power, u.Atk, foe.Def, stab, mult);\n      if (val > best) {\n        best = val;\n        pick = m;\n      }\n    }\n    return pick;\n  };\n  const shouldShield = (foe, incoming, shieldsLeft) => {\n    if (shieldsLeft <= 0) return false;\n    const stab = (foe.types || []).includes(incoming.type) ? STAB : 1;\n    const mult = eff(incoming.type, foe.types || []);\n    const hit = dmg(incoming.power, foe.Atk || 1, foe.Def, stab, mult);\n    const th = shieldsLeft === 2 ? 0.32 : 0.45;\n    return hit >= foe.HP || hit >= foe.MaxHP * th;\n  };\n  A.cooldown = ((_A$fast = A.fast) === null || _A$fast === void 0 ? void 0 : _A$fast.turns) || 1;\n  B.cooldown = ((_B$fast = B.fast) === null || _B$fast === void 0 ? void 0 : _B$fast.turns) || 1;\n  let aSh = Math.max(0, shieldsA | 0),\n    bSh = Math.max(0, shieldsB | 0);\n  const log = [];\n  let t = 0;\n  const MAX_TURNS = 2000;\n  while (A.HP > 0 && B.HP > 0 && t < MAX_TURNS) {\n    t++;\n    const aReady = canThrow(A);\n    const bReady = canThrow(B);\n    if (aReady || bReady) {\n      const aFirst = aReady && (!bReady || A.Atk >= B.Atk);\n      const resolve = (user, foe, who) => {\n        var _user$fast;\n        const move = chooseThrow(user, foe);\n        if (!move) return;\n        let shielded = false;\n        if (shouldShield(foe, move, who === \"A\" ? bSh : aSh)) {\n          if (who === \"A\") bSh--;else aSh--;\n          shielded = true;\n        } else {\n          const stab = (user.types || []).includes(move.type) ? STAB : 1;\n          const mult = eff(move.type, foe.types || []);\n          foe.HP = Math.max(0, foe.HP - dmg(move.power, user.Atk, foe.Def, stab, mult));\n        }\n        user.energy -= move.energyCost || 45;\n        user.cooldown = ((_user$fast = user.fast) === null || _user$fast === void 0 ? void 0 : _user$fast.turns) || 1;\n        log.push(`${who} throws ${move.id}${shielded ? \" (shielded)\" : \"\"}`);\n      };\n      if (aFirst) {\n        resolve(A, B, \"A\");\n        if (B.HP <= 0) break;\n        if (bReady) resolve(B, A, \"B\");\n        if (A.HP <= 0) break;\n      } else {\n        resolve(B, A, \"B\");\n        if (A.HP <= 0) break;\n        if (aReady) resolve(A, B, \"A\");\n        if (B.HP <= 0) break;\n      }\n      continue;\n    }\n\n    // progress fast\n    const doFast = (user, foe) => {\n      user.cooldown--;\n      if (user.cooldown <= 0 && user.fast) {\n        const stab = (user.types || []).includes(user.fast.type) ? STAB : 1;\n        const mult = eff(user.fast.type || \"Normal\", foe.types || []);\n        foe.HP = Math.max(0, foe.HP - dmg(user.fast.power, user.Atk, foe.Def, stab, mult));\n        user.energy = Math.min(100, user.energy + num(user.fast.energyGain, 8));\n        user.cooldown = user.fast.turns || 1;\n      }\n    };\n    doFast(A, B);\n    if (B.HP <= 0) break;\n    doFast(B, A);\n    if (A.HP <= 0) break;\n  }\n  const winner = A.HP <= 0 && B.HP <= 0 ? \"Draw\" : A.HP <= 0 ? A.name === \"You\" ? \"Foe\" : B.name : B.HP <= 0 ? A.name : A.HP === B.HP ? \"Draw\" : A.HP > B.HP ? A.name : B.name;\n  return {\n    winner,\n    aHP: Math.round(A.HP / A.MaxHP * 100),\n    bHP: Math.round(B.HP / B.MaxHP * 100),\n    aRecommended: recA,\n    bRecommended: recB,\n    summary: log.slice(0, 12)\n  };\n}\nexport default simulateBattle;\nvar _c;\n$RefreshReg$(_c, \"S\");","map":{"version":3,"names":["num","v","d","Number","isFinite","coerceStats","src","_ref","_ref2","_ref3","_s$attack","_ref4","_ref5","_ref6","_s$defense","_ref7","_ref8","_ref9","_ref0","_s$stamina","s","stats","baseStats","base","atk","attack","baseAttack","def","defense","baseDefense","sta","stamina","hp","baseStamina","pickFast","fast","fastMove","id","power","fastPower","energyGain","fastEnergyGain","turns","fastTurns","type","fastType","kind","pickChargedArray","list","Array","isArray","chargedMoves","out","m","push","energyCost","_ref1","_m$energyCost","_ref10","_m$power","moveId","energy","Math","abs","energyDelta","pvpPower","combatPower","moveType","length","TYPES","EFF","a","S","arr","_c","STAB","eff","defendTypes","reduce","t","_EFF$type$t","_EFF$type","dmg","stab","effm","max","floor","simulateBattle","attackerSrc","defenderSrc","shieldsA","shieldsB","_bestCharged","_bestCharged2","_A$fast","_B$fast","Astats","Bstats","A","name","speciesId","types","Atk","Def","MaxHP","HP","cooldown","B","_A$chargedMoves","_A$chargedMoves$","_B$chargedMoves","_B$chargedMoves$","winner","aHP","bHP","aRecommended","bRecommended","summary","bestCharged","user","foe","best","bestVal","Infinity","includes","mult","val","recA","recB","canThrow","u","some","chooseThrow","pick","shouldShield","incoming","shieldsLeft","hit","th","aSh","bSh","log","MAX_TURNS","aReady","bReady","aFirst","resolve","who","_user$fast","move","shielded","doFast","min","round","slice","$RefreshReg$"],"sources":["C:/Users/ben/Projects/nebsojipvptrainer/src/PokemonBattle.js"],"sourcesContent":["// src/PokemonBattle.js\r\n// Small, resilient PvP-lite simulator with defensive stat parsing.\r\n// Exports both a named and default function: simulateBattle\r\n\r\n/* ----------------- helpers ----------------- */\r\nconst num = (v, d = 0) => (Number.isFinite(+v) ? +v : d);\r\n\r\n// Try to pull atk/def/sta regardless of how league/GM shaped them.\r\nfunction coerceStats(src = {}) {\r\n    const s = src.stats || src.baseStats || src.base || {};\r\n\r\n    const atk = num(\r\n        s.attack ?? s.atk ?? src.attack ?? src.atk ?? src.baseAttack,\r\n        200\r\n    );\r\n    const def = num(\r\n        s.defense ?? s.def ?? src.defense ?? src.def ?? src.baseDefense,\r\n        200\r\n    );\r\n    const sta = num(\r\n        s.stamina ?? s.sta ?? s.hp ?? src.stamina ?? src.sta ?? src.baseStamina,\r\n        200\r\n    );\r\n\r\n    return { atk, def, sta };\r\n}\r\n\r\nfunction pickFast(src = {}) {\r\n    // Accepts either {fastMove: \"XXX\"} or {fast: {id:...}} or raw GM keys\r\n    if (src.fast && typeof src.fast === \"object\") return src.fast;\r\n    if (src.fastMove && typeof src.fastMove === \"string\")\r\n        return { id: src.fastMove, power: num(src.fastPower, 3), energyGain: num(src.fastEnergyGain, 8), turns: num(src.fastTurns, 1), type: src.fastType || \"Normal\", kind: \"fast\" };\r\n    // As a last resort, use TACKLE-like default so we never crash\r\n    return { id: \"TACKLE\", power: 3, energyGain: 8, turns: 1, type: \"Normal\", kind: \"fast\" };\r\n}\r\n\r\nfunction pickChargedArray(src = {}) {\r\n    // Accepts {chargedMoves: [\"A\",\"B\"]} or {chargedMoves: [{...}]}\r\n    const list = Array.isArray(src.chargedMoves) ? src.chargedMoves : [];\r\n    const out = [];\r\n    for (const m of list) {\r\n        if (!m) continue;\r\n        if (typeof m === \"string\") {\r\n            out.push({ id: m, energyCost: num(src[`${m}_energy`], 45), power: num(src[`${m}_power`], 90), type: src[`${m}_type`] || \"Normal\", kind: \"charged\" });\r\n        } else {\r\n            out.push({\r\n                id: m.id || m.moveId || \"UNKNOWN\",\r\n                energyCost: num(m.energyCost ?? m.energy ?? Math.abs(m.energyDelta), 45),\r\n                power: num(m.power ?? m.pvpPower ?? m.combatPower, 90),\r\n                type: m.type || m.moveType || \"Normal\",\r\n                kind: \"charged\",\r\n            });\r\n        }\r\n    }\r\n    // Always have something so the UI can show a recommendation\r\n    if (!out.length) out.push({ id: \"GENERIC_CHARGED\", energyCost: 45, power: 90, type: \"Normal\", kind: \"charged\" });\r\n    return out;\r\n}\r\n\r\n/* -------- tiny type chart (enough for relative scoring) -------- */\r\nconst TYPES = [\r\n    \"Normal\", \"Fighting\", \"Flying\", \"Poison\", \"Ground\", \"Rock\", \"Bug\", \"Ghost\", \"Steel\",\r\n    \"Fire\", \"Water\", \"Grass\", \"Electric\", \"Psychic\", \"Ice\", \"Dragon\", \"Dark\", \"Fairy\"\r\n];\r\nconst EFF = {};\r\nfor (const a of TYPES) { EFF[a] = {}; for (const d of TYPES) EFF[a][d] = 1; }\r\nfunction S(atk, arr, m) { for (const d of arr) EFF[atk][d] = m; }\r\n// (same mappings as earlier lite engine)\r\nS(\"Fighting\", [\"Normal\", \"Rock\", \"Ice\", \"Dark\", \"Steel\"], 1.6); S(\"Fighting\", [\"Flying\", \"Poison\", \"Bug\", \"Psychic\", \"Fairy\"], 0.625);\r\nS(\"Flying\", [\"Fighting\", \"Bug\", \"Grass\"], 1.6); S(\"Flying\", [\"Rock\", \"Steel\", \"Electric\"], 0.625);\r\nS(\"Poison\", [\"Grass\", \"Fairy\"], 1.6); S(\"Poison\", [\"Poison\", \"Ground\", \"Rock\", \"Ghost\"], 0.625); S(\"Poison\", [\"Steel\"], 0.390625);\r\nS(\"Ground\", [\"Poison\", \"Rock\", \"Steel\", \"Fire\", \"Electric\"], 1.6); S(\"Ground\", [\"Bug\", \"Grass\"], 0.625); S(\"Ground\", [\"Flying\"], 0.390625);\r\nS(\"Rock\", [\"Flying\", \"Bug\", \"Fire\", \"Ice\"], 1.6); S(\"Rock\", [\"Fighting\", \"Ground\", \"Steel\"], 0.625);\r\nS(\"Bug\", [\"Grass\", \"Psychic\", \"Dark\"], 1.6); S(\"Bug\", [\"Fighting\", \"Flying\", \"Poison\", \"Ghost\", \"Steel\", \"Fire\", \"Fairy\"], 0.625);\r\nS(\"Ghost\", [\"Ghost\", \"Psychic\"], 1.6); S(\"Ghost\", [\"Dark\"], 0.625);\r\nS(\"Steel\", [\"Rock\", \"Ice\", \"Fairy\"], 1.6); S(\"Steel\", [\"Steel\", \"Fire\", \"Water\", \"Electric\"], 0.625);\r\nS(\"Fire\", [\"Bug\", \"Steel\", \"Grass\", \"Ice\"], 1.6); S(\"Fire\", [\"Rock\", \"Fire\", \"Water\", \"Dragon\"], 0.625);\r\nS(\"Water\", [\"Ground\", \"Rock\", \"Fire\"], 1.6); S(\"Water\", [\"Water\", \"Grass\", \"Dragon\"], 0.625);\r\nS(\"Grass\", [\"Ground\", \"Rock\", \"Water\"], 1.6); S(\"Grass\", [\"Flying\", \"Poison\", \"Bug\", \"Steel\", \"Fire\", \"Grass\", \"Dragon\"], 0.625);\r\nS(\"Electric\", [\"Flying\", \"Water\"], 1.6); S(\"Electric\", [\"Grass\", \"Electric\", \"Dragon\"], 0.625); S(\"Electric\", [\"Ground\"], 0.390625);\r\nS(\"Psychic\", [\"Fighting\", \"Poison\"], 1.6); S(\"Psychic\", [\"Psychic\", \"Steel\"], 0.625); S(\"Psychic\", [\"Dark\"], 0.390625);\r\nS(\"Ice\", [\"Flying\", \"Ground\", \"Grass\", \"Dragon\"], 1.6); S(\"Ice\", [\"Steel\", \"Fire\", \"Water\", \"Ice\"], 0.625);\r\nS(\"Dragon\", [\"Dragon\"], 1.6); S(\"Dragon\", [\"Steel\"], 0.625); S(\"Dragon\", [\"Fairy\"], 0.390625);\r\nS(\"Dark\", [\"Ghost\", \"Psychic\"], 1.6); S(\"Dark\", [\"Fighting\", \"Dark\", \"Fairy\"], 0.625);\r\nS(\"Fairy\", [\"Fighting\", \"Dragon\", \"Dark\"], 1.6); S(\"Fairy\", [\"Poison\", \"Steel\", \"Fire\"], 0.625);\r\n\r\nconst STAB = 1.2;\r\nconst eff = (type, defendTypes = []) =>\r\n    (defendTypes || []).reduce((m, t) => m * (EFF[type]?.[t] ?? 1), 1);\r\nconst dmg = (power, atk, def, stab, effm) =>\r\n    Math.max(1, Math.floor(0.5 * num(power, 0) * (num(atk, 1) / Math.max(1, num(def, 1))) * (stab || 1) * (effm || 1)) + 1);\r\n\r\n/* ----------------- simulator ----------------- */\r\nexport function simulateBattle(attackerSrc = {}, defenderSrc = {}, shieldsA = 2, shieldsB = 2) {\r\n    // 1) Normalize fighters\r\n    const Astats = coerceStats(attackerSrc);\r\n    const Bstats = coerceStats(defenderSrc);\r\n\r\n    const A = {\r\n        name: attackerSrc.name || attackerSrc.speciesId || \"You\",\r\n        types: attackerSrc.types || attackerSrc.type || [],\r\n        Atk: Astats.atk,\r\n        Def: Bstats.def ? Astats.def : Astats.def, // keep shape; (typo-safe fallback)\r\n        MaxHP: Math.max(1, Math.floor(Astats.sta)),\r\n        HP: Math.max(1, Math.floor(Astats.sta)),\r\n        fast: pickFast(attackerSrc),\r\n        chargedMoves: pickChargedArray(attackerSrc),\r\n        energy: 0,\r\n        cooldown: 0,\r\n    };\r\n\r\n    const B = {\r\n        name: defenderSrc.name || defenderSrc.speciesId || \"Foe\",\r\n        types: defenderSrc.types || defenderSrc.type || [],\r\n        Atk: Bstats.atk,\r\n        Def: Bstats.def,\r\n        MaxHP: Math.max(1, Math.floor(Bstats.sta)),\r\n        HP: Math.max(1, Math.floor(Bstats.sta)),\r\n        fast: pickFast(defenderSrc),\r\n        chargedMoves: pickChargedArray(defenderSrc),\r\n        energy: 0,\r\n        cooldown: 0,\r\n    };\r\n\r\n    // If something still came in broken, just bail gracefully\r\n    if (!A.MaxHP || !B.MaxHP) {\r\n        return {\r\n            winner: \"Draw\",\r\n            aHP: 0,\r\n            bHP: 0,\r\n            aRecommended: A.chargedMoves?.[0]?.id || null,\r\n            bRecommended: B.chargedMoves?.[0]?.id || null,\r\n            summary: [\"Invalid stats; treating as draw.\"],\r\n        };\r\n    }\r\n\r\n    // Pre-compute �recommended� by raw damage vs the other�s typing\r\n    const bestCharged = (user, foe) => {\r\n        let best = null, bestVal = -Infinity;\r\n        for (const m of user.chargedMoves || []) {\r\n            const stab = (user.types || []).includes(m.type) ? STAB : 1;\r\n            const mult = eff(m.type, foe.types || []);\r\n            const val = dmg(m.power, user.Atk, foe.Def, stab, mult);\r\n            if (val > bestVal) { bestVal = val; best = m; }\r\n        }\r\n        return best;\r\n    };\r\n\r\n    const recA = bestCharged(A, B)?.id || null;\r\n    const recB = bestCharged(B, A)?.id || null;\r\n\r\n    // Tiny turn engine: charged when ready (CMP = higher Atk), otherwise fast\r\n    const canThrow = (u) => (u.chargedMoves || []).some((m) => u.energy >= (m.energyCost || 45));\r\n    const chooseThrow = (u, foe) => {\r\n        let pick = null, best = -Infinity;\r\n        for (const m of u.chargedMoves || []) {\r\n            if (u.energy < (m.energyCost || 45)) continue;\r\n            const stab = (u.types || []).includes(m.type) ? STAB : 1;\r\n            const mult = eff(m.type, foe.types || []);\r\n            const val = dmg(m.power, u.Atk, foe.Def, stab, mult);\r\n            if (val > best) { best = val; pick = m; }\r\n        }\r\n        return pick;\r\n    };\r\n    const shouldShield = (foe, incoming, shieldsLeft) => {\r\n        if (shieldsLeft <= 0) return false;\r\n        const stab = (foe.types || []).includes(incoming.type) ? STAB : 1;\r\n        const mult = eff(incoming.type, foe.types || []);\r\n        const hit = dmg(incoming.power, foe.Atk || 1, foe.Def, stab, mult);\r\n        const th = shieldsLeft === 2 ? 0.32 : 0.45;\r\n        return hit >= foe.HP || hit >= foe.MaxHP * th;\r\n    };\r\n\r\n    A.cooldown = A.fast?.turns || 1;\r\n    B.cooldown = B.fast?.turns || 1;\r\n\r\n    let aSh = Math.max(0, shieldsA | 0), bSh = Math.max(0, shieldsB | 0);\r\n    const log = [];\r\n    let t = 0;\r\n    const MAX_TURNS = 2000;\r\n\r\n    while (A.HP > 0 && B.HP > 0 && t < MAX_TURNS) {\r\n        t++;\r\n\r\n        const aReady = canThrow(A);\r\n        const bReady = canThrow(B);\r\n\r\n        if (aReady || bReady) {\r\n            const aFirst = aReady && (!bReady || A.Atk >= B.Atk);\r\n\r\n            const resolve = (user, foe, who) => {\r\n                const move = chooseThrow(user, foe);\r\n                if (!move) return;\r\n                let shielded = false;\r\n                if (shouldShield(foe, move, who === \"A\" ? bSh : aSh)) {\r\n                    if (who === \"A\") bSh--; else aSh--;\r\n                    shielded = true;\r\n                } else {\r\n                    const stab = (user.types || []).includes(move.type) ? STAB : 1;\r\n                    const mult = eff(move.type, foe.types || []);\r\n                    foe.HP = Math.max(0, foe.HP - dmg(move.power, user.Atk, foe.Def, stab, mult));\r\n                }\r\n                user.energy -= (move.energyCost || 45);\r\n                user.cooldown = user.fast?.turns || 1;\r\n                log.push(`${who} throws ${move.id}${shielded ? \" (shielded)\" : \"\"}`);\r\n            };\r\n\r\n            if (aFirst) {\r\n                resolve(A, B, \"A\");\r\n                if (B.HP <= 0) break;\r\n                if (bReady) resolve(B, A, \"B\");\r\n                if (A.HP <= 0) break;\r\n            } else {\r\n                resolve(B, A, \"B\");\r\n                if (A.HP <= 0) break;\r\n                if (aReady) resolve(A, B, \"A\");\r\n                if (B.HP <= 0) break;\r\n            }\r\n            continue;\r\n        }\r\n\r\n        // progress fast\r\n        const doFast = (user, foe) => {\r\n            user.cooldown--;\r\n            if (user.cooldown <= 0 && user.fast) {\r\n                const stab = (user.types || []).includes(user.fast.type) ? STAB : 1;\r\n                const mult = eff(user.fast.type || \"Normal\", foe.types || []);\r\n                foe.HP = Math.max(0, foe.HP - dmg(user.fast.power, user.Atk, foe.Def, stab, mult));\r\n                user.energy = Math.min(100, user.energy + num(user.fast.energyGain, 8));\r\n                user.cooldown = user.fast.turns || 1;\r\n            }\r\n        };\r\n\r\n        doFast(A, B);\r\n        if (B.HP <= 0) break;\r\n        doFast(B, A);\r\n        if (A.HP <= 0) break;\r\n    }\r\n\r\n    const winner =\r\n        A.HP <= 0 && B.HP <= 0 ? \"Draw\" :\r\n            A.HP <= 0 ? A.name === \"You\" ? \"Foe\" : B.name :\r\n                B.HP <= 0 ? A.name :\r\n                    A.HP === B.HP ? \"Draw\" : (A.HP > B.HP ? A.name : B.name);\r\n\r\n    return {\r\n        winner,\r\n        aHP: Math.round((A.HP / A.MaxHP) * 100),\r\n        bHP: Math.round((B.HP / B.MaxHP) * 100),\r\n        aRecommended: recA,\r\n        bRecommended: recB,\r\n        summary: log.slice(0, 12),\r\n    };\r\n}\r\n\r\nexport default simulateBattle;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}