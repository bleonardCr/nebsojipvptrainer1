{"ast":null,"code":"// src/battleCalc.js\n// Competitive-lite PvP sim: league CP caps, real damage formula (approx),\n// STAB + type, turns/energy, CMP, and smart shielding.\n// API: buildMoveBook(gm), simulateDuel(mine, enemy, myShields, foeShields), bestOfThree(team, enemy, myShields, foeShields)\n\nlet SPECIES = {}; // speciesId -> {atk, def, sta, types: [\"Steel\",\"Fairy\"]}\nlet MOVES = {}; // moveId -> {id, kind:\"fast\"|\"charged\", type, power, energyGain, energyCost, turns}\n\n// ---------- Robust helpers ----------\nconst num = (v, d = 0) => Number.isFinite(Number(v)) ? Number(v) : d;\n\n// Canonical: \"UPPER_SNAKE_CASE\" for move ids so league files & GM always match\nfunction canonMoveId(s) {\n  if (!s) return \"\";\n  return String(s).trim().replace(/^COMBAT_V\\d+_MOVE_/i, \"\") // strip Niantic prefixes if present\n  .replace(/^V\\d+_/i, \"\").replace(/[^A-Za-z0-9]+/g, \"_\").replace(/_+/g, \"_\").replace(/^_|_$/g, \"\").toUpperCase();\n}\n\n// ---------- League caps ----------\nexport const LEAGUE_CAP = {\n  \"Great League\": 1500,\n  \"Ultra League\": 2500,\n  \"Master League\": Infinity\n};\n\n// ---------- CP multipliers (half levels to 50) ----------\nconst CPM = [0 // pad to index by half-level: 0, 1=1.0, 2=1.5 etc (we use map below)\n];\n(function fillCPM() {\n  // PvPoke/Niantic CPM list to 50 (every 0.5 level)\n  const table = [0.094, 0.135137432, 0.16639787, 0.192650919, 0.21573247, 0.236572661, 0.25572005, 0.273530381, 0.29024988, 0.306057377, 0.3210876, 0.335445036, 0.34921268, 0.362457751, 0.37523559, 0.387592406, 0.39956728, 0.411193551, 0.42250001, 0.432926419, 0.44310755, 0.4530599578, 0.46279839, 0.472336083, 0.48168495, 0.4908558, 0.49985844, 0.508701765, 0.51739395, 0.525942511, 0.53435433, 0.542635767, 0.55079269, 0.558830576, 0.56675452, 0.574569153, 0.58227891, 0.589887907, 0.59740001, 0.604818814, 0.61215729, 0.619399365, 0.62656713, 0.633644533, 0.64065295, 0.647576426, 0.65443563, 0.661214806, 0.667934, 0.674577537, 0.68116492, 0.687680648, 0.69414365, 0.700538673, 0.70688421, 0.713164996, 0.71939909, 0.725571552, 0.7317, 0.734741009, 0.73776948, 0.740785574, 0.74378943, 0.746781211, 0.74976104, 0.752729087, 0.75568551, 0.758630378, 0.76156384, 0.764486065, 0.76739717, 0.770297266, 0.7731865, 0.776064962, 0.77893275, 0.781790055, 0.78463697, 0.787473578, 0.79030001, 0.792803968, 0.79530001, 0.797803921, 0.8003];\n  // map to half-level index: 1=>L1, 2=>L1.5 ... 99=>L50\n  CPM.length = 100;\n  CPM.fill(0);\n  for (let i = 0; i < table.length; i++) CPM[i + 1] = table[i];\n})();\nconst STAB = 1.2;\n\n// ---------- Type chart ----------\nconst TYPES = [\"Normal\", \"Fighting\", \"Flying\", \"Poison\", \"Ground\", \"Rock\", \"Bug\", \"Ghost\", \"Steel\", \"Fire\", \"Water\", \"Grass\", \"Electric\", \"Psychic\", \"Ice\", \"Dragon\", \"Dark\", \"Fairy\"];\nconst EFF = {};\nTYPES.forEach(att => {\n  EFF[att] = {};\n  TYPES.forEach(def => {\n    EFF[att][def] = 1.0; // neutral baseline\n  });\n});\nfunction S(atk, arr, m) {\n  arr.forEach(d => EFF[atk][d] = m);\n}\n_c = S;\nS(\"Fighting\", [\"Normal\", \"Rock\", \"Ice\", \"Dark\", \"Steel\"], 1.6);\nS(\"Fighting\", [\"Flying\", \"Poison\", \"Bug\", \"Psychic\", \"Fairy\"], 0.625);\nS(\"Flying\", [\"Fighting\", \"Bug\", \"Grass\"], 1.6);\nS(\"Flying\", [\"Rock\", \"Steel\", \"Electric\"], 0.625);\nS(\"Poison\", [\"Grass\", \"Fairy\"], 1.6);\nS(\"Poison\", [\"Poison\", \"Ground\", \"Rock\", \"Ghost\"], 0.625);\nS(\"Poison\", [\"Steel\"], 0.390625);\nS(\"Ground\", [\"Poison\", \"Rock\", \"Steel\", \"Fire\", \"Electric\"], 1.6);\nS(\"Ground\", [\"Bug\", \"Grass\"], 0.625);\nS(\"Ground\", [\"Flying\"], 0.390625);\nS(\"Rock\", [\"Flying\", \"Bug\", \"Fire\", \"Ice\"], 1.6);\nS(\"Rock\", [\"Fighting\", \"Ground\", \"Steel\"], 0.625);\nS(\"Bug\", [\"Grass\", \"Psychic\", \"Dark\"], 1.6);\nS(\"Bug\", [\"Fighting\", \"Flying\", \"Poison\", \"Ghost\", \"Steel\", \"Fire\", \"Fairy\"], 0.625);\nS(\"Ghost\", [\"Ghost\", \"Psychic\"], 1.6);\nS(\"Ghost\", [\"Dark\"], 0.625); // Normal-on-Ghost handled by move type\nS(\"Steel\", [\"Rock\", \"Ice\", \"Fairy\"], 1.6);\nS(\"Steel\", [\"Steel\", \"Fire\", \"Water\", \"Electric\"], 0.625);\nS(\"Fire\", [\"Bug\", \"Steel\", \"Grass\", \"Ice\"], 1.6);\nS(\"Fire\", [\"Rock\", \"Fire\", \"Water\", \"Dragon\"], 0.625);\nS(\"Water\", [\"Ground\", \"Rock\", \"Fire\"], 1.6);\nS(\"Water\", [\"Water\", \"Grass\", \"Dragon\"], 0.625);\nS(\"Grass\", [\"Ground\", \"Rock\", \"Water\"], 1.6);\nS(\"Grass\", [\"Flying\", \"Poison\", \"Bug\", \"Steel\", \"Fire\", \"Grass\", \"Dragon\"], 0.625);\nS(\"Electric\", [\"Flying\", \"Water\"], 1.6);\nS(\"Electric\", [\"Grass\", \"Electric\", \"Dragon\"], 0.625);\nS(\"Electric\", [\"Ground\"], 0.390625);\nS(\"Psychic\", [\"Fighting\", \"Poison\"], 1.6);\nS(\"Psychic\", [\"Psychic\", \"Steel\"], 0.625);\nS(\"Psychic\", [\"Dark\"], 0.390625);\nS(\"Ice\", [\"Flying\", \"Ground\", \"Grass\", \"Dragon\"], 1.6);\nS(\"Ice\", [\"Steel\", \"Fire\", \"Water\", \"Ice\"], 0.625);\nS(\"Dragon\", [\"Dragon\"], 1.6);\nS(\"Dragon\", [\"Steel\"], 0.625);\nS(\"Dragon\", [\"Fairy\"], 0.390625);\nS(\"Dark\", [\"Ghost\", \"Psychic\"], 1.6);\nS(\"Dark\", [\"Fighting\", \"Dark\", \"Fairy\"], 0.625);\nS(\"Fairy\", [\"Fighting\", \"Dragon\", \"Dark\"], 1.6);\nS(\"Fairy\", [\"Poison\", \"Steel\", \"Fire\"], 0.625);\nfunction tcase(s) {\n  return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();\n}\nfunction normType(s) {\n  if (!s) return null;\n  const raw = String(s).replace(/^POKEMON_TYPE_/, '').replace(/_/g, ' ').trim().toLowerCase();\n  const T = tcase(raw);\n  return TYPES.includes(T) ? T : null;\n}\nfunction normId(s) {\n  return String(s || '').toLowerCase().replace(/[^\\w]+/g, '_').replace(/^_+|_+$/g, '');\n}\nfunction eff(moveType, defendTypes) {\n  let m = 1;\n  for (const t of defendTypes) {\n    var _EFF$moveType$t, _EFF$moveType;\n    m *= (_EFF$moveType$t = (_EFF$moveType = EFF[moveType]) === null || _EFF$moveType === void 0 ? void 0 : _EFF$moveType[t]) !== null && _EFF$moveType$t !== void 0 ? _EFF$moveType$t : 1;\n  }\n  return m;\n}\n\n// ---------- Damage & CP ----------\nfunction damage(pwr, atk, def, stab, effm) {\n  // PvP damage: floor(0.5 * PWR * Atk/Def * STAB * Eff) + 1\n  return Math.max(1, Math.floor(0.5 * pwr * (atk / def) * stab * effm) + 1);\n}\nfunction cp(atk, def, sta, cpm) {\n  return Math.floor(atk * Math.sqrt(def) * Math.sqrt(sta) * cpm * cpm / 10);\n}\nfunction levelForCap(baseAtk, baseDef, baseSta, cap) {\n  if (!isFinite(cap)) return 100; // treat as level 50\n  let bestLvlIndex = 99; // 50\n  for (let i = 99; i >= 1; i--) {\n    const cpm = CPM[i];\n    const cAtk = baseAtk * cpm,\n      cDef = baseDef * cpm,\n      cSta = baseSta * cpm;\n    if (cp(cAtk, cDef, cSta, 1) <= cap) {\n      bestLvlIndex = i;\n      break;\n    }\n  }\n  return bestLvlIndex;\n}\n\n// ---------- Build books ----------\nfunction buildSpeciesBook(gm) {\n  var _gm$data;\n  const poke = (gm === null || gm === void 0 ? void 0 : gm.pokemon) || (gm === null || gm === void 0 ? void 0 : (_gm$data = gm.data) === null || _gm$data === void 0 ? void 0 : _gm$data.pokemon) || (gm === null || gm === void 0 ? void 0 : gm.species) || [];\n  const out = {};\n  for (const p of poke) {\n    var _p$types, _p$types2, _ref, _ref2, _p$baseAttack, _p$stats, _ref3, _ref4, _p$baseDefense, _p$stats2, _ref5, _ref6, _p$baseStamina, _p$stats3;\n    const id = normId(p.speciesId || p.pokemonId || p.id || p.name || p.templateId);\n    if (!id) continue;\n    const types = [normType(p.type1 || ((_p$types = p.types) === null || _p$types === void 0 ? void 0 : _p$types[0])), normType(p.type2 || ((_p$types2 = p.types) === null || _p$types2 === void 0 ? void 0 : _p$types2[1]))].filter(Boolean);\n    const atk = Number((_ref = (_ref2 = (_p$baseAttack = p.baseAttack) !== null && _p$baseAttack !== void 0 ? _p$baseAttack : (_p$stats = p.stats) === null || _p$stats === void 0 ? void 0 : _p$stats.atk) !== null && _ref2 !== void 0 ? _ref2 : p.attack) !== null && _ref !== void 0 ? _ref : 200);\n    const def = Number((_ref3 = (_ref4 = (_p$baseDefense = p.baseDefense) !== null && _p$baseDefense !== void 0 ? _p$baseDefense : (_p$stats2 = p.stats) === null || _p$stats2 === void 0 ? void 0 : _p$stats2.def) !== null && _ref4 !== void 0 ? _ref4 : p.defense) !== null && _ref3 !== void 0 ? _ref3 : 200);\n    const sta = Number((_ref5 = (_ref6 = (_p$baseStamina = p.baseStamina) !== null && _p$baseStamina !== void 0 ? _p$baseStamina : (_p$stats3 = p.stats) === null || _p$stats3 === void 0 ? void 0 : _p$stats3.sta) !== null && _ref6 !== void 0 ? _ref6 : p.stamina) !== null && _ref5 !== void 0 ? _ref5 : 200);\n    out[id] = {\n      atk,\n      def,\n      sta,\n      types: types.length ? types : [\"Normal\"]\n    };\n  }\n  return out;\n}\nexport function buildMoveBook(gm) {\n  var _gm$data2, _gm$data3;\n  SPECIES = buildSpeciesBook(gm);\n  const pools = [gm === null || gm === void 0 ? void 0 : gm.moves, gm === null || gm === void 0 ? void 0 : gm.combatMoves, gm === null || gm === void 0 ? void 0 : (_gm$data2 = gm.data) === null || _gm$data2 === void 0 ? void 0 : _gm$data2.moves, gm === null || gm === void 0 ? void 0 : (_gm$data3 = gm.data) === null || _gm$data3 === void 0 ? void 0 : _gm$data3.combatMoves, gm === null || gm === void 0 ? void 0 : gm.moveList].filter(Boolean);\n  const book = {};\n  for (const list of pools) {\n    for (const m of list) {\n      var _ref7, _ref8, _ref9, _ref0, _m$moveId, _ref1, _ref10, _ref11, _m$pvpPower, _ref12, _ref13, _m$durationTurns;\n      const id = String((_ref7 = (_ref8 = (_ref9 = (_ref0 = (_m$moveId = m.moveId) !== null && _m$moveId !== void 0 ? _m$moveId : m.id) !== null && _ref0 !== void 0 ? _ref0 : m.uniqueId) !== null && _ref9 !== void 0 ? _ref9 : m.templateId) !== null && _ref8 !== void 0 ? _ref8 : m.name) !== null && _ref7 !== void 0 ? _ref7 : '');\n      if (!id) continue;\n      const type = normType(m.type || m.pokemonType || m.moveType) || \"Normal\";\n      const power = Number((_ref1 = (_ref10 = (_ref11 = (_m$pvpPower = m.pvpPower) !== null && _m$pvpPower !== void 0 ? _m$pvpPower : m.power) !== null && _ref11 !== void 0 ? _ref11 : m.combatPower) !== null && _ref10 !== void 0 ? _ref10 : m.damage) !== null && _ref1 !== void 0 ? _ref1 : 0);\n      // Niantic fields: energyDelta (>0 fast, <0 charged), durationTurns for PVP\n      let energyGain = 0,\n        energyCost = 0,\n        kind = \"fast\",\n        turns = 1;\n      if (m.energyDelta != null) {\n        const d = Number(m.energyDelta);\n        if (d > 0) {\n          energyGain = d;\n          kind = \"fast\";\n        }\n        if (d < 0) {\n          energyCost = Math.abs(d);\n          kind = \"charged\";\n        }\n      }\n      if (m.energy != null) {\n        energyCost = Math.abs(Number(m.energy));\n        kind = \"charged\";\n      }\n      if (m.energyGain != null) {\n        energyGain = Number(m.energyGain);\n        kind = \"fast\";\n      }\n      turns = Number((_ref12 = (_ref13 = (_m$durationTurns = m.durationTurns) !== null && _m$durationTurns !== void 0 ? _m$durationTurns : m.turns) !== null && _ref13 !== void 0 ? _ref13 : m.cooldownTurns) !== null && _ref12 !== void 0 ? _ref12 : kind === \"fast\" ? 1 : 0) || (kind === \"fast\" ? 1 : 0);\n      const prev = book[id];\n      if (!prev || power > prev.power) {\n        book[id] = {\n          id,\n          kind,\n          type,\n          power,\n          energyGain,\n          energyCost,\n          turns\n        };\n      }\n    }\n  }\n  MOVES = book;\n  return book;\n}\n\n// ---------- Choose charged by expected damage vs defender ----------\nfunction bestCharged(att, def) {\n  let best = null,\n    bestScore = -Infinity;\n  for (const id of att.chargedMoves || []) {\n    const m = MOVES[id];\n    if (!m || m.kind !== \"charged\") continue;\n    const stab = att.types.includes(m.type) ? STAB : 1;\n    const effm = eff(m.type, def.types);\n    const dmg = damage(m.power, att.Atk, def.Def, stab, effm);\n    const dpe = (m.power || 0) / (m.energyCost || 45);\n    const score = dmg * 1.0 + dpe * 2.5; // bias to moves that actually chunk\n    if (score > bestScore) {\n      bestScore = score;\n      best = m;\n    }\n  }\n  return best;\n}\n\n// ---------- Duel simulation ----------\nexport function simulateDuel(attackerIn, defenderIn, shieldsA = 2, shieldsB = 2, _book = MOVES, leagueName = \"Master League\") {\n  var _LEAGUE_CAP$leagueNam, _A$rec, _B$rec;\n  const cap = (_LEAGUE_CAP$leagueNam = LEAGUE_CAP[leagueName]) !== null && _LEAGUE_CAP$leagueNam !== void 0 ? _LEAGUE_CAP$leagueNam : isFinite(leagueName) ? Number(leagueName) : Infinity;\n  function enrichSide(src) {\n    const id = normId(src.speciesId || src.name);\n    const base = SPECIES[id] || {\n      atk: 200,\n      def: 200,\n      sta: 200,\n      types: [\"Normal\"]\n    };\n    const lvlIndex = levelForCap(base.atk, base.def, base.sta, cap);\n    const cpm = CPM[lvlIndex] || CPM[99];\n    const Atk = base.atk * cpm,\n      Def = base.def * cpm,\n      Sta = Math.floor(base.sta * cpm) * 2; // Sta scaled to feel tanky\n    const fast = MOVES[src.fastMove] || null;\n    const charged = (src.chargedMoves || []).filter(id => !!MOVES[id]);\n    return {\n      name: src.name || src.speciesId,\n      speciesId: id,\n      types: base.types,\n      Atk,\n      Def,\n      MaxHP: Sta,\n      HP: Sta,\n      energy: 0,\n      fast,\n      chargedMoves: charged,\n      rec: null // populated below\n    };\n  }\n  const A = enrichSide(attackerIn);\n  const B = enrichSide(defenderIn);\n\n  // pick recs now (per-defender)\n  A.rec = bestCharged(A, B);\n  B.rec = bestCharged(B, A);\n  const MAX_TURNS = 2000; // each fast turn ~0.5s, plenty\n  let aSh = Math.max(0, shieldsA | 0),\n    bSh = Math.max(0, shieldsB | 0);\n  let t = 0;\n  function canThrow(user) {\n    // any affordable charged?\n    for (const id of user.chargedMoves) {\n      const m = MOVES[id];\n      if (!m || m.kind !== \"charged\") continue;\n      if (user.energy >= (m.energyCost || 45)) return true;\n    }\n    return false;\n  }\n  function chooseThrow(user, foe) {\n    // take highest expected damage move we can afford\n    let pick = null,\n      best = -Infinity;\n    for (const id of user.chargedMoves) {\n      const m = MOVES[id];\n      if (!m || m.kind !== \"charged\") continue;\n      if (user.energy < (m.energyCost || 45)) continue;\n      const stab = user.types.includes(m.type) ? STAB : 1;\n      const effm = eff(m.type, foe.types);\n      const dmg = damage(m.power, user.Atk, foe.Def, stab, effm);\n      if (dmg > best) {\n        best = dmg;\n        pick = m;\n      }\n    }\n    return pick;\n  }\n  function shouldShield(foeMove, user) {\n    // smart-ish: shield if KO or big chunk >= 35% HP\n    const stab = user.types.includes(foeMove.type) ? STAB : 1; // irrelevant: foe�s STAB, but we need foe�s types; safe approx\n    // use foe�s STAB by passing via outer chooseThrow; we calculate damage using foe�s Atk vs our Def below\n    return false; // placeholder overridden below\n  }\n  const log = [];\n  while (A.HP > 0 && B.HP > 0 && t < MAX_TURNS) {\n    t++;\n\n    // advance fast move turns & energy\n    if (A.fast) {\n      if (t % (A.fast.turns || 1) === 0) A.energy += A.fast.energyGain || 0;\n    }\n    if (B.fast) {\n      if (t % (B.fast.turns || 1) === 0) B.energy += B.fast.energyGain || 0;\n    }\n\n    // Both decide to throw?\n    const aMove = canThrow(A) ? chooseThrow(A, B) : null;\n    const bMove = canThrow(B) ? chooseThrow(B, A) : null;\n\n    // CMP: higher Atk throws first when both can\n    const aFirst = aMove && bMove ? A.Atk >= B.Atk : !!aMove;\n    function resolveThrow(user, foe, move, foeShieldsRef, who) {\n      if (!move) return;\n      // smart shield decision for foe\n      const stab = user.types.includes(move.type) ? STAB : 1;\n      const mult = eff(move.type, foe.types);\n      const hit = damage(move.power, user.Atk, foe.Def, stab, mult);\n      let shielded = false;\n      if (who === \"A\" && bSh > 0) {\n        // B should shield if KO or >= 0.35 HP chunk\n        if (hit >= foe.HP || hit >= foe.MaxHP * 0.35) {\n          bSh--;\n          shielded = true;\n        }\n      } else if (who === \"B\" && aSh > 0) {\n        if (hit >= foe.HP || hit >= foe.MaxHP * 0.35) {\n          aSh--;\n          shielded = true;\n        }\n      }\n      if (!shielded) {\n        foe.HP = Math.max(0, foe.HP - hit);\n      }\n      user.energy -= move.energyCost || 45;\n      log.push(`${who} throws ${move.id}${shielded ? ' (shielded)' : ''}`);\n    }\n    if (aFirst) {\n      // A throws or fasts\n      if (aMove) resolveThrow(A, B, aMove, () => bSh, \"A\");else if (A.fast && t % (A.fast.turns || 1) === 0) {\n        const hit = damage(A.fast.power || 1, A.Atk, B.Def, A.types.includes(A.fast.type) ? STAB : 1, eff(A.fast.type, B.types));\n        B.HP = Math.max(0, B.HP - hit);\n      }\n      if (B.HP <= 0) break;\n\n      // B acts\n      if (bMove) resolveThrow(B, A, bMove, () => aSh, \"B\");else if (B.fast && t % (B.fast.turns || 1) === 0) {\n        const hit = damage(B.fast.power || 1, B.Atk, A.Def, B.types.includes(B.fast.type) ? STAB : 1, eff(B.fast.type, A.types));\n        A.HP = Math.max(0, A.HP - hit);\n      }\n      if (A.HP <= 0) break;\n    } else {\n      // B first\n      if (bMove) resolveThrow(B, A, bMove, () => aSh, \"B\");else if (B.fast && t % (B.fast.turns || 1) === 0) {\n        const hit = damage(B.fast.power || 1, B.Atk, A.Def, B.types.includes(B.fast.type) ? STAB : 1, eff(B.fast.type, A.types));\n        A.HP = Math.max(0, A.HP - hit);\n      }\n      if (A.HP <= 0) break;\n      if (aMove) resolveThrow(A, B, aMove, () => bSh, \"A\");else if (A.fast && t % (A.fast.turns || 1) === 0) {\n        const hit = damage(A.fast.power || 1, A.Atk, B.Def, A.types.includes(A.fast.type) ? STAB : 1, eff(A.fast.type, B.types));\n        B.HP = Math.max(0, B.HP - hit);\n      }\n      if (B.HP <= 0) break;\n    }\n  }\n  const winner = A.HP <= 0 && B.HP <= 0 ? \"Draw\" : A.HP <= 0 ? B.name : B.HP <= 0 ? A.name : A.HP === B.HP ? \"Draw\" : A.HP > B.HP ? A.name : B.name;\n  return {\n    winner,\n    aHP: Math.round(A.HP / A.MaxHP * 100),\n    // percentage for your UI bars\n    bHP: Math.round(B.HP / B.MaxHP * 100),\n    aRecommended: ((_A$rec = A.rec) === null || _A$rec === void 0 ? void 0 : _A$rec.id) || null,\n    bRecommended: ((_B$rec = B.rec) === null || _B$rec === void 0 ? void 0 : _B$rec.id) || null,\n    summary: log.slice(0, 12)\n  };\n}\n\n// Rank your 3 vs one enemy (returns same shape you already use)\nexport function bestOfThree(mine, enemy, myShields, foeShields, _book = MOVES, leagueName = \"Master League\") {\n  const fights = mine.map(m => {\n    const you = {\n      ...m,\n      name: m.name || m.speciesId\n    };\n    const foe = {\n      ...enemy,\n      name: enemy.name || enemy.speciesId\n    };\n    const r = simulateDuel(you, foe, myShields, foeShields, MOVES, leagueName);\n    const score = r.winner === you.name ? 1 : r.winner === \"Draw\" ? 0 : -1;\n    return {\n      you: you.name,\n      vs: foe.name,\n      ...r,\n      score\n    };\n  });\n  fights.sort((a, b) => b.score - a.score || b.aHP - a.aHP || b.bHP - a.bHP);\n  return {\n    best: fights[0],\n    fights\n  };\n}\nvar _c;\n$RefreshReg$(_c, \"S\");","map":{"version":3,"names":["SPECIES","MOVES","num","v","d","Number","isFinite","canonMoveId","s","String","trim","replace","toUpperCase","LEAGUE_CAP","Infinity","CPM","fillCPM","table","length","fill","i","STAB","TYPES","EFF","forEach","att","def","S","atk","arr","m","_c","tcase","charAt","slice","toLowerCase","normType","raw","T","includes","normId","eff","moveType","defendTypes","t","_EFF$moveType$t","_EFF$moveType","damage","pwr","stab","effm","Math","max","floor","cp","sta","cpm","sqrt","levelForCap","baseAtk","baseDef","baseSta","cap","bestLvlIndex","cAtk","cDef","cSta","buildSpeciesBook","gm","_gm$data","poke","pokemon","data","species","out","p","_p$types","_p$types2","_ref","_ref2","_p$baseAttack","_p$stats","_ref3","_ref4","_p$baseDefense","_p$stats2","_ref5","_ref6","_p$baseStamina","_p$stats3","id","speciesId","pokemonId","name","templateId","types","type1","type2","filter","Boolean","baseAttack","stats","attack","baseDefense","defense","baseStamina","stamina","buildMoveBook","_gm$data2","_gm$data3","pools","moves","combatMoves","moveList","book","list","_ref7","_ref8","_ref9","_ref0","_m$moveId","_ref1","_ref10","_ref11","_m$pvpPower","_ref12","_ref13","_m$durationTurns","moveId","uniqueId","type","pokemonType","power","pvpPower","combatPower","energyGain","energyCost","kind","turns","energyDelta","abs","energy","durationTurns","cooldownTurns","prev","bestCharged","best","bestScore","chargedMoves","dmg","Atk","Def","dpe","score","simulateDuel","attackerIn","defenderIn","shieldsA","shieldsB","_book","leagueName","_LEAGUE_CAP$leagueNam","_A$rec","_B$rec","enrichSide","src","base","lvlIndex","Sta","fast","fastMove","charged","MaxHP","HP","rec","A","B","MAX_TURNS","aSh","bSh","canThrow","user","chooseThrow","foe","pick","shouldShield","foeMove","log","aMove","bMove","aFirst","resolveThrow","move","foeShieldsRef","who","mult","hit","shielded","push","winner","aHP","round","bHP","aRecommended","bRecommended","summary","bestOfThree","mine","enemy","myShields","foeShields","fights","map","you","r","vs","sort","a","b","$RefreshReg$"],"sources":["C:/Users/ben/Projects/nebsojipvptrainer/src/battleCalc.js"],"sourcesContent":["// src/battleCalc.js\r\n// Competitive-lite PvP sim: league CP caps, real damage formula (approx),\r\n// STAB + type, turns/energy, CMP, and smart shielding.\r\n// API: buildMoveBook(gm), simulateDuel(mine, enemy, myShields, foeShields), bestOfThree(team, enemy, myShields, foeShields)\r\n\r\nlet SPECIES = {};  // speciesId -> {atk, def, sta, types: [\"Steel\",\"Fairy\"]}\r\nlet MOVES = {};  // moveId -> {id, kind:\"fast\"|\"charged\", type, power, energyGain, energyCost, turns}\r\n\r\n// ---------- Robust helpers ----------\r\nconst num = (v, d = 0) => (Number.isFinite(Number(v)) ? Number(v) : d);\r\n\r\n// Canonical: \"UPPER_SNAKE_CASE\" for move ids so league files & GM always match\r\nfunction canonMoveId(s) {\r\n    if (!s) return \"\";\r\n    return String(s)\r\n        .trim()\r\n        .replace(/^COMBAT_V\\d+_MOVE_/i, \"\")     // strip Niantic prefixes if present\r\n        .replace(/^V\\d+_/i, \"\")\r\n        .replace(/[^A-Za-z0-9]+/g, \"_\")\r\n        .replace(/_+/g, \"_\")\r\n        .replace(/^_|_$/g, \"\")\r\n        .toUpperCase();\r\n}\r\n\r\n// ---------- League caps ----------\r\nexport const LEAGUE_CAP = {\r\n    \"Great League\": 1500,\r\n    \"Ultra League\": 2500,\r\n    \"Master League\": Infinity\r\n};\r\n\r\n// ---------- CP multipliers (half levels to 50) ----------\r\nconst CPM = [\r\n    0, // pad to index by half-level: 0, 1=1.0, 2=1.5 etc (we use map below)\r\n];\r\n(function fillCPM() {\r\n    // PvPoke/Niantic CPM list to 50 (every 0.5 level)\r\n    const table = [\r\n        0.094, 0.135137432, 0.16639787, 0.192650919, 0.21573247, 0.236572661, 0.25572005, 0.273530381,\r\n        0.29024988, 0.306057377, 0.3210876, 0.335445036, 0.34921268, 0.362457751, 0.37523559, 0.387592406,\r\n        0.39956728, 0.411193551, 0.42250001, 0.432926419, 0.44310755, 0.4530599578, 0.46279839, 0.472336083,\r\n        0.48168495, 0.4908558, 0.49985844, 0.508701765, 0.51739395, 0.525942511, 0.53435433, 0.542635767,\r\n        0.55079269, 0.558830576, 0.56675452, 0.574569153, 0.58227891, 0.589887907, 0.59740001, 0.604818814,\r\n        0.61215729, 0.619399365, 0.62656713, 0.633644533, 0.64065295, 0.647576426, 0.65443563, 0.661214806,\r\n        0.667934, 0.674577537, 0.68116492, 0.687680648, 0.69414365, 0.700538673, 0.70688421, 0.713164996,\r\n        0.71939909, 0.725571552, 0.7317, 0.734741009, 0.73776948, 0.740785574, 0.74378943, 0.746781211,\r\n        0.74976104, 0.752729087, 0.75568551, 0.758630378, 0.76156384, 0.764486065, 0.76739717, 0.770297266,\r\n        0.7731865, 0.776064962, 0.77893275, 0.781790055, 0.78463697, 0.787473578, 0.79030001, 0.792803968,\r\n        0.79530001, 0.797803921, 0.8003\r\n    ];\r\n    // map to half-level index: 1=>L1, 2=>L1.5 ... 99=>L50\r\n    CPM.length = 100;\r\n    CPM.fill(0);\r\n    for (let i = 0; i < table.length; i++) CPM[i + 1] = table[i];\r\n})();\r\n\r\nconst STAB = 1.2;\r\n\r\n// ---------- Type chart ----------\r\nconst TYPES = [\r\n    \"Normal\", \"Fighting\", \"Flying\", \"Poison\", \"Ground\", \"Rock\", \"Bug\", \"Ghost\", \"Steel\",\r\n    \"Fire\", \"Water\", \"Grass\", \"Electric\", \"Psychic\", \"Ice\", \"Dragon\", \"Dark\", \"Fairy\"\r\n];\r\n\r\nconst EFF = {};\r\nTYPES.forEach((att) => {\r\n    EFF[att] = {};\r\n    TYPES.forEach((def) => {\r\n        EFF[att][def] = 1.0; // neutral baseline\r\n    });\r\n});\r\n\r\nfunction S(atk, arr, m) { arr.forEach(d => EFF[atk][d] = m); }\r\nS(\"Fighting\", [\"Normal\", \"Rock\", \"Ice\", \"Dark\", \"Steel\"], 1.6); S(\"Fighting\", [\"Flying\", \"Poison\", \"Bug\", \"Psychic\", \"Fairy\"], 0.625);\r\nS(\"Flying\", [\"Fighting\", \"Bug\", \"Grass\"], 1.6); S(\"Flying\", [\"Rock\", \"Steel\", \"Electric\"], 0.625);\r\nS(\"Poison\", [\"Grass\", \"Fairy\"], 1.6); S(\"Poison\", [\"Poison\", \"Ground\", \"Rock\", \"Ghost\"], 0.625); S(\"Poison\", [\"Steel\"], 0.390625);\r\nS(\"Ground\", [\"Poison\", \"Rock\", \"Steel\", \"Fire\", \"Electric\"], 1.6); S(\"Ground\", [\"Bug\", \"Grass\"], 0.625); S(\"Ground\", [\"Flying\"], 0.390625);\r\nS(\"Rock\", [\"Flying\", \"Bug\", \"Fire\", \"Ice\"], 1.6); S(\"Rock\", [\"Fighting\", \"Ground\", \"Steel\"], 0.625);\r\nS(\"Bug\", [\"Grass\", \"Psychic\", \"Dark\"], 1.6); S(\"Bug\", [\"Fighting\", \"Flying\", \"Poison\", \"Ghost\", \"Steel\", \"Fire\", \"Fairy\"], 0.625);\r\nS(\"Ghost\", [\"Ghost\", \"Psychic\"], 1.6); S(\"Ghost\", [\"Dark\"], 0.625); // Normal-on-Ghost handled by move type\r\nS(\"Steel\", [\"Rock\", \"Ice\", \"Fairy\"], 1.6); S(\"Steel\", [\"Steel\", \"Fire\", \"Water\", \"Electric\"], 0.625);\r\nS(\"Fire\", [\"Bug\", \"Steel\", \"Grass\", \"Ice\"], 1.6); S(\"Fire\", [\"Rock\", \"Fire\", \"Water\", \"Dragon\"], 0.625);\r\nS(\"Water\", [\"Ground\", \"Rock\", \"Fire\"], 1.6); S(\"Water\", [\"Water\", \"Grass\", \"Dragon\"], 0.625);\r\nS(\"Grass\", [\"Ground\", \"Rock\", \"Water\"], 1.6); S(\"Grass\", [\"Flying\", \"Poison\", \"Bug\", \"Steel\", \"Fire\", \"Grass\", \"Dragon\"], 0.625);\r\nS(\"Electric\", [\"Flying\", \"Water\"], 1.6); S(\"Electric\", [\"Grass\", \"Electric\", \"Dragon\"], 0.625); S(\"Electric\", [\"Ground\"], 0.390625);\r\nS(\"Psychic\", [\"Fighting\", \"Poison\"], 1.6); S(\"Psychic\", [\"Psychic\", \"Steel\"], 0.625); S(\"Psychic\", [\"Dark\"], 0.390625);\r\nS(\"Ice\", [\"Flying\", \"Ground\", \"Grass\", \"Dragon\"], 1.6); S(\"Ice\", [\"Steel\", \"Fire\", \"Water\", \"Ice\"], 0.625);\r\nS(\"Dragon\", [\"Dragon\"], 1.6); S(\"Dragon\", [\"Steel\"], 0.625); S(\"Dragon\", [\"Fairy\"], 0.390625);\r\nS(\"Dark\", [\"Ghost\", \"Psychic\"], 1.6); S(\"Dark\", [\"Fighting\", \"Dark\", \"Fairy\"], 0.625);\r\nS(\"Fairy\", [\"Fighting\", \"Dragon\", \"Dark\"], 1.6); S(\"Fairy\", [\"Poison\", \"Steel\", \"Fire\"], 0.625);\r\n\r\nfunction tcase(s) { return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase(); }\r\nfunction normType(s) {\r\n    if (!s) return null;\r\n    const raw = String(s).replace(/^POKEMON_TYPE_/, '').replace(/_/g, ' ').trim().toLowerCase();\r\n    const T = tcase(raw);\r\n    return TYPES.includes(T) ? T : null;\r\n}\r\nfunction normId(s) { return String(s || '').toLowerCase().replace(/[^\\w]+/g, '_').replace(/^_+|_+$/g, ''); }\r\n\r\nfunction eff(moveType, defendTypes) {\r\n    let m = 1;\r\n    for (const t of defendTypes) { m *= (EFF[moveType]?.[t] ?? 1); }\r\n    return m;\r\n}\r\n\r\n// ---------- Damage & CP ----------\r\nfunction damage(pwr, atk, def, stab, effm) {\r\n    // PvP damage: floor(0.5 * PWR * Atk/Def * STAB * Eff) + 1\r\n    return Math.max(1, Math.floor(0.5 * pwr * (atk / def) * stab * effm) + 1);\r\n}\r\nfunction cp(atk, def, sta, cpm) {\r\n    return Math.floor((atk * Math.sqrt(def) * Math.sqrt(sta) * cpm * cpm) / 10);\r\n}\r\nfunction levelForCap(baseAtk, baseDef, baseSta, cap) {\r\n    if (!isFinite(cap)) return 100; // treat as level 50\r\n    let bestLvlIndex = 99; // 50\r\n    for (let i = 99; i >= 1; i--) {\r\n        const cpm = CPM[i];\r\n        const cAtk = baseAtk * cpm, cDef = baseDef * cpm, cSta = baseSta * cpm;\r\n        if (cp(cAtk, cDef, cSta, 1) <= cap) { bestLvlIndex = i; break; }\r\n    }\r\n    return bestLvlIndex;\r\n}\r\n\r\n// ---------- Build books ----------\r\nfunction buildSpeciesBook(gm) {\r\n    const poke = gm?.pokemon || gm?.data?.pokemon || gm?.species || [];\r\n    const out = {};\r\n    for (const p of poke) {\r\n        const id = normId(p.speciesId || p.pokemonId || p.id || p.name || p.templateId);\r\n        if (!id) continue;\r\n        const types = [normType(p.type1 || p.types?.[0]), normType(p.type2 || p.types?.[1])].filter(Boolean);\r\n        const atk = Number(p.baseAttack ?? p.stats?.atk ?? p.attack ?? 200);\r\n        const def = Number(p.baseDefense ?? p.stats?.def ?? p.defense ?? 200);\r\n        const sta = Number(p.baseStamina ?? p.stats?.sta ?? p.stamina ?? 200);\r\n        out[id] = { atk, def, sta, types: types.length ? types : [\"Normal\"] };\r\n    }\r\n    return out;\r\n}\r\n\r\nexport function buildMoveBook(gm) {\r\n    SPECIES = buildSpeciesBook(gm);\r\n    const pools = [gm?.moves, gm?.combatMoves, gm?.data?.moves, gm?.data?.combatMoves, gm?.moveList].filter(Boolean);\r\n    const book = {};\r\n    for (const list of pools) {\r\n        for (const m of list) {\r\n            const id = String(m.moveId ?? m.id ?? m.uniqueId ?? m.templateId ?? m.name ?? '');\r\n            if (!id) continue;\r\n            const type = normType(m.type || m.pokemonType || m.moveType) || \"Normal\";\r\n            const power = Number(m.pvpPower ?? m.power ?? m.combatPower ?? m.damage ?? 0);\r\n            // Niantic fields: energyDelta (>0 fast, <0 charged), durationTurns for PVP\r\n            let energyGain = 0, energyCost = 0, kind = \"fast\", turns = 1;\r\n            if (m.energyDelta != null) {\r\n                const d = Number(m.energyDelta);\r\n                if (d > 0) { energyGain = d; kind = \"fast\"; }\r\n                if (d < 0) { energyCost = Math.abs(d); kind = \"charged\"; }\r\n            }\r\n            if (m.energy != null) { energyCost = Math.abs(Number(m.energy)); kind = \"charged\"; }\r\n            if (m.energyGain != null) { energyGain = Number(m.energyGain); kind = \"fast\"; }\r\n            turns = Number(m.durationTurns ?? m.turns ?? m.cooldownTurns ?? (kind === \"fast\" ? 1 : 0)) || (kind === \"fast\" ? 1 : 0);\r\n\r\n            const prev = book[id];\r\n            if (!prev || power > prev.power) {\r\n                book[id] = { id, kind, type, power, energyGain, energyCost, turns };\r\n            }\r\n        }\r\n    }\r\n    MOVES = book;\r\n    return book;\r\n}\r\n\r\n// ---------- Choose charged by expected damage vs defender ----------\r\nfunction bestCharged(att, def) {\r\n    let best = null, bestScore = -Infinity;\r\n    for (const id of (att.chargedMoves || [])) {\r\n        const m = MOVES[id];\r\n        if (!m || m.kind !== \"charged\") continue;\r\n        const stab = att.types.includes(m.type) ? STAB : 1;\r\n        const effm = eff(m.type, def.types);\r\n        const dmg = damage(m.power, att.Atk, def.Def, stab, effm);\r\n        const dpe = (m.power || 0) / (m.energyCost || 45);\r\n        const score = dmg * 1.0 + dpe * 2.5; // bias to moves that actually chunk\r\n        if (score > bestScore) { bestScore = score; best = m; }\r\n    }\r\n    return best;\r\n}\r\n\r\n// ---------- Duel simulation ----------\r\nexport function simulateDuel(attackerIn, defenderIn, shieldsA = 2, shieldsB = 2, _book = MOVES, leagueName = \"Master League\") {\r\n    const cap = LEAGUE_CAP[leagueName] ?? (isFinite(leagueName) ? Number(leagueName) : Infinity);\r\n\r\n    function enrichSide(src) {\r\n        const id = normId(src.speciesId || src.name);\r\n        const base = SPECIES[id] || { atk: 200, def: 200, sta: 200, types: [\"Normal\"] };\r\n        const lvlIndex = levelForCap(base.atk, base.def, base.sta, cap);\r\n        const cpm = CPM[lvlIndex] || CPM[99];\r\n\r\n        const Atk = base.atk * cpm, Def = base.def * cpm, Sta = Math.floor(base.sta * cpm) * 2; // Sta scaled to feel tanky\r\n        const fast = MOVES[src.fastMove] || null;\r\n        const charged = (src.chargedMoves || []).filter(id => !!MOVES[id]);\r\n\r\n        return {\r\n            name: src.name || src.speciesId,\r\n            speciesId: id,\r\n            types: base.types,\r\n            Atk, Def, MaxHP: Sta, HP: Sta,\r\n            energy: 0,\r\n            fast, chargedMoves: charged,\r\n            rec: null // populated below\r\n        };\r\n    }\r\n\r\n    const A = enrichSide(attackerIn);\r\n    const B = enrichSide(defenderIn);\r\n\r\n    // pick recs now (per-defender)\r\n    A.rec = bestCharged(A, B);\r\n    B.rec = bestCharged(B, A);\r\n\r\n    const MAX_TURNS = 2000; // each fast turn ~0.5s, plenty\r\n    let aSh = Math.max(0, shieldsA | 0), bSh = Math.max(0, shieldsB | 0);\r\n    let t = 0;\r\n\r\n    function canThrow(user) { // any affordable charged?\r\n        for (const id of user.chargedMoves) {\r\n            const m = MOVES[id]; if (!m || m.kind !== \"charged\") continue;\r\n            if (user.energy >= (m.energyCost || 45)) return true;\r\n        } return false;\r\n    }\r\n    function chooseThrow(user, foe) {\r\n        // take highest expected damage move we can afford\r\n        let pick = null, best = -Infinity;\r\n        for (const id of user.chargedMoves) {\r\n            const m = MOVES[id]; if (!m || m.kind !== \"charged\") continue;\r\n            if (user.energy < (m.energyCost || 45)) continue;\r\n            const stab = user.types.includes(m.type) ? STAB : 1;\r\n            const effm = eff(m.type, foe.types);\r\n            const dmg = damage(m.power, user.Atk, foe.Def, stab, effm);\r\n            if (dmg > best) { best = dmg; pick = m; }\r\n        }\r\n        return pick;\r\n    }\r\n    function shouldShield(foeMove, user) { // smart-ish: shield if KO or big chunk >= 35% HP\r\n        const stab = (user.types.includes(foeMove.type) ? STAB : 1); // irrelevant: foe�s STAB, but we need foe�s types; safe approx\r\n        // use foe�s STAB by passing via outer chooseThrow; we calculate damage using foe�s Atk vs our Def below\r\n        return false; // placeholder overridden below\r\n    }\r\n\r\n    const log = [];\r\n\r\n    while (A.HP > 0 && B.HP > 0 && t < MAX_TURNS) {\r\n        t++;\r\n\r\n        // advance fast move turns & energy\r\n        if (A.fast) { if (t % (A.fast.turns || 1) === 0) A.energy += (A.fast.energyGain || 0); }\r\n        if (B.fast) { if (t % (B.fast.turns || 1) === 0) B.energy += (B.fast.energyGain || 0); }\r\n\r\n        // Both decide to throw?\r\n        const aMove = canThrow(A) ? chooseThrow(A, B) : null;\r\n        const bMove = canThrow(B) ? chooseThrow(B, A) : null;\r\n\r\n        // CMP: higher Atk throws first when both can\r\n        const aFirst = aMove && bMove ? (A.Atk >= B.Atk) : !!aMove;\r\n\r\n        function resolveThrow(user, foe, move, foeShieldsRef, who) {\r\n            if (!move) return;\r\n            // smart shield decision for foe\r\n            const stab = (user.types.includes(move.type) ? STAB : 1);\r\n            const mult = eff(move.type, foe.types);\r\n            const hit = damage(move.power, user.Atk, foe.Def, stab, mult);\r\n            let shielded = false;\r\n            if (who === \"A\" && bSh > 0) {\r\n                // B should shield if KO or >= 0.35 HP chunk\r\n                if (hit >= foe.HP || hit >= foe.MaxHP * 0.35) { bSh--; shielded = true; }\r\n            } else if (who === \"B\" && aSh > 0) {\r\n                if (hit >= foe.HP || hit >= foe.MaxHP * 0.35) { aSh--; shielded = true; }\r\n            }\r\n\r\n            if (!shielded) { foe.HP = Math.max(0, foe.HP - hit); }\r\n            user.energy -= (move.energyCost || 45);\r\n            log.push(`${who} throws ${move.id}${shielded ? ' (shielded)' : ''}`);\r\n        }\r\n\r\n        if (aFirst) {\r\n            // A throws or fasts\r\n            if (aMove) resolveThrow(A, B, aMove, () => bSh, \"A\");\r\n            else if (A.fast && t % (A.fast.turns || 1) === 0) {\r\n                const hit = damage(A.fast.power || 1, A.Atk, B.Def, A.types.includes(A.fast.type) ? STAB : 1, eff(A.fast.type, B.types));\r\n                B.HP = Math.max(0, B.HP - hit);\r\n            }\r\n            if (B.HP <= 0) break;\r\n\r\n            // B acts\r\n            if (bMove) resolveThrow(B, A, bMove, () => aSh, \"B\");\r\n            else if (B.fast && t % (B.fast.turns || 1) === 0) {\r\n                const hit = damage(B.fast.power || 1, B.Atk, A.Def, B.types.includes(B.fast.type) ? STAB : 1, eff(B.fast.type, A.types));\r\n                A.HP = Math.max(0, A.HP - hit);\r\n            }\r\n            if (A.HP <= 0) break;\r\n\r\n        } else {\r\n            // B first\r\n            if (bMove) resolveThrow(B, A, bMove, () => aSh, \"B\");\r\n            else if (B.fast && t % (B.fast.turns || 1) === 0) {\r\n                const hit = damage(B.fast.power || 1, B.Atk, A.Def, B.types.includes(B.fast.type) ? STAB : 1, eff(B.fast.type, A.types));\r\n                A.HP = Math.max(0, A.HP - hit);\r\n            }\r\n            if (A.HP <= 0) break;\r\n\r\n            if (aMove) resolveThrow(A, B, aMove, () => bSh, \"A\");\r\n            else if (A.fast && t % (A.fast.turns || 1) === 0) {\r\n                const hit = damage(A.fast.power || 1, A.Atk, B.Def, A.types.includes(A.fast.type) ? STAB : 1, eff(A.fast.type, B.types));\r\n                B.HP = Math.max(0, B.HP - hit);\r\n            }\r\n            if (B.HP <= 0) break;\r\n        }\r\n    }\r\n\r\n    const winner =\r\n        A.HP <= 0 && B.HP <= 0 ? \"Draw\" :\r\n            A.HP <= 0 ? B.name :\r\n                B.HP <= 0 ? A.name :\r\n                    (A.HP === B.HP ? \"Draw\" : (A.HP > B.HP ? A.name : B.name));\r\n\r\n    return {\r\n        winner,\r\n        aHP: Math.round((A.HP / A.MaxHP) * 100), // percentage for your UI bars\r\n        bHP: Math.round((B.HP / B.MaxHP) * 100),\r\n        aRecommended: A.rec?.id || null,\r\n        bRecommended: B.rec?.id || null,\r\n        summary: log.slice(0, 12)\r\n    };\r\n}\r\n\r\n// Rank your 3 vs one enemy (returns same shape you already use)\r\nexport function bestOfThree(mine, enemy, myShields, foeShields, _book = MOVES, leagueName = \"Master League\") {\r\n    const fights = mine.map(m => {\r\n        const you = { ...m, name: m.name || m.speciesId };\r\n        const foe = { ...enemy, name: enemy.name || enemy.speciesId };\r\n        const r = simulateDuel(you, foe, myShields, foeShields, MOVES, leagueName);\r\n        const score = r.winner === you.name ? 1 : (r.winner === \"Draw\" ? 0 : -1);\r\n        return { you: you.name, vs: foe.name, ...r, score };\r\n    });\r\n    fights.sort((a, b) => (b.score - a.score) || (b.aHP - a.aHP) || (b.bHP - a.bHP));\r\n    return { best: fights[0], fights };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}