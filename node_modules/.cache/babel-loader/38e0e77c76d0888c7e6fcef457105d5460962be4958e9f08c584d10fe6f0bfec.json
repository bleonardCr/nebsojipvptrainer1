{"ast":null,"code":"// /src/engine/battleEngine.js\n// Robust PvP-lite battle engine using your PvPoke-style gamemaster.\n// Goals: never crash on bad IDs, normalize names, shield + turn logic, correct STAB/type, deterministic outcome.\n// Returns percent HP so UI bars work immediately.\n\nimport gamemaster from \"../Data/gamemaster.json\";\n\n/* ===================== Normalization & helpers ===================== */\n\nfunction canonMoveId(s) {\n  return String(s || \"\").trim().replace(/^COMBAT_V\\d+_MOVE_/i, \"\").replace(/^V\\d+_/i, \"\").replace(/[^A-Za-z0-9]+/g, \"_\").replace(/_+/g, \"_\").replace(/^_|_$/g, \"\").toUpperCase(); // MOVES are keyed UPPER_SNAKE\n}\nfunction normalizeSpeciesId(s) {\n  // UI labels like \"Zacian (Crowned Sword)\" â†’ \"zacian_crowned_sword\" (PvPoke speciesId style)\n  return String(s || \"\").toLowerCase().trim().replace(/[^a-z0-9]+/g, \"_\").replace(/^_+|_+$/g, \"\");\n}\nfunction clamp(v, lo, hi) {\n  return Math.max(lo, Math.min(hi, v));\n}\n\n/* ===================== Build data maps from gamemaster ===================== */\n\n// MOVES: robust parsing for both fast/charged\nconst MOVES = {};\n(function buildMoves(_gamemaster$data) {\n  const list = (gamemaster === null || gamemaster === void 0 ? void 0 : gamemaster.moves) || (gamemaster === null || gamemaster === void 0 ? void 0 : (_gamemaster$data = gamemaster.data) === null || _gamemaster$data === void 0 ? void 0 : _gamemaster$data.moves) || [];\n  for (const m of list) {\n    var _ref, _ref2, _ref3, _m$moveId, _ref4, _ref5, _ref6, _m$pvpPower, _ref7, _m$durationTurns;\n    const id = canonMoveId((_ref = (_ref2 = (_ref3 = (_m$moveId = m.moveId) !== null && _m$moveId !== void 0 ? _m$moveId : m.id) !== null && _ref3 !== void 0 ? _ref3 : m.uniqueId) !== null && _ref2 !== void 0 ? _ref2 : m.templateId) !== null && _ref !== void 0 ? _ref : m.name);\n    if (!id) continue;\n    const type = String(m.type || m.pokemonType || m.moveType || \"Normal\").replace(/^POKEMON_TYPE_/, \"\").toLowerCase();\n    const power = Number((_ref4 = (_ref5 = (_ref6 = (_m$pvpPower = m.pvpPower) !== null && _m$pvpPower !== void 0 ? _m$pvpPower : m.power) !== null && _ref6 !== void 0 ? _ref6 : m.combatPower) !== null && _ref5 !== void 0 ? _ref5 : m.damage) !== null && _ref4 !== void 0 ? _ref4 : 0) || 0;\n\n    // Energy/turns inference (PvP)\n    let energyGain = 0;\n    let energyCost = 0;\n    if (m.energyDelta != null) {\n      const ed = Number(m.energyDelta) || 0;\n      if (ed > 0) energyGain = ed; // fast\n      if (ed < 0) energyCost = Math.abs(ed); // charged\n    }\n    if (m.energyGain != null) energyGain = Number(m.energyGain) || energyGain; // fast (alt)\n    if (m.energy != null) energyCost = Math.abs(Number(m.energy)) || energyCost; // charged (alt)\n\n    let turns = Number((_ref7 = (_m$durationTurns = m.durationTurns) !== null && _m$durationTurns !== void 0 ? _m$durationTurns : m.turns) !== null && _ref7 !== void 0 ? _ref7 : m.cooldownTurns);\n    if (!Number.isFinite(turns)) turns = energyGain > 0 ? 1 : 0; // fast needs >=1\n    if (energyGain > 0) turns = Math.max(1, Math.floor(turns) || 1);\n    MOVES[id] = {\n      id,\n      type,\n      power,\n      energyGain,\n      // fast-only\n      energy: energyCost,\n      // charged-only (positive)\n      turns // fast move duration in 0.5s turns\n    };\n  }\n\n  // Safe fallback fast move\n  if (!MOVES.TACKLE) {\n    MOVES.TACKLE = {\n      id: \"TACKLE\",\n      type: \"normal\",\n      power: 3,\n      energyGain: 8,\n      energy: 0,\n      turns: 1\n    };\n  }\n})();\n\n// POKEDEX: species map, keyed by both exact speciesId and normalized speciesId\nconst POKEDEX = {};\nconst POKEDEX_NORM = {};\n(function buildDex(_gamemaster$data2) {\n  const list = (gamemaster === null || gamemaster === void 0 ? void 0 : gamemaster.pokemon) || (gamemaster === null || gamemaster === void 0 ? void 0 : (_gamemaster$data2 = gamemaster.data) === null || _gamemaster$data2 === void 0 ? void 0 : _gamemaster$data2.pokemon) || [];\n  for (const p of list) {\n    var _ref8, _stats$atk, _ref9, _stats$def, _ref0, _ref1, _stats$hp;\n    if (!(p !== null && p !== void 0 && p.speciesId)) continue;\n    const exact = String(p.speciesId);\n    const norm = normalizeSpeciesId(exact);\n    const stats = p.stats || p.baseStats || {};\n    const typesRaw = p.types || [p.type1, p.type2].filter(Boolean);\n    const types = (typesRaw || []).map(t => String(t).replace(/^POKEMON_TYPE_/, \"\").toLowerCase());\n    const entry = {\n      speciesId: exact,\n      types: types.length ? types : [\"normal\"],\n      stats: {\n        atk: Number((_ref8 = (_stats$atk = stats.atk) !== null && _stats$atk !== void 0 ? _stats$atk : stats.attack) !== null && _ref8 !== void 0 ? _ref8 : 0) || 0,\n        def: Number((_ref9 = (_stats$def = stats.def) !== null && _stats$def !== void 0 ? _stats$def : stats.defense) !== null && _ref9 !== void 0 ? _ref9 : 0) || 0,\n        hp: Number((_ref0 = (_ref1 = (_stats$hp = stats.hp) !== null && _stats$hp !== void 0 ? _stats$hp : stats.sta) !== null && _ref1 !== void 0 ? _ref1 : stats.stamina) !== null && _ref0 !== void 0 ? _ref0 : 0) || 0\n      }\n    };\n    POKEDEX[exact] = entry;\n    POKEDEX_NORM[norm] = entry;\n  }\n})();\nfunction lookupSpecies(speciesId) {\n  if (!speciesId) return null;\n  return POKEDEX[speciesId] || POKEDEX_NORM[normalizeSpeciesId(speciesId)] || null;\n}\nfunction lookupMove(id) {\n  if (!id) return null;\n  return MOVES[canonMoveId(id)] || null;\n}\n\n/* ===================== Type chart (full 18 types) ===================== */\n\n// Build effectiveness with defaults = 1\nconst TYPES = [\"normal\", \"fighting\", \"flying\", \"poison\", \"ground\", \"rock\", \"bug\", \"ghost\", \"steel\", \"fire\", \"water\", \"grass\", \"electric\", \"psychic\", \"ice\", \"dragon\", \"dark\", \"fairy\"];\nconst EFF = {};\nfor (const a of TYPES) {\n  EFF[a] = {};\n  for (const d of TYPES) EFF[a][d] = 1;\n}\nfunction S(atk, arr, m) {\n  for (const d of arr) EFF[atk][d] = m;\n}\n_c = S;\nS(\"fighting\", [\"normal\", \"rock\", \"ice\", \"dark\", \"steel\"], 1.6);\nS(\"fighting\", [\"flying\", \"poison\", \"bug\", \"psychic\", \"fairy\"], 0.625);\nS(\"fighting\", [\"ghost\"], 0.390625);\nS(\"flying\", [\"fighting\", \"bug\", \"grass\"], 1.6);\nS(\"flying\", [\"rock\", \"steel\", \"electric\"], 0.625);\nS(\"poison\", [\"grass\", \"fairy\"], 1.6);\nS(\"poison\", [\"poison\", \"ground\", \"rock\", \"ghost\"], 0.625);\nS(\"poison\", [\"steel\"], 0.390625);\nS(\"ground\", [\"poison\", \"rock\", \"steel\", \"fire\", \"electric\"], 1.6);\nS(\"ground\", [\"bug\", \"grass\"], 0.625);\nS(\"ground\", [\"flying\"], 0.390625);\nS(\"rock\", [\"flying\", \"bug\", \"fire\", \"ice\"], 1.6);\nS(\"rock\", [\"fighting\", \"ground\", \"steel\"], 0.625);\nS(\"bug\", [\"grass\", \"psychic\", \"dark\"], 1.6);\nS(\"bug\", [\"fighting\", \"flying\", \"poison\", \"ghost\", \"steel\", \"fire\", \"fairy\"], 0.625);\nS(\"ghost\", [\"ghost\", \"psychic\"], 1.6);\nS(\"ghost\", [\"dark\"], 0.625);\nS(\"ghost\", [\"normal\"], 0.390625);\nS(\"steel\", [\"rock\", \"ice\", \"fairy\"], 1.6);\nS(\"steel\", [\"steel\", \"fire\", \"water\", \"electric\"], 0.625);\nS(\"fire\", [\"bug\", \"steel\", \"grass\", \"ice\"], 1.6);\nS(\"fire\", [\"rock\", \"fire\", \"water\", \"dragon\"], 0.625);\nS(\"water\", [\"ground\", \"rock\", \"fire\"], 1.6);\nS(\"water\", [\"water\", \"grass\", \"dragon\"], 0.625);\nS(\"grass\", [\"ground\", \"rock\", \"water\"], 1.6);\nS(\"grass\", [\"flying\", \"poison\", \"bug\", \"steel\", \"fire\", \"grass\", \"dragon\"], 0.625);\nS(\"electric\", [\"flying\", \"water\"], 1.6);\nS(\"electric\", [\"grass\", \"electric\", \"dragon\"], 0.625);\nS(\"electric\", [\"ground\"], 0.390625);\nS(\"psychic\", [\"fighting\", \"poison\"], 1.6);\nS(\"psychic\", [\"psychic\", \"steel\"], 0.625);\nS(\"psychic\", [\"dark\"], 0.390625);\nS(\"ice\", [\"flying\", \"ground\", \"grass\", \"dragon\"], 1.6);\nS(\"ice\", [\"steel\", \"fire\", \"water\", \"ice\"], 0.625);\nS(\"dragon\", [\"dragon\"], 1.6);\nS(\"dragon\", [\"steel\"], 0.625);\nS(\"dragon\", [\"fairy\"], 0.390625);\nS(\"dark\", [\"ghost\", \"psychic\"], 1.6);\nS(\"dark\", [\"fighting\", \"dark\", \"fairy\"], 0.625);\nS(\"fairy\", [\"fighting\", \"dragon\", \"dark\"], 1.6);\nS(\"fairy\", [\"poison\", \"steel\", \"fire\"], 0.625);\nfunction typeMult(moveType, defenderTypes) {\n  let m = 1;\n  for (const t of defenderTypes || []) {\n    var _EFF$moveType$t, _EFF$moveType;\n    m *= (_EFF$moveType$t = (_EFF$moveType = EFF[moveType]) === null || _EFF$moveType === void 0 ? void 0 : _EFF$moveType[t]) !== null && _EFF$moveType$t !== void 0 ? _EFF$moveType$t : 1;\n  }\n  return m;\n}\n\n/* ===================== Damage ===================== */\n\nconst STAB = 1.2; // PvP STAB\nfunction pvpDamage(power, atk, def, stab, eff) {\n  // Floor(0.5 * Power * (Atk/Def) * STAB * Effectiveness) + 1\n  const raw = 0.5 * power * (atk / Math.max(1, def)) * (stab || 1) * (eff || 1);\n  return Math.floor(raw) + 1;\n}\n\n/* ===================== Battler construction ===================== */\n\nfunction makeBattler(input) {\n  // input: { speciesId, fastMove, chargedMoves[], shields, level? }\n  const base = lookupSpecies(input === null || input === void 0 ? void 0 : input.speciesId);\n  if (!base) {\n    console.warn(`Engine: species not found ->`, input === null || input === void 0 ? void 0 : input.speciesId);\n    return {\n      speciesId: (input === null || input === void 0 ? void 0 : input.speciesId) || \"unknown\",\n      types: [],\n      atk: 0,\n      def: 0,\n      hpMax: 0,\n      hp: 0,\n      shields: (input === null || input === void 0 ? void 0 : input.shields) | 0,\n      energy: 0,\n      fast: MOVES.TACKLE,\n      charged: [],\n      fastTurnsLeft: MOVES.TACKLE.turns || 1\n    };\n  }\n  const fast = lookupMove(input === null || input === void 0 ? void 0 : input.fastMove) || MOVES.TACKLE;\n  const charged = ((input === null || input === void 0 ? void 0 : input.chargedMoves) || []).map(lookupMove).filter(Boolean);\n  const atk = base.stats.atk || 0;\n  const def = base.stats.def || 0;\n  const hpMax = base.stats.hp || 0;\n  return {\n    speciesId: base.speciesId,\n    types: base.types || [],\n    atk,\n    def,\n    hpMax,\n    hp: hpMax,\n    shields: Number(input === null || input === void 0 ? void 0 : input.shields) | 0,\n    energy: 0,\n    fast,\n    charged,\n    fastTurnsLeft: fast.turns || 1\n  };\n}\n\n/* ===================== Battle core ===================== */\n\nexport function simulateBattle(p1In, p2In) {\n  // p1In/p2In minimal shape: { speciesId, fastMove, chargedMoves, shields }\n  const A = makeBattler(p1In);\n  const B = makeBattler(p2In);\n  const MAX_TURNS = 1000; // 500s\n  for (let t = 1; t <= MAX_TURNS; t++) {\n    if (A.hp <= 0 || B.hp <= 0) break;\n\n    // Determine actions\n    const aCharged = pickReadyCharged(A, B);\n    const bCharged = pickReadyCharged(B, A);\n\n    // Resolve charged first; if both, CMP via true Atk (break ties by speciesId)\n    if (aCharged || bCharged) {\n      const first = aCharged && bCharged ? A.atk === B.atk ? A.speciesId < B.speciesId ? \"A\" : \"B\" : A.atk > B.atk ? \"A\" : \"B\" : aCharged ? \"A\" : \"B\";\n      if (first === \"A\") {\n        resolveCharged(A, B, aCharged);\n        if (B.hp <= 0) break;\n        if (bCharged) resolveCharged(B, A, bCharged);\n      } else {\n        resolveCharged(B, A, bCharged);\n        if (A.hp <= 0) break;\n        if (aCharged) resolveCharged(A, B, aCharged);\n      }\n\n      // Using a charged consumes your turn; reset fast windows\n      if (aCharged) A.fastTurnsLeft = A.fast.turns || 1;\n      if (bCharged) B.fastTurnsLeft = B.fast.turns || 1;\n      continue;\n    }\n\n    // Otherwise progress fast moves simultaneously\n    stepFast(A, B);\n    if (B.hp <= 0) break;\n    stepFast(B, A);\n    if (A.hp <= 0) break;\n  }\n  const result = A.hp <= 0 && B.hp <= 0 ? \"draw\" : B.hp <= 0 ? \"p1\" : A.hp <= 0 ? \"p2\" : \"timeout\";\n  return {\n    result,\n    p1: {\n      hp: A.hpMax ? Math.round(A.hp / A.hpMax * 100) : 0,\n      shields: A.shields,\n      energy: A.energy\n    },\n    p2: {\n      hp: B.hpMax ? Math.round(B.hp / B.hpMax * 100) : 0,\n      shields: B.shields,\n      energy: B.energy\n    }\n  };\n}\nfunction pickReadyCharged(me, opp) {\n  // Choose highest damage charged that is ready; else null\n  const ready = me.charged.filter(m => me.energy >= (m.energy || 999));\n  if (!ready.length) return null;\n  let best = ready[0],\n    bestVal = -1;\n  for (const m of ready) {\n    const dmg = projDamage(me, opp, m);\n    const score = dmg + (100 - (m.energy || 100)) * 0.05;\n    if (score > bestVal) {\n      bestVal = score;\n      best = m;\n    }\n  }\n  return best;\n}\nfunction resolveCharged(att, def, move) {\n  if (!move) return;\n  if (def.shields > 0) {\n    def.shields -= 1; // shield consumes, no damage\n  } else {\n    def.hp = Math.max(0, def.hp - projDamage(att, def, move));\n  }\n  att.energy = clamp(att.energy - (move.energy || 0), 0, 100);\n}\nfunction stepFast(att, def) {\n  att.fastTurnsLeft -= 1;\n  if (att.fastTurnsLeft <= 0) {\n    // Fast move lands now\n    def.hp = Math.max(0, def.hp - projDamage(att, def, att.fast));\n    att.energy = clamp(att.energy + (att.fast.energyGain || 0), 0, 100);\n    att.fastTurnsLeft = att.fast.turns || 1;\n  }\n}\nfunction projDamage(att, def, move) {\n  if (!move) return 0;\n  const stab = att.types.includes(move.type) ? STAB : 1;\n  const eff = typeMult(move.type, def.types);\n  return pvpDamage(move.power || 0, att.atk, def.def, stab, eff);\n}\nvar _c;\n$RefreshReg$(_c, \"S\");","map":{"version":3,"names":["gamemaster","canonMoveId","s","String","trim","replace","toUpperCase","normalizeSpeciesId","toLowerCase","clamp","v","lo","hi","Math","max","min","MOVES","buildMoves","_gamemaster$data","list","moves","data","m","_ref","_ref2","_ref3","_m$moveId","_ref4","_ref5","_ref6","_m$pvpPower","_ref7","_m$durationTurns","id","moveId","uniqueId","templateId","name","type","pokemonType","moveType","power","Number","pvpPower","combatPower","damage","energyGain","energyCost","energyDelta","ed","abs","energy","turns","durationTurns","cooldownTurns","isFinite","floor","TACKLE","POKEDEX","POKEDEX_NORM","buildDex","_gamemaster$data2","pokemon","p","_ref8","_stats$atk","_ref9","_stats$def","_ref0","_ref1","_stats$hp","speciesId","exact","norm","stats","baseStats","typesRaw","types","type1","type2","filter","Boolean","map","t","entry","length","atk","attack","def","defense","hp","sta","stamina","lookupSpecies","lookupMove","TYPES","EFF","a","d","S","arr","_c","typeMult","defenderTypes","_EFF$moveType$t","_EFF$moveType","STAB","pvpDamage","stab","eff","raw","makeBattler","input","base","console","warn","hpMax","shields","fast","charged","fastTurnsLeft","fastMove","chargedMoves","simulateBattle","p1In","p2In","A","B","MAX_TURNS","aCharged","pickReadyCharged","bCharged","first","resolveCharged","stepFast","result","p1","round","p2","me","opp","ready","best","bestVal","dmg","projDamage","score","att","move","includes","$RefreshReg$"],"sources":["C:/Users/ben/Projects/nebsojipvptrainer/src/engine/battleEngine.js"],"sourcesContent":["// /src/engine/battleEngine.js\r\n// Robust PvP-lite battle engine using your PvPoke-style gamemaster.\r\n// Goals: never crash on bad IDs, normalize names, shield + turn logic, correct STAB/type, deterministic outcome.\r\n// Returns percent HP so UI bars work immediately.\r\n\r\nimport gamemaster from \"../Data/gamemaster.json\";\r\n\r\n/* ===================== Normalization & helpers ===================== */\r\n\r\nfunction canonMoveId(s) {\r\n    return String(s || \"\")\r\n        .trim()\r\n        .replace(/^COMBAT_V\\d+_MOVE_/i, \"\")\r\n        .replace(/^V\\d+_/i, \"\")\r\n        .replace(/[^A-Za-z0-9]+/g, \"_\")\r\n        .replace(/_+/g, \"_\")\r\n        .replace(/^_|_$/g, \"\")\r\n        .toUpperCase(); // MOVES are keyed UPPER_SNAKE\r\n}\r\n\r\nfunction normalizeSpeciesId(s) {\r\n    // UI labels like \"Zacian (Crowned Sword)\" â†’ \"zacian_crowned_sword\" (PvPoke speciesId style)\r\n    return String(s || \"\")\r\n        .toLowerCase()\r\n        .trim()\r\n        .replace(/[^a-z0-9]+/g, \"_\")\r\n        .replace(/^_+|_+$/g, \"\");\r\n}\r\n\r\nfunction clamp(v, lo, hi) { return Math.max(lo, Math.min(hi, v)); }\r\n\r\n/* ===================== Build data maps from gamemaster ===================== */\r\n\r\n// MOVES: robust parsing for both fast/charged\r\nconst MOVES = {};\r\n(function buildMoves() {\r\n    const list = gamemaster?.moves || gamemaster?.data?.moves || [];\r\n    for (const m of list) {\r\n        const id = canonMoveId(m.moveId ?? m.id ?? m.uniqueId ?? m.templateId ?? m.name);\r\n        if (!id) continue;\r\n\r\n        const type = String(m.type || m.pokemonType || m.moveType || \"Normal\").replace(/^POKEMON_TYPE_/, \"\").toLowerCase();\r\n        const power = Number(m.pvpPower ?? m.power ?? m.combatPower ?? m.damage ?? 0) || 0;\r\n\r\n        // Energy/turns inference (PvP)\r\n        let energyGain = 0;\r\n        let energyCost = 0;\r\n        if (m.energyDelta != null) {\r\n            const ed = Number(m.energyDelta) || 0;\r\n            if (ed > 0) energyGain = ed;           // fast\r\n            if (ed < 0) energyCost = Math.abs(ed); // charged\r\n        }\r\n        if (m.energyGain != null) energyGain = Number(m.energyGain) || energyGain; // fast (alt)\r\n        if (m.energy != null) energyCost = Math.abs(Number(m.energy)) || energyCost; // charged (alt)\r\n\r\n        let turns = Number(m.durationTurns ?? m.turns ?? m.cooldownTurns);\r\n        if (!Number.isFinite(turns)) turns = energyGain > 0 ? 1 : 0; // fast needs >=1\r\n        if (energyGain > 0) turns = Math.max(1, Math.floor(turns) || 1);\r\n\r\n        MOVES[id] = {\r\n            id, type, power,\r\n            energyGain,          // fast-only\r\n            energy: energyCost,  // charged-only (positive)\r\n            turns,               // fast move duration in 0.5s turns\r\n        };\r\n    }\r\n\r\n    // Safe fallback fast move\r\n    if (!MOVES.TACKLE) {\r\n        MOVES.TACKLE = { id: \"TACKLE\", type: \"normal\", power: 3, energyGain: 8, energy: 0, turns: 1 };\r\n    }\r\n})();\r\n\r\n// POKEDEX: species map, keyed by both exact speciesId and normalized speciesId\r\nconst POKEDEX = {};\r\nconst POKEDEX_NORM = {};\r\n(function buildDex() {\r\n    const list = gamemaster?.pokemon || gamemaster?.data?.pokemon || [];\r\n    for (const p of list) {\r\n        if (!p?.speciesId) continue;\r\n        const exact = String(p.speciesId);\r\n        const norm = normalizeSpeciesId(exact);\r\n        const stats = p.stats || p.baseStats || {};\r\n        const typesRaw = p.types || [p.type1, p.type2].filter(Boolean);\r\n        const types = (typesRaw || []).map(t => String(t).replace(/^POKEMON_TYPE_/, \"\").toLowerCase());\r\n\r\n        const entry = {\r\n            speciesId: exact,\r\n            types: types.length ? types : [\"normal\"],\r\n            stats: {\r\n                atk: Number(stats.atk ?? stats.attack ?? 0) || 0,\r\n                def: Number(stats.def ?? stats.defense ?? 0) || 0,\r\n                hp: Number(stats.hp ?? stats.sta ?? stats.stamina ?? 0) || 0\r\n            }\r\n        };\r\n        POKEDEX[exact] = entry;\r\n        POKEDEX_NORM[norm] = entry;\r\n    }\r\n})();\r\n\r\nfunction lookupSpecies(speciesId) {\r\n    if (!speciesId) return null;\r\n    return POKEDEX[speciesId] || POKEDEX_NORM[normalizeSpeciesId(speciesId)] || null;\r\n}\r\n\r\nfunction lookupMove(id) {\r\n    if (!id) return null;\r\n    return MOVES[canonMoveId(id)] || null;\r\n}\r\n\r\n/* ===================== Type chart (full 18 types) ===================== */\r\n\r\n// Build effectiveness with defaults = 1\r\nconst TYPES = [\"normal\", \"fighting\", \"flying\", \"poison\", \"ground\", \"rock\", \"bug\", \"ghost\", \"steel\", \"fire\", \"water\", \"grass\", \"electric\", \"psychic\", \"ice\", \"dragon\", \"dark\", \"fairy\"];\r\nconst EFF = {};\r\nfor (const a of TYPES) { EFF[a] = {}; for (const d of TYPES) EFF[a][d] = 1; }\r\nfunction S(atk, arr, m) { for (const d of arr) EFF[atk][d] = m; }\r\nS(\"fighting\", [\"normal\", \"rock\", \"ice\", \"dark\", \"steel\"], 1.6); S(\"fighting\", [\"flying\", \"poison\", \"bug\", \"psychic\", \"fairy\"], 0.625); S(\"fighting\", [\"ghost\"], 0.390625);\r\nS(\"flying\", [\"fighting\", \"bug\", \"grass\"], 1.6); S(\"flying\", [\"rock\", \"steel\", \"electric\"], 0.625);\r\nS(\"poison\", [\"grass\", \"fairy\"], 1.6); S(\"poison\", [\"poison\", \"ground\", \"rock\", \"ghost\"], 0.625); S(\"poison\", [\"steel\"], 0.390625);\r\nS(\"ground\", [\"poison\", \"rock\", \"steel\", \"fire\", \"electric\"], 1.6); S(\"ground\", [\"bug\", \"grass\"], 0.625); S(\"ground\", [\"flying\"], 0.390625);\r\nS(\"rock\", [\"flying\", \"bug\", \"fire\", \"ice\"], 1.6); S(\"rock\", [\"fighting\", \"ground\", \"steel\"], 0.625);\r\nS(\"bug\", [\"grass\", \"psychic\", \"dark\"], 1.6); S(\"bug\", [\"fighting\", \"flying\", \"poison\", \"ghost\", \"steel\", \"fire\", \"fairy\"], 0.625);\r\nS(\"ghost\", [\"ghost\", \"psychic\"], 1.6); S(\"ghost\", [\"dark\"], 0.625); S(\"ghost\", [\"normal\"], 0.390625);\r\nS(\"steel\", [\"rock\", \"ice\", \"fairy\"], 1.6); S(\"steel\", [\"steel\", \"fire\", \"water\", \"electric\"], 0.625);\r\nS(\"fire\", [\"bug\", \"steel\", \"grass\", \"ice\"], 1.6); S(\"fire\", [\"rock\", \"fire\", \"water\", \"dragon\"], 0.625);\r\nS(\"water\", [\"ground\", \"rock\", \"fire\"], 1.6); S(\"water\", [\"water\", \"grass\", \"dragon\"], 0.625);\r\nS(\"grass\", [\"ground\", \"rock\", \"water\"], 1.6); S(\"grass\", [\"flying\", \"poison\", \"bug\", \"steel\", \"fire\", \"grass\", \"dragon\"], 0.625);\r\nS(\"electric\", [\"flying\", \"water\"], 1.6); S(\"electric\", [\"grass\", \"electric\", \"dragon\"], 0.625); S(\"electric\", [\"ground\"], 0.390625);\r\nS(\"psychic\", [\"fighting\", \"poison\"], 1.6); S(\"psychic\", [\"psychic\", \"steel\"], 0.625); S(\"psychic\", [\"dark\"], 0.390625);\r\nS(\"ice\", [\"flying\", \"ground\", \"grass\", \"dragon\"], 1.6); S(\"ice\", [\"steel\", \"fire\", \"water\", \"ice\"], 0.625);\r\nS(\"dragon\", [\"dragon\"], 1.6); S(\"dragon\", [\"steel\"], 0.625); S(\"dragon\", [\"fairy\"], 0.390625);\r\nS(\"dark\", [\"ghost\", \"psychic\"], 1.6); S(\"dark\", [\"fighting\", \"dark\", \"fairy\"], 0.625);\r\nS(\"fairy\", [\"fighting\", \"dragon\", \"dark\"], 1.6); S(\"fairy\", [\"poison\", \"steel\", \"fire\"], 0.625);\r\n\r\nfunction typeMult(moveType, defenderTypes) {\r\n    let m = 1;\r\n    for (const t of defenderTypes || []) m *= (EFF[moveType]?.[t] ?? 1);\r\n    return m;\r\n}\r\n\r\n/* ===================== Damage ===================== */\r\n\r\nconst STAB = 1.2; // PvP STAB\r\nfunction pvpDamage(power, atk, def, stab, eff) {\r\n    // Floor(0.5 * Power * (Atk/Def) * STAB * Effectiveness) + 1\r\n    const raw = 0.5 * power * (atk / Math.max(1, def)) * (stab || 1) * (eff || 1);\r\n    return Math.floor(raw) + 1;\r\n}\r\n\r\n/* ===================== Battler construction ===================== */\r\n\r\nfunction makeBattler(input) {\r\n    // input: { speciesId, fastMove, chargedMoves[], shields, level? }\r\n    const base = lookupSpecies(input?.speciesId);\r\n    if (!base) {\r\n        console.warn(`Engine: species not found ->`, input?.speciesId);\r\n        return {\r\n            speciesId: input?.speciesId || \"unknown\",\r\n            types: [],\r\n            atk: 0, def: 0, hpMax: 0, hp: 0,\r\n            shields: input?.shields | 0, energy: 0,\r\n            fast: MOVES.TACKLE, charged: [],\r\n            fastTurnsLeft: MOVES.TACKLE.turns || 1\r\n        };\r\n    }\r\n\r\n    const fast = lookupMove(input?.fastMove) || MOVES.TACKLE;\r\n    const charged = (input?.chargedMoves || []).map(lookupMove).filter(Boolean);\r\n\r\n    const atk = base.stats.atk || 0;\r\n    const def = base.stats.def || 0;\r\n    const hpMax = base.stats.hp || 0;\r\n\r\n    return {\r\n        speciesId: base.speciesId,\r\n        types: base.types || [],\r\n        atk, def, hpMax, hp: hpMax,\r\n        shields: Number(input?.shields) | 0,\r\n        energy: 0,\r\n        fast,\r\n        charged,\r\n        fastTurnsLeft: fast.turns || 1\r\n    };\r\n}\r\n\r\n/* ===================== Battle core ===================== */\r\n\r\nexport function simulateBattle(p1In, p2In) {\r\n    // p1In/p2In minimal shape: { speciesId, fastMove, chargedMoves, shields }\r\n    const A = makeBattler(p1In);\r\n    const B = makeBattler(p2In);\r\n\r\n    const MAX_TURNS = 1000; // 500s\r\n    for (let t = 1; t <= MAX_TURNS; t++) {\r\n        if (A.hp <= 0 || B.hp <= 0) break;\r\n\r\n        // Determine actions\r\n        const aCharged = pickReadyCharged(A, B);\r\n        const bCharged = pickReadyCharged(B, A);\r\n\r\n        // Resolve charged first; if both, CMP via true Atk (break ties by speciesId)\r\n        if (aCharged || bCharged) {\r\n            const first = (aCharged && bCharged)\r\n                ? (A.atk === B.atk ? (A.speciesId < B.speciesId ? \"A\" : \"B\") : (A.atk > B.atk ? \"A\" : \"B\"))\r\n                : (aCharged ? \"A\" : \"B\");\r\n\r\n            if (first === \"A\") { resolveCharged(A, B, aCharged); if (B.hp <= 0) break; if (bCharged) resolveCharged(B, A, bCharged); }\r\n            else { resolveCharged(B, A, bCharged); if (A.hp <= 0) break; if (aCharged) resolveCharged(A, B, aCharged); }\r\n\r\n            // Using a charged consumes your turn; reset fast windows\r\n            if (aCharged) A.fastTurnsLeft = A.fast.turns || 1;\r\n            if (bCharged) B.fastTurnsLeft = B.fast.turns || 1;\r\n            continue;\r\n        }\r\n\r\n        // Otherwise progress fast moves simultaneously\r\n        stepFast(A, B);\r\n        if (B.hp <= 0) break;\r\n        stepFast(B, A);\r\n        if (A.hp <= 0) break;\r\n    }\r\n\r\n    const result =\r\n        (A.hp <= 0 && B.hp <= 0) ? \"draw\" :\r\n            (B.hp <= 0) ? \"p1\" :\r\n                (A.hp <= 0) ? \"p2\" : \"timeout\";\r\n\r\n    return {\r\n        result,\r\n        p1: { hp: A.hpMax ? Math.round((A.hp / A.hpMax) * 100) : 0, shields: A.shields, energy: A.energy },\r\n        p2: { hp: B.hpMax ? Math.round((B.hp / B.hpMax) * 100) : 0, shields: B.shields, energy: B.energy }\r\n    };\r\n}\r\n\r\nfunction pickReadyCharged(me, opp) {\r\n    // Choose highest damage charged that is ready; else null\r\n    const ready = me.charged.filter(m => me.energy >= (m.energy || 999));\r\n    if (!ready.length) return null;\r\n    let best = ready[0], bestVal = -1;\r\n    for (const m of ready) {\r\n        const dmg = projDamage(me, opp, m);\r\n        const score = dmg + (100 - (m.energy || 100)) * 0.05;\r\n        if (score > bestVal) { bestVal = score; best = m; }\r\n    }\r\n    return best;\r\n}\r\n\r\nfunction resolveCharged(att, def, move) {\r\n    if (!move) return;\r\n    if (def.shields > 0) {\r\n        def.shields -= 1;                // shield consumes, no damage\r\n    } else {\r\n        def.hp = Math.max(0, def.hp - projDamage(att, def, move));\r\n    }\r\n    att.energy = clamp(att.energy - (move.energy || 0), 0, 100);\r\n}\r\n\r\nfunction stepFast(att, def) {\r\n    att.fastTurnsLeft -= 1;\r\n    if (att.fastTurnsLeft <= 0) {\r\n        // Fast move lands now\r\n        def.hp = Math.max(0, def.hp - projDamage(att, def, att.fast));\r\n        att.energy = clamp(att.energy + (att.fast.energyGain || 0), 0, 100);\r\n        att.fastTurnsLeft = att.fast.turns || 1;\r\n    }\r\n}\r\n\r\nfunction projDamage(att, def, move) {\r\n    if (!move) return 0;\r\n    const stab = att.types.includes(move.type) ? STAB : 1;\r\n    const eff = typeMult(move.type, def.types);\r\n    return pvpDamage(move.power || 0, att.atk, def.def, stab, eff);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}