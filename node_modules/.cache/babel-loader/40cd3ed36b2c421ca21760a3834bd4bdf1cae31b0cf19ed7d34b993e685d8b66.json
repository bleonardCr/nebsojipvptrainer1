{"ast":null,"code":"// /src/engine/battleEngine.js\n// Robust PvP-lite engine. Returns:\n// { result:'p1'|'p2'|'draw'|'timeout', p1:{hp,shields,energy}, p2:{hp,shields,energy} }\n\nimport gamemaster from \"../Data/gamemaster.json\";\n\n/* ---------- normalization ---------- */\nfunction canonMoveId(s) {\n  return String(s || \"\").trim().replace(/^COMBAT_V\\d+_MOVE_/i, \"\").replace(/^V\\d+_/i, \"\").replace(/[^A-Za-z0-9]+/g, \"_\").replace(/_+/g, \"_\").replace(/^_|_$/g, \"\").toUpperCase();\n}\nfunction normSpecies(s) {\n  return String(s || \"\").toLowerCase().trim().replace(/[^a-z0-9]+/g, \"_\").replace(/^_+|_+$/g, \"\");\n}\nconst clamp = (v, lo, hi) => Math.max(lo, Math.min(hi, v));\n\n/* ---------- build data maps ---------- */\nconst MOVES = {};\n(function buildMoves(_gamemaster$data, _gamemaster$data2) {\n  const list = (gamemaster === null || gamemaster === void 0 ? void 0 : gamemaster.moves) || (gamemaster === null || gamemaster === void 0 ? void 0 : (_gamemaster$data = gamemaster.data) === null || _gamemaster$data === void 0 ? void 0 : _gamemaster$data.moves) || (gamemaster === null || gamemaster === void 0 ? void 0 : gamemaster.combatMoves) || (gamemaster === null || gamemaster === void 0 ? void 0 : (_gamemaster$data2 = gamemaster.data) === null || _gamemaster$data2 === void 0 ? void 0 : _gamemaster$data2.combatMoves) || [];\n  for (const m of list) {\n    var _ref, _m$moveId, _ref2, _ref3, _ref4, _m$pvpPower, _ref5, _m$durationTurns;\n    const id = canonMoveId((_ref = (_m$moveId = m.moveId) !== null && _m$moveId !== void 0 ? _m$moveId : m.id) !== null && _ref !== void 0 ? _ref : m.name);\n    if (!id) continue;\n    const type = String(m.type || m.pokemonType || \"Normal\").replace(/^POKEMON_TYPE_/, \"\").toLowerCase();\n    const power = Number((_ref2 = (_ref3 = (_ref4 = (_m$pvpPower = m.pvpPower) !== null && _m$pvpPower !== void 0 ? _m$pvpPower : m.power) !== null && _ref4 !== void 0 ? _ref4 : m.combatPower) !== null && _ref3 !== void 0 ? _ref3 : m.damage) !== null && _ref2 !== void 0 ? _ref2 : 0) || 0;\n\n    // energy/turns\n    let energyGain = 0,\n      energyCost = 0,\n      turns = Number((_ref5 = (_m$durationTurns = m.durationTurns) !== null && _m$durationTurns !== void 0 ? _m$durationTurns : m.turns) !== null && _ref5 !== void 0 ? _ref5 : m.cooldownTurns);\n    if (m.energyDelta != null) {\n      const ed = Number(m.energyDelta) || 0;\n      if (ed > 0) energyGain = ed;\n      if (ed < 0) energyCost = Math.abs(ed);\n    }\n    if (m.energyGain != null) energyGain = Number(m.energyGain) || energyGain;\n    if (m.energy != null) energyCost = Math.abs(Number(m.energy)) || energyCost;\n    if (!Number.isFinite(turns)) turns = energyGain > 0 ? 1 : 0;\n    if (energyGain > 0) turns = Math.max(1, Math.floor(turns) || 1);\n    MOVES[id] = {\n      id,\n      type,\n      power,\n      energyGain,\n      energy: energyCost,\n      turns\n    };\n  }\n  MOVES.TACKLE ||= {\n    id: \"TACKLE\",\n    type: \"normal\",\n    power: 3,\n    energyGain: 8,\n    energy: 0,\n    turns: 1\n  };\n})();\nconst POKEDEX = {},\n  POKEDEX_NORM = {};\n(function buildDex(_gamemaster$data3) {\n  const list = (gamemaster === null || gamemaster === void 0 ? void 0 : gamemaster.pokemon) || (gamemaster === null || gamemaster === void 0 ? void 0 : (_gamemaster$data3 = gamemaster.data) === null || _gamemaster$data3 === void 0 ? void 0 : _gamemaster$data3.pokemon) || [];\n  for (const p of list) {\n    var _ref6, _bs$atk, _ref7, _bs$def, _ref8, _ref9, _bs$hp;\n    if (!(p !== null && p !== void 0 && p.speciesId)) continue;\n    const exact = String(p.speciesId);\n    const norm = normSpecies(exact);\n    const bs = p.baseStats || p.stats || {};\n    const typesArr = p.types || [p.type1, p.type2].filter(Boolean);\n    const types = (typesArr || []).map(t => String(t).replace(/^POKEMON_TYPE_/, \"\").toLowerCase());\n    const entry = {\n      speciesId: exact,\n      types: types.length ? types : [\"normal\"],\n      stats: {\n        atk: Number((_ref6 = (_bs$atk = bs.atk) !== null && _bs$atk !== void 0 ? _bs$atk : bs.attack) !== null && _ref6 !== void 0 ? _ref6 : 0) || 0,\n        def: Number((_ref7 = (_bs$def = bs.def) !== null && _bs$def !== void 0 ? _bs$def : bs.defense) !== null && _ref7 !== void 0 ? _ref7 : 0) || 0,\n        hp: Number((_ref8 = (_ref9 = (_bs$hp = bs.hp) !== null && _bs$hp !== void 0 ? _bs$hp : bs.sta) !== null && _ref9 !== void 0 ? _ref9 : bs.stamina) !== null && _ref8 !== void 0 ? _ref8 : 0) || 0\n      }\n    };\n    POKEDEX[exact] = entry;\n    POKEDEX_NORM[norm] = entry;\n  }\n})();\nconst lookupSpecies = id => POKEDEX[id] || POKEDEX_NORM[normSpecies(id)] || null;\nconst lookupMove = id => id ? MOVES[canonMoveId(id)] || null : null;\n\n/* ---------- type chart ---------- */\nconst TYPES = [\"normal\", \"fighting\", \"flying\", \"poison\", \"ground\", \"rock\", \"bug\", \"ghost\", \"steel\", \"fire\", \"water\", \"grass\", \"electric\", \"psychic\", \"ice\", \"dragon\", \"dark\", \"fairy\"];\nconst EFF = {};\nfor (const a of TYPES) {\n  EFF[a] = {};\n  for (const d of TYPES) EFF[a][d] = 1;\n}\nfunction S(a, ds, m) {\n  for (const d of ds) EFF[a][d] = m;\n}\n_c = S;\nS(\"fighting\", [\"normal\", \"rock\", \"ice\", \"dark\", \"steel\"], 1.6);\nS(\"fighting\", [\"flying\", \"poison\", \"bug\", \"psychic\", \"fairy\"], 0.625);\nS(\"fighting\", [\"ghost\"], 0.390625);\nS(\"flying\", [\"fighting\", \"bug\", \"grass\"], 1.6);\nS(\"flying\", [\"rock\", \"steel\", \"electric\"], 0.625);\nS(\"poison\", [\"grass\", \"fairy\"], 1.6);\nS(\"poison\", [\"poison\", \"ground\", \"rock\", \"ghost\"], 0.625);\nS(\"poison\", [\"steel\"], 0.390625);\nS(\"ground\", [\"poison\", \"rock\", \"steel\", \"fire\", \"electric\"], 1.6);\nS(\"ground\", [\"bug\", \"grass\"], 0.625);\nS(\"ground\", [\"flying\"], 0.390625);\nS(\"rock\", [\"flying\", \"bug\", \"fire\", \"ice\"], 1.6);\nS(\"rock\", [\"fighting\", \"ground\", \"steel\"], 0.625);\nS(\"bug\", [\"grass\", \"psychic\", \"dark\"], 1.6);\nS(\"bug\", [\"fighting\", \"flying\", \"poison\", \"ghost\", \"steel\", \"fire\", \"fairy\"], 0.625);\nS(\"ghost\", [\"ghost\", \"psychic\"], 1.6);\nS(\"ghost\", [\"dark\"], 0.625);\nS(\"ghost\", [\"normal\"], 0.390625);\nS(\"steel\", [\"rock\", \"ice\", \"fairy\"], 1.6);\nS(\"steel\", [\"steel\", \"fire\", \"water\", \"electric\"], 0.625);\nS(\"fire\", [\"bug\", \"steel\", \"grass\", \"ice\"], 1.6);\nS(\"fire\", [\"rock\", \"fire\", \"water\", \"dragon\"], 0.625);\nS(\"water\", [\"ground\", \"rock\", \"fire\"], 1.6);\nS(\"water\", [\"water\", \"grass\", \"dragon\"], 0.625);\nS(\"grass\", [\"ground\", \"rock\", \"water\"], 1.6);\nS(\"grass\", [\"flying\", \"poison\", \"bug\", \"steel\", \"fire\", \"grass\", \"dragon\"], 0.625);\nS(\"electric\", [\"flying\", \"water\"], 1.6);\nS(\"electric\", [\"grass\", \"electric\", \"dragon\"], 0.625);\nS(\"electric\", [\"ground\"], 0.390625);\nS(\"psychic\", [\"fighting\", \"poison\"], 1.6);\nS(\"psychic\", [\"psychic\", \"steel\"], 0.625);\nS(\"psychic\", [\"dark\"], 0.390625);\nS(\"ice\", [\"flying\", \"ground\", \"grass\", \"dragon\"], 1.6);\nS(\"ice\", [\"steel\", \"fire\", \"water\", \"ice\"], 0.625);\nS(\"dragon\", [\"dragon\"], 1.6);\nS(\"dragon\", [\"steel\"], 0.625);\nS(\"dragon\", [\"fairy\"], 0.390625);\nS(\"dark\", [\"ghost\", \"psychic\"], 1.6);\nS(\"dark\", [\"fighting\", \"dark\", \"fairy\"], 0.625);\nS(\"fairy\", [\"fighting\", \"dragon\", \"dark\"], 1.6);\nS(\"fairy\", [\"poison\", \"steel\", \"fire\"], 0.625);\nconst STAB = 1.2;\nfunction effMult(type, defendTypes) {\n  let m = 1;\n  for (const t of defendTypes || []) {\n    var _EFF$type$t, _EFF$type;\n    m *= (_EFF$type$t = (_EFF$type = EFF[type]) === null || _EFF$type === void 0 ? void 0 : _EFF$type[t]) !== null && _EFF$type$t !== void 0 ? _EFF$type$t : 1;\n  }\n  return m;\n}\nfunction pvpDamage(power, atk, def, stab, eff) {\n  const raw = 0.5 * power * (atk / Math.max(1, def)) * (stab || 1) * (eff || 1);\n  return Math.floor(raw) + 1;\n}\n\n/* ---------- battler ---------- */\nfunction makeBattler(src) {\n  const base = lookupSpecies(src === null || src === void 0 ? void 0 : src.speciesId);\n  if (!base) {\n    console.warn(\"Engine: species not found\", src === null || src === void 0 ? void 0 : src.speciesId);\n    return {\n      speciesId: (src === null || src === void 0 ? void 0 : src.speciesId) || \"unknown\",\n      types: [],\n      atk: 0,\n      def: 0,\n      hpMax: 0,\n      hp: 0,\n      shields: (src === null || src === void 0 ? void 0 : src.shields) | 0,\n      energy: 0,\n      fast: MOVES.TACKLE,\n      charged: [],\n      fastTurnsLeft: MOVES.TACKLE.turns || 1\n    };\n  }\n  const fast = lookupMove(src === null || src === void 0 ? void 0 : src.fastMove) || MOVES.TACKLE;\n  const charged = ((src === null || src === void 0 ? void 0 : src.chargedMoves) || []).map(lookupMove).filter(Boolean);\n  const atk = base.stats.atk || 0,\n    def = base.stats.def || 0,\n    hpMax = base.stats.hp || 0;\n  return {\n    speciesId: base.speciesId,\n    types: base.types,\n    atk,\n    def,\n    hpMax,\n    hp: hpMax,\n    shields: Number(src === null || src === void 0 ? void 0 : src.shields) | 0,\n    energy: 0,\n    fast,\n    charged,\n    fastTurnsLeft: fast.turns || 1\n  };\n}\n\n/* ---------- shielding heuristic ---------- */\n// Shield if it KOs, or if it does a big chunk (liberal with 2 shields, stricter with 1)\nfunction shouldShield(defender, incomingMove, attacker) {\n  if (defender.shields <= 0 || !incomingMove) return false;\n  const dmg = projDamage(attacker, defender, incomingMove);\n  if (dmg >= defender.hp) return true; // lethal\n  const threshold = defender.shields >= 2 ? 0.25 : 0.40; // ~25% with 2 shields, ~40% with 1\n  return dmg >= defender.hpMax * threshold;\n}\n\n/* ---------- core sim ---------- */\nexport function simulateBattle(p1In, p2In) {\n  const A = makeBattler(p1In);\n  const B = makeBattler(p2In);\n  const MAX_TURNS = 1000;\n  for (let t = 1; t <= MAX_TURNS; t++) {\n    if (A.hp <= 0 || B.hp <= 0) break;\n    const aReady = pickCharged(A, B);\n    const bReady = pickCharged(B, A);\n    if (aReady || bReady) {\n      const first = aReady && bReady ? A.atk === B.atk ? A.speciesId < B.speciesId ? \"A\" : \"B\" : A.atk > B.atk ? \"A\" : \"B\" : aReady ? \"A\" : \"B\";\n      if (first === \"A\") {\n        resolveCharged(A, B, aReady);\n        if (B.hp <= 0) break;\n        if (bReady) resolveCharged(B, A, bReady);\n      } else {\n        resolveCharged(B, A, bReady);\n        if (A.hp <= 0) break;\n        if (aReady) resolveCharged(A, B, aReady);\n      }\n      if (aReady) A.fastTurnsLeft = A.fast.turns || 1;\n      if (bReady) B.fastTurnsLeft = B.fast.turns || 1;\n      continue;\n    }\n    stepFast(A, B);\n    if (B.hp <= 0) break;\n    stepFast(B, A);\n    if (A.hp <= 0) break;\n  }\n  const result = A.hp <= 0 && B.hp <= 0 ? \"draw\" : B.hp <= 0 ? \"p1\" : A.hp <= 0 ? \"p2\" : \"timeout\";\n  return {\n    result,\n    p1: {\n      hp: A.hpMax ? Math.round(A.hp / A.hpMax * 100) : 0,\n      shields: A.shields,\n      energy: A.energy\n    },\n    p2: {\n      hp: B.hpMax ? Math.round(B.hp / B.hpMax * 100) : 0,\n      shields: B.shields,\n      energy: B.energy\n    }\n  };\n}\n\n/* ---------- internals ---------- */\nfunction pickCharged(me, opp) {\n  const ready = me.charged.filter(m => me.energy >= (m.energy || 999));\n  if (!ready.length) return null;\n  // score = damage projection + slight bias for cheaper cost to reduce overcapping\n  let best = ready[0],\n    bestScore = -1;\n  for (const m of ready) {\n    const d = projDamage(me, opp, m);\n    const score = d + (100 - (m.energy || 100)) * 0.05;\n    if (score > bestScore) {\n      bestScore = score;\n      best = m;\n    }\n  }\n  return best;\n}\nfunction resolveCharged(att, def, move) {\n  if (!move) return;\n  // selective shielding\n  if (shouldShield(def, move, att)) {\n    def.shields -= 1;\n  } else {\n    def.hp = Math.max(0, def.hp - projDamage(att, def, move));\n  }\n  att.energy = clamp(att.energy - (move.energy || 0), 0, 100);\n}\nfunction stepFast(att, def) {\n  att.fastTurnsLeft -= 1;\n  if (att.fastTurnsLeft <= 0) {\n    def.hp = Math.max(0, def.hp - projDamage(att, def, att.fast));\n    att.energy = clamp(att.energy + (att.fast.energyGain || 0), 0, 100);\n    att.fastTurnsLeft = att.fast.turns || 1;\n  }\n}\nfunction projDamage(att, def, move) {\n  if (!move) return 0;\n  const stab = att.types.includes(move.type) ? STAB : 1;\n  const eff = effMult(move.type, def.types);\n  return pvpDamage(move.power || 0, att.atk, def.def, stab, eff);\n}\nvar _c;\n$RefreshReg$(_c, \"S\");","map":{"version":3,"names":["gamemaster","canonMoveId","s","String","trim","replace","toUpperCase","normSpecies","toLowerCase","clamp","v","lo","hi","Math","max","min","MOVES","buildMoves","_gamemaster$data","_gamemaster$data2","list","moves","data","combatMoves","m","_ref","_m$moveId","_ref2","_ref3","_ref4","_m$pvpPower","_ref5","_m$durationTurns","id","moveId","name","type","pokemonType","power","Number","pvpPower","combatPower","damage","energyGain","energyCost","turns","durationTurns","cooldownTurns","energyDelta","ed","abs","energy","isFinite","floor","TACKLE","POKEDEX","POKEDEX_NORM","buildDex","_gamemaster$data3","pokemon","p","_ref6","_bs$atk","_ref7","_bs$def","_ref8","_ref9","_bs$hp","speciesId","exact","norm","bs","baseStats","stats","typesArr","types","type1","type2","filter","Boolean","map","t","entry","length","atk","attack","def","defense","hp","sta","stamina","lookupSpecies","lookupMove","TYPES","EFF","a","d","S","ds","_c","STAB","effMult","defendTypes","_EFF$type$t","_EFF$type","pvpDamage","stab","eff","raw","makeBattler","src","base","console","warn","hpMax","shields","fast","charged","fastTurnsLeft","fastMove","chargedMoves","shouldShield","defender","incomingMove","attacker","dmg","projDamage","threshold","simulateBattle","p1In","p2In","A","B","MAX_TURNS","aReady","pickCharged","bReady","first","resolveCharged","stepFast","result","p1","round","p2","me","opp","ready","best","bestScore","score","att","move","includes","$RefreshReg$"],"sources":["C:/Users/ben/Projects/nebsojipvptrainer/src/engine/battleEngine.js"],"sourcesContent":["// /src/engine/battleEngine.js\r\n// Robust PvP-lite engine. Returns:\r\n// { result:'p1'|'p2'|'draw'|'timeout', p1:{hp,shields,energy}, p2:{hp,shields,energy} }\r\n\r\nimport gamemaster from \"../Data/gamemaster.json\";\r\n\r\n/* ---------- normalization ---------- */\r\nfunction canonMoveId(s) {\r\n    return String(s || \"\")\r\n        .trim()\r\n        .replace(/^COMBAT_V\\d+_MOVE_/i, \"\")\r\n        .replace(/^V\\d+_/i, \"\")\r\n        .replace(/[^A-Za-z0-9]+/g, \"_\")\r\n        .replace(/_+/g, \"_\")\r\n        .replace(/^_|_$/g, \"\")\r\n        .toUpperCase();\r\n}\r\nfunction normSpecies(s) {\r\n    return String(s || \"\")\r\n        .toLowerCase()\r\n        .trim()\r\n        .replace(/[^a-z0-9]+/g, \"_\")\r\n        .replace(/^_+|_+$/g, \"\");\r\n}\r\nconst clamp = (v, lo, hi) => Math.max(lo, Math.min(hi, v));\r\n\r\n/* ---------- build data maps ---------- */\r\nconst MOVES = {};\r\n(function buildMoves() {\r\n    const list =\r\n        gamemaster?.moves ||\r\n        gamemaster?.data?.moves ||\r\n        gamemaster?.combatMoves ||\r\n        gamemaster?.data?.combatMoves ||\r\n        [];\r\n    for (const m of list) {\r\n        const id = canonMoveId(m.moveId ?? m.id ?? m.name);\r\n        if (!id) continue;\r\n        const type = String(m.type || m.pokemonType || \"Normal\")\r\n            .replace(/^POKEMON_TYPE_/, \"\")\r\n            .toLowerCase();\r\n        const power = Number(m.pvpPower ?? m.power ?? m.combatPower ?? m.damage ?? 0) || 0;\r\n\r\n        // energy/turns\r\n        let energyGain = 0,\r\n            energyCost = 0,\r\n            turns = Number(m.durationTurns ?? m.turns ?? m.cooldownTurns);\r\n        if (m.energyDelta != null) {\r\n            const ed = Number(m.energyDelta) || 0;\r\n            if (ed > 0) energyGain = ed;\r\n            if (ed < 0) energyCost = Math.abs(ed);\r\n        }\r\n        if (m.energyGain != null) energyGain = Number(m.energyGain) || energyGain;\r\n        if (m.energy != null) energyCost = Math.abs(Number(m.energy)) || energyCost;\r\n        if (!Number.isFinite(turns)) turns = energyGain > 0 ? 1 : 0;\r\n        if (energyGain > 0) turns = Math.max(1, Math.floor(turns) || 1);\r\n\r\n        MOVES[id] = { id, type, power, energyGain, energy: energyCost, turns };\r\n    }\r\n    MOVES.TACKLE ||= {\r\n        id: \"TACKLE\",\r\n        type: \"normal\",\r\n        power: 3,\r\n        energyGain: 8,\r\n        energy: 0,\r\n        turns: 1\r\n    };\r\n})();\r\n\r\nconst POKEDEX = {},\r\n    POKEDEX_NORM = {};\r\n(function buildDex() {\r\n    const list = gamemaster?.pokemon || gamemaster?.data?.pokemon || [];\r\n    for (const p of list) {\r\n        if (!p?.speciesId) continue;\r\n        const exact = String(p.speciesId);\r\n        const norm = normSpecies(exact);\r\n        const bs = p.baseStats || p.stats || {};\r\n        const typesArr = p.types || [p.type1, p.type2].filter(Boolean);\r\n        const types = (typesArr || []).map((t) =>\r\n            String(t).replace(/^POKEMON_TYPE_/, \"\").toLowerCase()\r\n        );\r\n        const entry = {\r\n            speciesId: exact,\r\n            types: types.length ? types : [\"normal\"],\r\n            stats: {\r\n                atk: Number(bs.atk ?? bs.attack ?? 0) || 0,\r\n                def: Number(bs.def ?? bs.defense ?? 0) || 0,\r\n                hp: Number(bs.hp ?? bs.sta ?? bs.stamina ?? 0) || 0\r\n            }\r\n        };\r\n        POKEDEX[exact] = entry;\r\n        POKEDEX_NORM[norm] = entry;\r\n    }\r\n})();\r\nconst lookupSpecies = (id) =>\r\n    POKEDEX[id] || POKEDEX_NORM[normSpecies(id)] || null;\r\nconst lookupMove = (id) => (id ? MOVES[canonMoveId(id)] || null : null);\r\n\r\n/* ---------- type chart ---------- */\r\nconst TYPES = [\r\n    \"normal\",\r\n    \"fighting\",\r\n    \"flying\",\r\n    \"poison\",\r\n    \"ground\",\r\n    \"rock\",\r\n    \"bug\",\r\n    \"ghost\",\r\n    \"steel\",\r\n    \"fire\",\r\n    \"water\",\r\n    \"grass\",\r\n    \"electric\",\r\n    \"psychic\",\r\n    \"ice\",\r\n    \"dragon\",\r\n    \"dark\",\r\n    \"fairy\"\r\n];\r\nconst EFF = {};\r\nfor (const a of TYPES) {\r\n    EFF[a] = {};\r\n    for (const d of TYPES) EFF[a][d] = 1;\r\n}\r\nfunction S(a, ds, m) {\r\n    for (const d of ds) EFF[a][d] = m;\r\n}\r\nS(\"fighting\", [\"normal\", \"rock\", \"ice\", \"dark\", \"steel\"], 1.6);\r\nS(\"fighting\", [\"flying\", \"poison\", \"bug\", \"psychic\", \"fairy\"], 0.625);\r\nS(\"fighting\", [\"ghost\"], 0.390625);\r\nS(\"flying\", [\"fighting\", \"bug\", \"grass\"], 1.6);\r\nS(\"flying\", [\"rock\", \"steel\", \"electric\"], 0.625);\r\nS(\"poison\", [\"grass\", \"fairy\"], 1.6);\r\nS(\"poison\", [\"poison\", \"ground\", \"rock\", \"ghost\"], 0.625);\r\nS(\"poison\", [\"steel\"], 0.390625);\r\nS(\"ground\", [\"poison\", \"rock\", \"steel\", \"fire\", \"electric\"], 1.6);\r\nS(\"ground\", [\"bug\", \"grass\"], 0.625);\r\nS(\"ground\", [\"flying\"], 0.390625);\r\nS(\"rock\", [\"flying\", \"bug\", \"fire\", \"ice\"], 1.6);\r\nS(\"rock\", [\"fighting\", \"ground\", \"steel\"], 0.625);\r\nS(\"bug\", [\"grass\", \"psychic\", \"dark\"], 1.6);\r\nS(\r\n    \"bug\",\r\n    [\"fighting\", \"flying\", \"poison\", \"ghost\", \"steel\", \"fire\", \"fairy\"],\r\n    0.625\r\n);\r\nS(\"ghost\", [\"ghost\", \"psychic\"], 1.6);\r\nS(\"ghost\", [\"dark\"], 0.625);\r\nS(\"ghost\", [\"normal\"], 0.390625);\r\nS(\"steel\", [\"rock\", \"ice\", \"fairy\"], 1.6);\r\nS(\"steel\", [\"steel\", \"fire\", \"water\", \"electric\"], 0.625);\r\nS(\"fire\", [\"bug\", \"steel\", \"grass\", \"ice\"], 1.6);\r\nS(\"fire\", [\"rock\", \"fire\", \"water\", \"dragon\"], 0.625);\r\nS(\"water\", [\"ground\", \"rock\", \"fire\"], 1.6);\r\nS(\"water\", [\"water\", \"grass\", \"dragon\"], 0.625);\r\nS(\"grass\", [\"ground\", \"rock\", \"water\"], 1.6);\r\nS(\r\n    \"grass\",\r\n    [\"flying\", \"poison\", \"bug\", \"steel\", \"fire\", \"grass\", \"dragon\"],\r\n    0.625\r\n);\r\nS(\"electric\", [\"flying\", \"water\"], 1.6);\r\nS(\"electric\", [\"grass\", \"electric\", \"dragon\"], 0.625);\r\nS(\"electric\", [\"ground\"], 0.390625);\r\nS(\"psychic\", [\"fighting\", \"poison\"], 1.6);\r\nS(\"psychic\", [\"psychic\", \"steel\"], 0.625);\r\nS(\"psychic\", [\"dark\"], 0.390625);\r\nS(\"ice\", [\"flying\", \"ground\", \"grass\", \"dragon\"], 1.6);\r\nS(\"ice\", [\"steel\", \"fire\", \"water\", \"ice\"], 0.625);\r\nS(\"dragon\", [\"dragon\"], 1.6);\r\nS(\"dragon\", [\"steel\"], 0.625);\r\nS(\"dragon\", [\"fairy\"], 0.390625);\r\nS(\"dark\", [\"ghost\", \"psychic\"], 1.6);\r\nS(\"dark\", [\"fighting\", \"dark\", \"fairy\"], 0.625);\r\nS(\"fairy\", [\"fighting\", \"dragon\", \"dark\"], 1.6);\r\nS(\"fairy\", [\"poison\", \"steel\", \"fire\"], 0.625);\r\n\r\nconst STAB = 1.2;\r\nfunction effMult(type, defendTypes) {\r\n    let m = 1;\r\n    for (const t of defendTypes || []) m *= EFF[type]?.[t] ?? 1;\r\n    return m;\r\n}\r\nfunction pvpDamage(power, atk, def, stab, eff) {\r\n    const raw = 0.5 * power * (atk / Math.max(1, def)) * (stab || 1) * (eff || 1);\r\n    return Math.floor(raw) + 1;\r\n}\r\n\r\n/* ---------- battler ---------- */\r\nfunction makeBattler(src) {\r\n    const base = lookupSpecies(src?.speciesId);\r\n    if (!base) {\r\n        console.warn(\"Engine: species not found\", src?.speciesId);\r\n        return {\r\n            speciesId: src?.speciesId || \"unknown\",\r\n            types: [],\r\n            atk: 0,\r\n            def: 0,\r\n            hpMax: 0,\r\n            hp: 0,\r\n            shields: src?.shields | 0,\r\n            energy: 0,\r\n            fast: MOVES.TACKLE,\r\n            charged: [],\r\n            fastTurnsLeft: MOVES.TACKLE.turns || 1\r\n        };\r\n    }\r\n    const fast = lookupMove(src?.fastMove) || MOVES.TACKLE;\r\n    const charged = (src?.chargedMoves || []).map(lookupMove).filter(Boolean);\r\n    const atk = base.stats.atk || 0,\r\n        def = base.stats.def || 0,\r\n        hpMax = base.stats.hp || 0;\r\n\r\n    return {\r\n        speciesId: base.speciesId,\r\n        types: base.types,\r\n        atk,\r\n        def,\r\n        hpMax,\r\n        hp: hpMax,\r\n        shields: Number(src?.shields) | 0,\r\n        energy: 0,\r\n        fast,\r\n        charged,\r\n        fastTurnsLeft: fast.turns || 1\r\n    };\r\n}\r\n\r\n/* ---------- shielding heuristic ---------- */\r\n// Shield if it KOs, or if it does a big chunk (liberal with 2 shields, stricter with 1)\r\nfunction shouldShield(defender, incomingMove, attacker) {\r\n    if (defender.shields <= 0 || !incomingMove) return false;\r\n    const dmg = projDamage(attacker, defender, incomingMove);\r\n    if (dmg >= defender.hp) return true; // lethal\r\n    const threshold = defender.shields >= 2 ? 0.25 : 0.40; // ~25% with 2 shields, ~40% with 1\r\n    return dmg >= defender.hpMax * threshold;\r\n}\r\n\r\n/* ---------- core sim ---------- */\r\nexport function simulateBattle(p1In, p2In) {\r\n    const A = makeBattler(p1In);\r\n    const B = makeBattler(p2In);\r\n\r\n    const MAX_TURNS = 1000;\r\n    for (let t = 1; t <= MAX_TURNS; t++) {\r\n        if (A.hp <= 0 || B.hp <= 0) break;\r\n\r\n        const aReady = pickCharged(A, B);\r\n        const bReady = pickCharged(B, A);\r\n\r\n        if (aReady || bReady) {\r\n            const first =\r\n                aReady && bReady\r\n                    ? A.atk === B.atk\r\n                        ? A.speciesId < B.speciesId\r\n                            ? \"A\"\r\n                            : \"B\"\r\n                        : A.atk > B.atk\r\n                            ? \"A\"\r\n                            : \"B\"\r\n                    : aReady\r\n                        ? \"A\"\r\n                        : \"B\";\r\n\r\n            if (first === \"A\") {\r\n                resolveCharged(A, B, aReady);\r\n                if (B.hp <= 0) break;\r\n                if (bReady) resolveCharged(B, A, bReady);\r\n            } else {\r\n                resolveCharged(B, A, bReady);\r\n                if (A.hp <= 0) break;\r\n                if (aReady) resolveCharged(A, B, aReady);\r\n            }\r\n\r\n            if (aReady) A.fastTurnsLeft = A.fast.turns || 1;\r\n            if (bReady) B.fastTurnsLeft = B.fast.turns || 1;\r\n            continue;\r\n        }\r\n\r\n        stepFast(A, B);\r\n        if (B.hp <= 0) break;\r\n        stepFast(B, A);\r\n        if (A.hp <= 0) break;\r\n    }\r\n\r\n    const result =\r\n        A.hp <= 0 && B.hp <= 0\r\n            ? \"draw\"\r\n            : B.hp <= 0\r\n                ? \"p1\"\r\n                : A.hp <= 0\r\n                    ? \"p2\"\r\n                    : \"timeout\";\r\n    return {\r\n        result,\r\n        p1: {\r\n            hp: A.hpMax ? Math.round((A.hp / A.hpMax) * 100) : 0,\r\n            shields: A.shields,\r\n            energy: A.energy\r\n        },\r\n        p2: {\r\n            hp: B.hpMax ? Math.round((B.hp / B.hpMax) * 100) : 0,\r\n            shields: B.shields,\r\n            energy: B.energy\r\n        }\r\n    };\r\n}\r\n\r\n/* ---------- internals ---------- */\r\nfunction pickCharged(me, opp) {\r\n    const ready = me.charged.filter((m) => me.energy >= (m.energy || 999));\r\n    if (!ready.length) return null;\r\n    // score = damage projection + slight bias for cheaper cost to reduce overcapping\r\n    let best = ready[0],\r\n        bestScore = -1;\r\n    for (const m of ready) {\r\n        const d = projDamage(me, opp, m);\r\n        const score = d + (100 - (m.energy || 100)) * 0.05;\r\n        if (score > bestScore) {\r\n            bestScore = score;\r\n            best = m;\r\n        }\r\n    }\r\n    return best;\r\n}\r\nfunction resolveCharged(att, def, move) {\r\n    if (!move) return;\r\n    // selective shielding\r\n    if (shouldShield(def, move, att)) {\r\n        def.shields -= 1;\r\n    } else {\r\n        def.hp = Math.max(0, def.hp - projDamage(att, def, move));\r\n    }\r\n    att.energy = clamp(att.energy - (move.energy || 0), 0, 100);\r\n}\r\nfunction stepFast(att, def) {\r\n    att.fastTurnsLeft -= 1;\r\n    if (att.fastTurnsLeft <= 0) {\r\n        def.hp = Math.max(0, def.hp - projDamage(att, def, att.fast));\r\n        att.energy = clamp(att.energy + (att.fast.energyGain || 0), 0, 100);\r\n        att.fastTurnsLeft = att.fast.turns || 1;\r\n    }\r\n}\r\nfunction projDamage(att, def, move) {\r\n    if (!move) return 0;\r\n    const stab = att.types.includes(move.type) ? STAB : 1;\r\n    const eff = effMult(move.type, def.types);\r\n    return pvpDamage(move.power || 0, att.atk, def.def, stab, eff);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}