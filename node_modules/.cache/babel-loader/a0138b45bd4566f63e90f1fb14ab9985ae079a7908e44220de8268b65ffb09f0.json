{"ast":null,"code":"// /src/engine/battleEngine.js\n// PvP-lite engine with CPM scaling + selective shielding.\n// Returns: { result:'p1'|'p2'|'draw'|'timeout', p1:{hp,shields,energy}, p2:{hp,shields,energy} }\n\nimport gamemaster from \"../Data/gamemaster.json\";\n\n/* ---------- helpers ---------- */\nfunction canonMoveId(s) {\n  return String(s || \"\").trim().replace(/^COMBAT_V\\d+_MOVE_/i, \"\").replace(/^V\\d+_/i, \"\").replace(/[^A-Za-z0-9]+/g, \"_\").replace(/_+/g, \"_\").replace(/^_|_$/g, \"\").toUpperCase();\n}\nfunction normSpecies(s) {\n  return String(s || \"\").toLowerCase().trim().replace(/[^a-z0-9]+/g, \"_\").replace(/^_+|_+$/g, \"\");\n}\nconst clamp = (v, lo, hi) => Math.max(lo, Math.min(hi, v));\n\n/* ---------- CPM (levels -> multipliers) ---------- */\nconst CPM = [];\n(function fillCPM() {\n  const table = [0.094, 0.135137432, 0.16639787, 0.192650919, 0.21573247, 0.236572661, 0.25572005, 0.273530381, 0.29024988, 0.306057377, 0.3210876, 0.335445036, 0.34921268, 0.362457751, 0.37523559, 0.387592406, 0.39956728, 0.411193551, 0.42250001, 0.432926419, 0.44310755, 0.4530599578, 0.46279839, 0.472336083, 0.48168495, 0.4908558, 0.49985844, 0.508701765, 0.51739395, 0.525942511, 0.53435433, 0.542635767, 0.55079269, 0.558830576, 0.56675452, 0.574569153, 0.58227891, 0.589887907, 0.59740001, 0.604818814, 0.61215729, 0.619399365, 0.62656713, 0.633644533, 0.64065295, 0.647576426, 0.65443563, 0.661214806, 0.667934, 0.674577537, 0.68116492, 0.687680648, 0.69414365, 0.700538673, 0.70688421, 0.713164996, 0.71939909, 0.725571552, 0.7317, 0.734741009, 0.73776948, 0.740785574, 0.74378943, 0.746781211, 0.74976104, 0.752729087, 0.75568551, 0.758630378, 0.76156384, 0.764486065, 0.76739717, 0.770297266, 0.7731865, 0.776064962, 0.77893275, 0.781790055, 0.78463697, 0.787473578, 0.79030001, 0.792803968, 0.79530001, 0.797803921, 0.8003];\n  CPM.length = 100;\n  CPM.fill(0);\n  for (let i = 0; i < table.length; i++) CPM[i + 1] = table[i];\n})();\nconst cpmOf = levelIndex => {\n  // levelIndex is the integer index your adapter passes (best level under cap).\n  for (let i = levelIndex; i > 0; i--) if (CPM[i]) return CPM[i];\n  return CPM[79] || 0.79030001; // fallback ~L40\n};\n\n/* ---------- data maps ---------- */\nconst MOVES = {};\n(function buildMoves(_gamemaster$data, _gamemaster$data2) {\n  const list = (gamemaster === null || gamemaster === void 0 ? void 0 : gamemaster.moves) || (gamemaster === null || gamemaster === void 0 ? void 0 : (_gamemaster$data = gamemaster.data) === null || _gamemaster$data === void 0 ? void 0 : _gamemaster$data.moves) || (gamemaster === null || gamemaster === void 0 ? void 0 : gamemaster.combatMoves) || (gamemaster === null || gamemaster === void 0 ? void 0 : (_gamemaster$data2 = gamemaster.data) === null || _gamemaster$data2 === void 0 ? void 0 : _gamemaster$data2.combatMoves) || [];\n  for (const m of list) {\n    var _ref, _m$moveId, _ref2, _ref3, _ref4, _m$pvpPower, _ref5, _m$durationTurns;\n    const id = canonMoveId((_ref = (_m$moveId = m.moveId) !== null && _m$moveId !== void 0 ? _m$moveId : m.id) !== null && _ref !== void 0 ? _ref : m.name);\n    if (!id) continue;\n    const type = String(m.type || m.pokemonType || \"Normal\").replace(/^POKEMON_TYPE_/, \"\").toLowerCase();\n    const power = Number((_ref2 = (_ref3 = (_ref4 = (_m$pvpPower = m.pvpPower) !== null && _m$pvpPower !== void 0 ? _m$pvpPower : m.power) !== null && _ref4 !== void 0 ? _ref4 : m.combatPower) !== null && _ref3 !== void 0 ? _ref3 : m.damage) !== null && _ref2 !== void 0 ? _ref2 : 0) || 0;\n    let energyGain = 0,\n      energyCost = 0,\n      turns = Number((_ref5 = (_m$durationTurns = m.durationTurns) !== null && _m$durationTurns !== void 0 ? _m$durationTurns : m.turns) !== null && _ref5 !== void 0 ? _ref5 : m.cooldownTurns);\n    if (m.energyDelta != null) {\n      const ed = Number(m.energyDelta) || 0;\n      if (ed > 0) energyGain = ed;\n      if (ed < 0) energyCost = Math.abs(ed);\n    }\n    if (m.energyGain != null) energyGain = Number(m.energyGain) || energyGain;\n    if (m.energy != null) energyCost = Math.abs(Number(m.energy)) || energyCost;\n    if (!Number.isFinite(turns)) turns = energyGain > 0 ? 1 : 0;\n    if (energyGain > 0) turns = Math.max(1, Math.floor(turns) || 1);\n    MOVES[id] = {\n      id,\n      type,\n      power,\n      energyGain,\n      energy: energyCost,\n      turns\n    };\n  }\n  MOVES.TACKLE ||= {\n    id: \"TACKLE\",\n    type: \"normal\",\n    power: 3,\n    energyGain: 8,\n    energy: 0,\n    turns: 1\n  };\n})();\nconst POKEDEX = {},\n  POKEDEX_NORM = {};\n(function buildDex(_gamemaster$data3) {\n  const list = (gamemaster === null || gamemaster === void 0 ? void 0 : gamemaster.pokemon) || (gamemaster === null || gamemaster === void 0 ? void 0 : (_gamemaster$data3 = gamemaster.data) === null || _gamemaster$data3 === void 0 ? void 0 : _gamemaster$data3.pokemon) || [];\n  for (const p of list) {\n    var _ref6, _bs$atk, _ref7, _bs$def, _ref8, _ref9, _bs$hp;\n    if (!(p !== null && p !== void 0 && p.speciesId)) continue;\n    const exact = String(p.speciesId);\n    const norm = normSpecies(exact);\n    const bs = p.baseStats || p.stats || {};\n    const typesArr = p.types || [p.type1, p.type2].filter(Boolean);\n    const types = (typesArr || []).map(t => String(t).replace(/^POKEMON_TYPE_/, \"\").toLowerCase());\n    const entry = {\n      speciesId: exact,\n      types: types.length ? types : [\"normal\"],\n      stats: {\n        atk: Number((_ref6 = (_bs$atk = bs.atk) !== null && _bs$atk !== void 0 ? _bs$atk : bs.attack) !== null && _ref6 !== void 0 ? _ref6 : 0) || 0,\n        def: Number((_ref7 = (_bs$def = bs.def) !== null && _bs$def !== void 0 ? _bs$def : bs.defense) !== null && _ref7 !== void 0 ? _ref7 : 0) || 0,\n        hp: Number((_ref8 = (_ref9 = (_bs$hp = bs.hp) !== null && _bs$hp !== void 0 ? _bs$hp : bs.sta) !== null && _ref9 !== void 0 ? _ref9 : bs.stamina) !== null && _ref8 !== void 0 ? _ref8 : 0) || 0\n      }\n    };\n    POKEDEX[exact] = entry;\n    POKEDEX_NORM[norm] = entry;\n  }\n})();\nconst lookupSpecies = id => POKEDEX[id] || POKEDEX_NORM[normSpecies(id)] || null;\nconst lookupMove = id => id ? MOVES[canonMoveId(id)] || null : null;\n\n/* ---------- type chart ---------- */\nconst TYPES = [\"normal\", \"fighting\", \"flying\", \"poison\", \"ground\", \"rock\", \"bug\", \"ghost\", \"steel\", \"fire\", \"water\", \"grass\", \"electric\", \"psychic\", \"ice\", \"dragon\", \"dark\", \"fairy\"];\nconst EFF = {};\nfor (const a of TYPES) {\n  EFF[a] = {};\n  for (const d of TYPES) EFF[a][d] = 1;\n}\nfunction S(a, ds, m) {\n  for (const d of ds) EFF[a][d] = m;\n}\n_c = S;\nS(\"fighting\", [\"normal\", \"rock\", \"ice\", \"dark\", \"steel\"], 1.6);\nS(\"fighting\", [\"flying\", \"poison\", \"bug\", \"psychic\", \"fairy\"], 0.625);\nS(\"fighting\", [\"ghost\"], 0.390625);\nS(\"flying\", [\"fighting\", \"bug\", \"grass\"], 1.6);\nS(\"flying\", [\"rock\", \"steel\", \"electric\"], 0.625);\nS(\"poison\", [\"grass\", \"fairy\"], 1.6);\nS(\"poison\", [\"poison\", \"ground\", \"rock\", \"ghost\"], 0.625);\nS(\"poison\", [\"steel\"], 0.390625);\nS(\"ground\", [\"poison\", \"rock\", \"steel\", \"fire\", \"electric\"], 1.6);\nS(\"ground\", [\"bug\", \"grass\"], 0.625);\nS(\"ground\", [\"flying\"], 0.390625);\nS(\"rock\", [\"flying\", \"bug\", \"fire\", \"ice\"], 1.6);\nS(\"rock\", [\"fighting\", \"ground\", \"steel\"], 0.625);\nS(\"bug\", [\"grass\", \"psychic\", \"dark\"], 1.6);\nS(\"bug\", [\"fighting\", \"flying\", \"poison\", \"ghost\", \"steel\", \"fire\", \"fairy\"], 0.625);\nS(\"ghost\", [\"ghost\", \"psychic\"], 1.6);\nS(\"ghost\", [\"dark\"], 0.625);\nS(\"ghost\", [\"normal\"], 0.390625);\nS(\"steel\", [\"rock\", \"ice\", \"fairy\"], 1.6);\nS(\"steel\", [\"steel\", \"fire\", \"water\", \"electric\"], 0.625);\nS(\"fire\", [\"bug\", \"steel\", \"grass\", \"ice\"], 1.6);\nS(\"fire\", [\"rock\", \"fire\", \"water\", \"dragon\"], 0.625);\nS(\"water\", [\"ground\", \"rock\", \"fire\"], 1.6);\nS(\"water\", [\"water\", \"grass\", \"dragon\"], 0.625);\nS(\"grass\", [\"ground\", \"rock\", \"water\"], 1.6);\nS(\"grass\", [\"flying\", \"poison\", \"bug\", \"steel\", \"fire\", \"grass\", \"dragon\"], 0.625);\nS(\"electric\", [\"flying\", \"water\"], 1.6);\nS(\"electric\", [\"grass\", \"electric\", \"dragon\"], 0.625);\nS(\"electric\", [\"ground\"], 0.390625);\nS(\"psychic\", [\"fighting\", \"poison\"], 1.6);\nS(\"psychic\", [\"psychic\", \"steel\"], 0.625);\nS(\"psychic\", [\"dark\"], 0.390625);\nS(\"ice\", [\"flying\", \"ground\", \"grass\", \"dragon\"], 1.6);\nS(\"ice\", [\"steel\", \"fire\", \"water\", \"ice\"], 0.625);\nS(\"dragon\", [\"dragon\"], 1.6);\nS(\"dragon\", [\"steel\"], 0.625);\nS(\"dragon\", [\"fairy\"], 0.390625);\nS(\"dark\", [\"ghost\", \"psychic\"], 1.6);\nS(\"dark\", [\"fighting\", \"dark\", \"fairy\"], 0.625);\nS(\"fairy\", [\"fighting\", \"dragon\", \"dark\"], 1.6);\nS(\"fairy\", [\"poison\", \"steel\", \"fire\"], 0.625);\nconst STAB = 1.2;\nfunction effMult(type, defendTypes) {\n  let m = 1;\n  for (const t of defendTypes || []) {\n    var _EFF$type$t, _EFF$type;\n    m *= (_EFF$type$t = (_EFF$type = EFF[type]) === null || _EFF$type === void 0 ? void 0 : _EFF$type[t]) !== null && _EFF$type$t !== void 0 ? _EFF$type$t : 1;\n  }\n  return m;\n}\nfunction pvpDamage(power, atk, def, stab, eff) {\n  const raw = 0.5 * power * (atk / Math.max(1, def)) * (stab || 1) * (eff || 1);\n  return Math.floor(raw) + 1;\n}\n\n/* ---------- battler (with CPM scaling) ---------- */\nfunction makeBattler(src) {\n  const base = lookupSpecies(src === null || src === void 0 ? void 0 : src.speciesId);\n  if (!base) {\n    console.warn(\"Engine: species not found\", src === null || src === void 0 ? void 0 : src.speciesId);\n    return {\n      speciesId: (src === null || src === void 0 ? void 0 : src.speciesId) || \"unknown\",\n      types: [],\n      atk: 0,\n      def: 0,\n      hpMax: 0,\n      hp: 0,\n      shields: (src === null || src === void 0 ? void 0 : src.shields) | 0,\n      energy: 0,\n      fast: MOVES.TACKLE,\n      charged: [],\n      fastTurnsLeft: MOVES.TACKLE.turns || 1\n    };\n  }\n  const fast = lookupMove(src === null || src === void 0 ? void 0 : src.fastMove) || MOVES.TACKLE;\n  const charged = ((src === null || src === void 0 ? void 0 : src.chargedMoves) || []).map(lookupMove).filter(Boolean);\n  const cpm = cpmOf(Number(src === null || src === void 0 ? void 0 : src.level) || 79); // adapter passes a level index; default ~L40\n  const atk = (base.stats.atk || 0) * cpm;\n  const def = (base.stats.def || 0) * cpm;\n  const hpMax = Math.max(1, Math.floor((base.stats.hp || 0) * cpm));\n  return {\n    speciesId: base.speciesId,\n    types: base.types,\n    atk,\n    def,\n    hpMax,\n    hp: hpMax,\n    shields: Number(src === null || src === void 0 ? void 0 : src.shields) | 0,\n    energy: 0,\n    fast,\n    charged,\n    fastTurnsLeft: fast.turns || 1\n  };\n}\n\n/* ---------- shielding heuristic ---------- */\n// Shield lethal or big-chunk (liberal with 2 shields, stricter with 1)\nfunction shouldShield(defender, incomingMove, attacker) {\n  if (defender.shields <= 0 || !incomingMove) return false;\n  const dmg = projDamage(attacker, defender, incomingMove);\n  if (dmg >= defender.hp) return true;\n  const threshold = defender.shields >= 2 ? 0.25 : 0.40;\n  return dmg >= defender.hpMax * threshold;\n}\n\n/* ---------- core sim ---------- */\nexport function simulateBattle(p1In, p2In) {\n  const A = makeBattler(p1In);\n  const B = makeBattler(p2In);\n  const MAX_TURNS = 1000;\n  for (let t = 1; t <= MAX_TURNS; t++) {\n    if (A.hp <= 0 || B.hp <= 0) break;\n    const aReady = pickCharged(A, B);\n    const bReady = pickCharged(B, A);\n    if (aReady || bReady) {\n      const first = aReady && bReady ? A.atk === B.atk ? A.speciesId < B.speciesId ? \"A\" : \"B\" : A.atk > B.atk ? \"A\" : \"B\" : aReady ? \"A\" : \"B\";\n      if (first === \"A\") {\n        resolveCharged(A, B, aReady);\n        if (B.hp <= 0) break;\n        if (bReady) resolveCharged(B, A, bReady);\n      } else {\n        resolveCharged(B, A, bReady);\n        if (A.hp <= 0) break;\n        if (aReady) resolveCharged(A, B, aReady);\n      }\n      if (aReady) A.fastTurnsLeft = A.fast.turns || 1;\n      if (bReady) B.fastTurnsLeft = B.fast.turns || 1;\n      continue;\n    }\n    stepFast(A, B);\n    if (B.hp <= 0) break;\n    stepFast(B, A);\n    if (A.hp <= 0) break;\n  }\n  const result = A.hp <= 0 && B.hp <= 0 ? \"draw\" : B.hp <= 0 ? \"p1\" : A.hp <= 0 ? \"p2\" : \"timeout\";\n  return {\n    result,\n    p1: {\n      hp: Math.round(A.hp / A.hpMax * 100),\n      shields: A.shields,\n      energy: A.energy\n    },\n    p2: {\n      hp: Math.round(B.hp / B.hpMax * 100),\n      shields: B.shields,\n      energy: B.energy\n    }\n  };\n}\n\n/* ---------- internals ---------- */\nfunction pickCharged(me, opp) {\n  const ready = me.charged.filter(m => me.energy >= (m.energy || 999));\n  if (!ready.length) return null;\n  let best = ready[0],\n    bestScore = -1;\n  for (const m of ready) {\n    const d = projDamage(me, opp, m);\n    const score = d + (100 - (m.energy || 100)) * 0.05;\n    if (score > bestScore) {\n      bestScore = score;\n      best = m;\n    }\n  }\n  return best;\n}\nfunction resolveCharged(att, def, move) {\n  if (!move) return;\n  if (shouldShield(def, move, att)) def.shields -= 1;else def.hp = Math.max(0, def.hp - projDamage(att, def, move));\n  att.energy = clamp(att.energy - (move.energy || 0), 0, 100);\n}\nfunction stepFast(att, def) {\n  att.fastTurnsLeft -= 1;\n  if (att.fastTurnsLeft <= 0) {\n    def.hp = Math.max(0, def.hp - projDamage(att, def, att.fast));\n    att.energy = clamp(att.energy + (att.fast.energyGain || 0), 0, 100);\n    att.fastTurnsLeft = att.fast.turns || 1;\n  }\n}\nfunction projDamage(att, def, move) {\n  if (!move) return 0;\n  const stab = att.types.includes(move.type) ? 1.2 : 1;\n  const eff = effMult(move.type, def.types);\n  return pvpDamage(move.power || 0, att.atk, def.def, stab, eff);\n}\nvar _c;\n$RefreshReg$(_c, \"S\");","map":{"version":3,"names":["gamemaster","canonMoveId","s","String","trim","replace","toUpperCase","normSpecies","toLowerCase","clamp","v","lo","hi","Math","max","min","CPM","fillCPM","table","length","fill","i","cpmOf","levelIndex","MOVES","buildMoves","_gamemaster$data","_gamemaster$data2","list","moves","data","combatMoves","m","_ref","_m$moveId","_ref2","_ref3","_ref4","_m$pvpPower","_ref5","_m$durationTurns","id","moveId","name","type","pokemonType","power","Number","pvpPower","combatPower","damage","energyGain","energyCost","turns","durationTurns","cooldownTurns","energyDelta","ed","abs","energy","isFinite","floor","TACKLE","POKEDEX","POKEDEX_NORM","buildDex","_gamemaster$data3","pokemon","p","_ref6","_bs$atk","_ref7","_bs$def","_ref8","_ref9","_bs$hp","speciesId","exact","norm","bs","baseStats","stats","typesArr","types","type1","type2","filter","Boolean","map","t","entry","atk","attack","def","defense","hp","sta","stamina","lookupSpecies","lookupMove","TYPES","EFF","a","d","S","ds","_c","STAB","effMult","defendTypes","_EFF$type$t","_EFF$type","pvpDamage","stab","eff","raw","makeBattler","src","base","console","warn","hpMax","shields","fast","charged","fastTurnsLeft","fastMove","chargedMoves","cpm","level","shouldShield","defender","incomingMove","attacker","dmg","projDamage","threshold","simulateBattle","p1In","p2In","A","B","MAX_TURNS","aReady","pickCharged","bReady","first","resolveCharged","stepFast","result","p1","round","p2","me","opp","ready","best","bestScore","score","att","move","includes","$RefreshReg$"],"sources":["C:/Users/ben/Projects/nebsojipvptrainer/src/engine/battleEngine.js"],"sourcesContent":["// /src/engine/battleEngine.js\r\n// PvP-lite engine with CPM scaling + selective shielding.\r\n// Returns: { result:'p1'|'p2'|'draw'|'timeout', p1:{hp,shields,energy}, p2:{hp,shields,energy} }\r\n\r\nimport gamemaster from \"../Data/gamemaster.json\";\r\n\r\n/* ---------- helpers ---------- */\r\nfunction canonMoveId(s) {\r\n    return String(s || \"\")\r\n        .trim()\r\n        .replace(/^COMBAT_V\\d+_MOVE_/i, \"\")\r\n        .replace(/^V\\d+_/i, \"\")\r\n        .replace(/[^A-Za-z0-9]+/g, \"_\")\r\n        .replace(/_+/g, \"_\")\r\n        .replace(/^_|_$/g, \"\")\r\n        .toUpperCase();\r\n}\r\nfunction normSpecies(s) {\r\n    return String(s || \"\").toLowerCase().trim().replace(/[^a-z0-9]+/g, \"_\").replace(/^_+|_+$/g, \"\");\r\n}\r\nconst clamp = (v, lo, hi) => Math.max(lo, Math.min(hi, v));\r\n\r\n/* ---------- CPM (levels -> multipliers) ---------- */\r\nconst CPM = [];\r\n(function fillCPM() {\r\n    const table = [\r\n        0.094, 0.135137432, 0.16639787, 0.192650919, 0.21573247, 0.236572661, 0.25572005, 0.273530381,\r\n        0.29024988, 0.306057377, 0.3210876, 0.335445036, 0.34921268, 0.362457751, 0.37523559, 0.387592406,\r\n        0.39956728, 0.411193551, 0.42250001, 0.432926419, 0.44310755, 0.4530599578, 0.46279839, 0.472336083,\r\n        0.48168495, 0.4908558, 0.49985844, 0.508701765, 0.51739395, 0.525942511, 0.53435433, 0.542635767,\r\n        0.55079269, 0.558830576, 0.56675452, 0.574569153, 0.58227891, 0.589887907, 0.59740001, 0.604818814,\r\n        0.61215729, 0.619399365, 0.62656713, 0.633644533, 0.64065295, 0.647576426, 0.65443563, 0.661214806,\r\n        0.667934, 0.674577537, 0.68116492, 0.687680648, 0.69414365, 0.700538673, 0.70688421, 0.713164996,\r\n        0.71939909, 0.725571552, 0.7317, 0.734741009, 0.73776948, 0.740785574, 0.74378943, 0.746781211,\r\n        0.74976104, 0.752729087, 0.75568551, 0.758630378, 0.76156384, 0.764486065, 0.76739717, 0.770297266,\r\n        0.7731865, 0.776064962, 0.77893275, 0.781790055, 0.78463697, 0.787473578, 0.79030001, 0.792803968,\r\n        0.79530001, 0.797803921, 0.8003\r\n    ];\r\n    CPM.length = 100; CPM.fill(0);\r\n    for (let i = 0; i < table.length; i++) CPM[i + 1] = table[i];\r\n})();\r\nconst cpmOf = (levelIndex) => {\r\n    // levelIndex is the integer index your adapter passes (best level under cap).\r\n    for (let i = levelIndex; i > 0; i--) if (CPM[i]) return CPM[i];\r\n    return CPM[79] || 0.79030001; // fallback ~L40\r\n};\r\n\r\n/* ---------- data maps ---------- */\r\nconst MOVES = {};\r\n(function buildMoves() {\r\n    const list = gamemaster?.moves || gamemaster?.data?.moves || gamemaster?.combatMoves || gamemaster?.data?.combatMoves || [];\r\n    for (const m of list) {\r\n        const id = canonMoveId(m.moveId ?? m.id ?? m.name);\r\n        if (!id) continue;\r\n        const type = String(m.type || m.pokemonType || \"Normal\").replace(/^POKEMON_TYPE_/, \"\").toLowerCase();\r\n        const power = Number(m.pvpPower ?? m.power ?? m.combatPower ?? m.damage ?? 0) || 0;\r\n\r\n        let energyGain = 0, energyCost = 0, turns = Number(m.durationTurns ?? m.turns ?? m.cooldownTurns);\r\n        if (m.energyDelta != null) {\r\n            const ed = Number(m.energyDelta) || 0;\r\n            if (ed > 0) energyGain = ed;\r\n            if (ed < 0) energyCost = Math.abs(ed);\r\n        }\r\n        if (m.energyGain != null) energyGain = Number(m.energyGain) || energyGain;\r\n        if (m.energy != null) energyCost = Math.abs(Number(m.energy)) || energyCost;\r\n\r\n        if (!Number.isFinite(turns)) turns = energyGain > 0 ? 1 : 0;\r\n        if (energyGain > 0) turns = Math.max(1, Math.floor(turns) || 1);\r\n\r\n        MOVES[id] = { id, type, power, energyGain, energy: energyCost, turns };\r\n    }\r\n    MOVES.TACKLE ||= { id: \"TACKLE\", type: \"normal\", power: 3, energyGain: 8, energy: 0, turns: 1 };\r\n})();\r\n\r\nconst POKEDEX = {}, POKEDEX_NORM = {};\r\n(function buildDex() {\r\n    const list = gamemaster?.pokemon || gamemaster?.data?.pokemon || [];\r\n    for (const p of list) {\r\n        if (!p?.speciesId) continue;\r\n        const exact = String(p.speciesId);\r\n        const norm = normSpecies(exact);\r\n        const bs = p.baseStats || p.stats || {};\r\n        const typesArr = p.types || [p.type1, p.type2].filter(Boolean);\r\n        const types = (typesArr || []).map(t => String(t).replace(/^POKEMON_TYPE_/, \"\").toLowerCase());\r\n        const entry = {\r\n            speciesId: exact,\r\n            types: types.length ? types : [\"normal\"],\r\n            stats: {\r\n                atk: Number(bs.atk ?? bs.attack ?? 0) || 0,\r\n                def: Number(bs.def ?? bs.defense ?? 0) || 0,\r\n                hp: Number(bs.hp ?? bs.sta ?? bs.stamina ?? 0) || 0\r\n            }\r\n        };\r\n        POKEDEX[exact] = entry;\r\n        POKEDEX_NORM[norm] = entry;\r\n    }\r\n})();\r\nconst lookupSpecies = (id) => (POKEDEX[id] || POKEDEX_NORM[normSpecies(id)] || null);\r\nconst lookupMove = (id) => (id ? MOVES[canonMoveId(id)] || null : null);\r\n\r\n/* ---------- type chart ---------- */\r\nconst TYPES = [\"normal\", \"fighting\", \"flying\", \"poison\", \"ground\", \"rock\", \"bug\", \"ghost\", \"steel\", \"fire\", \"water\", \"grass\", \"electric\", \"psychic\", \"ice\", \"dragon\", \"dark\", \"fairy\"];\r\nconst EFF = {}; for (const a of TYPES) { EFF[a] = {}; for (const d of TYPES) EFF[a][d] = 1; }\r\nfunction S(a, ds, m) { for (const d of ds) EFF[a][d] = m; }\r\nS(\"fighting\", [\"normal\", \"rock\", \"ice\", \"dark\", \"steel\"], 1.6); S(\"fighting\", [\"flying\", \"poison\", \"bug\", \"psychic\", \"fairy\"], 0.625); S(\"fighting\", [\"ghost\"], 0.390625);\r\nS(\"flying\", [\"fighting\", \"bug\", \"grass\"], 1.6); S(\"flying\", [\"rock\", \"steel\", \"electric\"], 0.625);\r\nS(\"poison\", [\"grass\", \"fairy\"], 1.6); S(\"poison\", [\"poison\", \"ground\", \"rock\", \"ghost\"], 0.625); S(\"poison\", [\"steel\"], 0.390625);\r\nS(\"ground\", [\"poison\", \"rock\", \"steel\", \"fire\", \"electric\"], 1.6); S(\"ground\", [\"bug\", \"grass\"], 0.625); S(\"ground\", [\"flying\"], 0.390625);\r\nS(\"rock\", [\"flying\", \"bug\", \"fire\", \"ice\"], 1.6); S(\"rock\", [\"fighting\", \"ground\", \"steel\"], 0.625);\r\nS(\"bug\", [\"grass\", \"psychic\", \"dark\"], 1.6); S(\"bug\", [\"fighting\", \"flying\", \"poison\", \"ghost\", \"steel\", \"fire\", \"fairy\"], 0.625);\r\nS(\"ghost\", [\"ghost\", \"psychic\"], 1.6); S(\"ghost\", [\"dark\"], 0.625); S(\"ghost\", [\"normal\"], 0.390625);\r\nS(\"steel\", [\"rock\", \"ice\", \"fairy\"], 1.6); S(\"steel\", [\"steel\", \"fire\", \"water\", \"electric\"], 0.625);\r\nS(\"fire\", [\"bug\", \"steel\", \"grass\", \"ice\"], 1.6); S(\"fire\", [\"rock\", \"fire\", \"water\", \"dragon\"], 0.625);\r\nS(\"water\", [\"ground\", \"rock\", \"fire\"], 1.6); S(\"water\", [\"water\", \"grass\", \"dragon\"], 0.625);\r\nS(\"grass\", [\"ground\", \"rock\", \"water\"], 1.6); S(\"grass\", [\"flying\", \"poison\", \"bug\", \"steel\", \"fire\", \"grass\", \"dragon\"], 0.625);\r\nS(\"electric\", [\"flying\", \"water\"], 1.6); S(\"electric\", [\"grass\", \"electric\", \"dragon\"], 0.625); S(\"electric\", [\"ground\"], 0.390625);\r\nS(\"psychic\", [\"fighting\", \"poison\"], 1.6); S(\"psychic\", [\"psychic\", \"steel\"], 0.625); S(\"psychic\", [\"dark\"], 0.390625);\r\nS(\"ice\", [\"flying\", \"ground\", \"grass\", \"dragon\"], 1.6); S(\"ice\", [\"steel\", \"fire\", \"water\", \"ice\"], 0.625);\r\nS(\"dragon\", [\"dragon\"], 1.6); S(\"dragon\", [\"steel\"], 0.625); S(\"dragon\", [\"fairy\"], 0.390625);\r\nS(\"dark\", [\"ghost\", \"psychic\"], 1.6); S(\"dark\", [\"fighting\", \"dark\", \"fairy\"], 0.625);\r\nS(\"fairy\", [\"fighting\", \"dragon\", \"dark\"], 1.6); S(\"fairy\", [\"poison\", \"steel\", \"fire\"], 0.625);\r\n\r\nconst STAB = 1.2;\r\nfunction effMult(type, defendTypes) { let m = 1; for (const t of (defendTypes || [])) m *= (EFF[type]?.[t] ?? 1); return m; }\r\nfunction pvpDamage(power, atk, def, stab, eff) { const raw = 0.5 * power * (atk / Math.max(1, def)) * (stab || 1) * (eff || 1); return Math.floor(raw) + 1; }\r\n\r\n/* ---------- battler (with CPM scaling) ---------- */\r\nfunction makeBattler(src) {\r\n    const base = lookupSpecies(src?.speciesId);\r\n    if (!base) {\r\n        console.warn(\"Engine: species not found\", src?.speciesId);\r\n        return { speciesId: src?.speciesId || \"unknown\", types: [], atk: 0, def: 0, hpMax: 0, hp: 0, shields: src?.shields | 0, energy: 0, fast: MOVES.TACKLE, charged: [], fastTurnsLeft: MOVES.TACKLE.turns || 1 };\r\n    }\r\n    const fast = lookupMove(src?.fastMove) || MOVES.TACKLE;\r\n    const charged = (src?.chargedMoves || []).map(lookupMove).filter(Boolean);\r\n\r\n    const cpm = cpmOf(Number(src?.level) || 79); // adapter passes a level index; default ~L40\r\n    const atk = (base.stats.atk || 0) * cpm;\r\n    const def = (base.stats.def || 0) * cpm;\r\n    const hpMax = Math.max(1, Math.floor((base.stats.hp || 0) * cpm));\r\n\r\n    return {\r\n        speciesId: base.speciesId,\r\n        types: base.types,\r\n        atk, def, hpMax, hp: hpMax,\r\n        shields: Number(src?.shields) | 0,\r\n        energy: 0,\r\n        fast, charged,\r\n        fastTurnsLeft: fast.turns || 1\r\n    };\r\n}\r\n\r\n/* ---------- shielding heuristic ---------- */\r\n// Shield lethal or big-chunk (liberal with 2 shields, stricter with 1)\r\nfunction shouldShield(defender, incomingMove, attacker) {\r\n    if (defender.shields <= 0 || !incomingMove) return false;\r\n    const dmg = projDamage(attacker, defender, incomingMove);\r\n    if (dmg >= defender.hp) return true;\r\n    const threshold = defender.shields >= 2 ? 0.25 : 0.40;\r\n    return dmg >= defender.hpMax * threshold;\r\n}\r\n\r\n/* ---------- core sim ---------- */\r\nexport function simulateBattle(p1In, p2In) {\r\n    const A = makeBattler(p1In);\r\n    const B = makeBattler(p2In);\r\n\r\n    const MAX_TURNS = 1000;\r\n    for (let t = 1; t <= MAX_TURNS; t++) {\r\n        if (A.hp <= 0 || B.hp <= 0) break;\r\n\r\n        const aReady = pickCharged(A, B);\r\n        const bReady = pickCharged(B, A);\r\n\r\n        if (aReady || bReady) {\r\n            const first = (aReady && bReady)\r\n                ? (A.atk === B.atk ? (A.speciesId < B.speciesId ? \"A\" : \"B\") : (A.atk > B.atk ? \"A\" : \"B\"))\r\n                : (aReady ? \"A\" : \"B\");\r\n\r\n            if (first === \"A\") { resolveCharged(A, B, aReady); if (B.hp <= 0) break; if (bReady) resolveCharged(B, A, bReady); }\r\n            else { resolveCharged(B, A, bReady); if (A.hp <= 0) break; if (aReady) resolveCharged(A, B, aReady); }\r\n\r\n            if (aReady) A.fastTurnsLeft = A.fast.turns || 1;\r\n            if (bReady) B.fastTurnsLeft = B.fast.turns || 1;\r\n            continue;\r\n        }\r\n\r\n        stepFast(A, B); if (B.hp <= 0) break;\r\n        stepFast(B, A); if (A.hp <= 0) break;\r\n    }\r\n\r\n    const result = (A.hp <= 0 && B.hp <= 0) ? \"draw\" : (B.hp <= 0 ? \"p1\" : (A.hp <= 0 ? \"p2\" : \"timeout\"));\r\n    return {\r\n        result,\r\n        p1: { hp: Math.round((A.hp / A.hpMax) * 100), shields: A.shields, energy: A.energy },\r\n        p2: { hp: Math.round((B.hp / B.hpMax) * 100), shields: B.shields, energy: B.energy }\r\n    };\r\n}\r\n\r\n/* ---------- internals ---------- */\r\nfunction pickCharged(me, opp) {\r\n    const ready = me.charged.filter(m => me.energy >= (m.energy || 999));\r\n    if (!ready.length) return null;\r\n    let best = ready[0], bestScore = -1;\r\n    for (const m of ready) {\r\n        const d = projDamage(me, opp, m);\r\n        const score = d + (100 - (m.energy || 100)) * 0.05;\r\n        if (score > bestScore) { bestScore = score; best = m; }\r\n    }\r\n    return best;\r\n}\r\nfunction resolveCharged(att, def, move) {\r\n    if (!move) return;\r\n    if (shouldShield(def, move, att)) def.shields -= 1;\r\n    else def.hp = Math.max(0, def.hp - projDamage(att, def, move));\r\n    att.energy = clamp(att.energy - (move.energy || 0), 0, 100);\r\n}\r\nfunction stepFast(att, def) {\r\n    att.fastTurnsLeft -= 1;\r\n    if (att.fastTurnsLeft <= 0) {\r\n        def.hp = Math.max(0, def.hp - projDamage(att, def, att.fast));\r\n        att.energy = clamp(att.energy + (att.fast.energyGain || 0), 0, 100);\r\n        att.fastTurnsLeft = att.fast.turns || 1;\r\n    }\r\n}\r\nfunction projDamage(att, def, move) {\r\n    if (!move) return 0;\r\n    const stab = att.types.includes(move.type) ? 1.2 : 1;\r\n    const eff = effMult(move.type, def.types);\r\n    return pvpDamage(move.power || 0, att.atk, def.def, stab, eff);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}