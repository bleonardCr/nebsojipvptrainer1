{"ast":null,"code":"// /src/engine/battleEngine.js\n// Simple PvP simulation engine\n\nimport gamemaster from \"../Data/gamemaster.json\";\n\n// Build moves map\nconst MOVES = {};\nfor (const move of gamemaster.moves) {\n  MOVES[move.moveId] = move;\n}\n\n// Build POKEDEX map\nconst POKEDEX = {};\nfor (const pkmn of gamemaster.pokemon) {\n  POKEDEX[pkmn.speciesId] = pkmn;\n}\n\n// Utility: normalize incoming speciesId to match gamemaster keys\nfunction normalizeId(name) {\n  return String(name || \"\").toLowerCase().trim().replace(/\\s+/g, \"_\").replace(/[()]/g, \"\").replace(/_/g, \"-\");\n}\n\n// Create a battle-ready Pokémon object\nfunction createBattler(pokemon) {\n  if (!pokemon || !pokemon.speciesId) {\n    console.warn(\"No pokemon data passed to createBattler\", pokemon);\n    return {\n      hp: 0,\n      energy: 0,\n      cooldown: 0,\n      shields: 0,\n      moves: {\n        fast: {},\n        charged: []\n      }\n    };\n  }\n  const id = normalizeId(pokemon.speciesId);\n  const base = POKEDEX[id];\n  if (!base) {\n    console.warn(`No base data found for speciesId: ${pokemon.speciesId} -> normalized: ${id}`);\n    return {\n      hp: 0,\n      energy: 0,\n      cooldown: 0,\n      shields: 0,\n      moves: {\n        fast: {},\n        charged: []\n      }\n    };\n  }\n  const fastMoveData = MOVES[pokemon.fastMove] || {\n    energyGain: 0,\n    power: 0,\n    cooldown: 1,\n    type: \"normal\"\n  };\n  const chargedMovesData = (pokemon.chargedMoves || []).map(cid => MOVES[cid]).filter(Boolean);\n  return {\n    speciesId: base.speciesId,\n    types: base.types,\n    stats: {\n      atk: base.stats.atk,\n      def: base.stats.def,\n      hp: base.stats.hp\n    },\n    hp: base.stats.hp,\n    energy: 0,\n    cooldown: 0,\n    shields: pokemon.shields || 0,\n    level: pokemon.level || 40,\n    moves: {\n      fast: fastMoveData,\n      charged: chargedMovesData\n    }\n  };\n}\n\n// Type effectiveness chart (simplified from PvPoke)\nconst TYPE_EFFECTIVENESS = {\n  normal: {\n    rock: 0.625,\n    ghost: 0.39,\n    steel: 0.625\n  },\n  fighting: {\n    normal: 1.6,\n    rock: 1.6,\n    steel: 1.6,\n    ice: 1.6,\n    dark: 1.6,\n    flying: 0.625,\n    poison: 0.625,\n    psychic: 0.625,\n    bug: 0.625,\n    ghost: 0.39,\n    fairy: 0.625\n  }\n  // ... add all other types here\n};\n\n// Get type multiplier\nfunction typeMultiplier(moveType, defenderTypes) {\n  return defenderTypes.reduce((mult, type) => {\n    if (TYPE_EFFECTIVENESS[moveType] && TYPE_EFFECTIVENESS[moveType][type]) {\n      return mult * TYPE_EFFECTIVENESS[moveType][type];\n    }\n    return mult;\n  }, 1);\n}\n\n// Damage formula (simplified)\nfunction calculateDamage(attacker, defender, move) {\n  if (!move) return 0;\n  const atk = attacker.stats.atk;\n  const def = defender.stats.def;\n  const stab = attacker.types.includes(move.type) ? 1.2 : 1;\n  const effectiveness = typeMultiplier(move.type, defender.types);\n  return Math.max(1, Math.floor(0.5 * atk * move.power / def * stab * effectiveness) + 1);\n}\n\n// Simulate a battle\nexport function simulateBattle(p1Data, p2Data) {\n  const p1 = createBattler(p1Data);\n  const p2 = createBattler(p2Data);\n  if (!p1 || !p2) return {\n    winner: null,\n    p1Hp: 0,\n    p2Hp: 0\n  };\n  let turns = 0;\n  while (p1.hp > 0 && p2.hp > 0 && turns < 500) {\n    // Each side acts\n    takeTurn(p1, p2);\n    takeTurn(p2, p1);\n    turns++;\n  }\n  let winner = null;\n  if (p1.hp <= 0 && p2.hp <= 0) winner = \"draw\";else if (p1.hp <= 0) winner = \"p2\";else if (p2.hp <= 0) winner = \"p1\";\n  return {\n    winner,\n    p1Hp: Math.max(0, p1.hp),\n    p2Hp: Math.max(0, p2.hp)\n  };\n}\nfunction takeTurn(attacker, defender) {\n  if (attacker.cooldown > 0) {\n    attacker.cooldown--;\n    return;\n  }\n\n  // Try charged move if enough energy\n  const charged = attacker.moves.charged.find(m => attacker.energy >= m.energy);\n  if (charged) {\n    if (defender.shields > 0) {\n      defender.shields--;\n      attacker.energy -= charged.energy;\n    } else {\n      defender.hp -= calculateDamage(attacker, defender, charged);\n      attacker.energy -= charged.energy;\n    }\n    attacker.cooldown = charged.cooldown || 1;\n    return;\n  }\n\n  // Otherwise use fast move\n  const fast = attacker.moves.fast;\n  defender.hp -= calculateDamage(attacker, defender, fast);\n  attacker.energy += fast.energyGain;\n  attacker.cooldown = fast.cooldown || 1;\n}","map":{"version":3,"names":["gamemaster","MOVES","move","moves","moveId","POKEDEX","pkmn","pokemon","speciesId","normalizeId","name","String","toLowerCase","trim","replace","createBattler","console","warn","hp","energy","cooldown","shields","fast","charged","id","base","fastMoveData","fastMove","energyGain","power","type","chargedMovesData","chargedMoves","map","cid","filter","Boolean","types","stats","atk","def","level","TYPE_EFFECTIVENESS","normal","rock","ghost","steel","fighting","ice","dark","flying","poison","psychic","bug","fairy","typeMultiplier","moveType","defenderTypes","reduce","mult","calculateDamage","attacker","defender","stab","includes","effectiveness","Math","max","floor","simulateBattle","p1Data","p2Data","p1","p2","winner","p1Hp","p2Hp","turns","takeTurn","find","m"],"sources":["C:/Users/ben/Projects/nebsojipvptrainer/src/engine/battleEngine.js"],"sourcesContent":["// /src/engine/battleEngine.js\r\n// Simple PvP simulation engine\r\n\r\nimport gamemaster from \"../Data/gamemaster.json\";\r\n\r\n// Build moves map\r\nconst MOVES = {};\r\nfor (const move of gamemaster.moves) {\r\n    MOVES[move.moveId] = move;\r\n}\r\n\r\n// Build POKEDEX map\r\nconst POKEDEX = {};\r\nfor (const pkmn of gamemaster.pokemon) {\r\n    POKEDEX[pkmn.speciesId] = pkmn;\r\n}\r\n\r\n// Utility: normalize incoming speciesId to match gamemaster keys\r\nfunction normalizeId(name) {\r\n    return String(name || \"\")\r\n        .toLowerCase()\r\n        .trim()\r\n        .replace(/\\s+/g, \"_\")\r\n        .replace(/[()]/g, \"\")\r\n        .replace(/_/g, \"-\");\r\n}\r\n\r\n// Create a battle-ready Pokémon object\r\nfunction createBattler(pokemon) {\r\n    if (!pokemon || !pokemon.speciesId) {\r\n        console.warn(\"No pokemon data passed to createBattler\", pokemon);\r\n        return { hp: 0, energy: 0, cooldown: 0, shields: 0, moves: { fast: {}, charged: [] } };\r\n    }\r\n\r\n    const id = normalizeId(pokemon.speciesId);\r\n    const base = POKEDEX[id];\r\n\r\n    if (!base) {\r\n        console.warn(`No base data found for speciesId: ${pokemon.speciesId} -> normalized: ${id}`);\r\n        return { hp: 0, energy: 0, cooldown: 0, shields: 0, moves: { fast: {}, charged: [] } };\r\n    }\r\n\r\n    const fastMoveData = MOVES[pokemon.fastMove] || { energyGain: 0, power: 0, cooldown: 1, type: \"normal\" };\r\n    const chargedMovesData = (pokemon.chargedMoves || [])\r\n        .map(cid => MOVES[cid])\r\n        .filter(Boolean);\r\n\r\n    return {\r\n        speciesId: base.speciesId,\r\n        types: base.types,\r\n        stats: { atk: base.stats.atk, def: base.stats.def, hp: base.stats.hp },\r\n        hp: base.stats.hp,\r\n        energy: 0,\r\n        cooldown: 0,\r\n        shields: pokemon.shields || 0,\r\n        level: pokemon.level || 40,\r\n        moves: {\r\n            fast: fastMoveData,\r\n            charged: chargedMovesData\r\n        }\r\n    };\r\n}\r\n\r\n\r\n// Type effectiveness chart (simplified from PvPoke)\r\nconst TYPE_EFFECTIVENESS = {\r\n    normal: { rock: 0.625, ghost: 0.39, steel: 0.625 },\r\n    fighting: { normal: 1.6, rock: 1.6, steel: 1.6, ice: 1.6, dark: 1.6, flying: 0.625, poison: 0.625, psychic: 0.625, bug: 0.625, ghost: 0.39, fairy: 0.625 },\r\n    // ... add all other types here\r\n};\r\n\r\n// Get type multiplier\r\nfunction typeMultiplier(moveType, defenderTypes) {\r\n    return defenderTypes.reduce((mult, type) => {\r\n        if (TYPE_EFFECTIVENESS[moveType] && TYPE_EFFECTIVENESS[moveType][type]) {\r\n            return mult * TYPE_EFFECTIVENESS[moveType][type];\r\n        }\r\n        return mult;\r\n    }, 1);\r\n}\r\n\r\n// Damage formula (simplified)\r\nfunction calculateDamage(attacker, defender, move) {\r\n    if (!move) return 0;\r\n    const atk = attacker.stats.atk;\r\n    const def = defender.stats.def;\r\n    const stab = attacker.types.includes(move.type) ? 1.2 : 1;\r\n    const effectiveness = typeMultiplier(move.type, defender.types);\r\n    return Math.max(1, Math.floor(((0.5 * atk * move.power) / def) * stab * effectiveness) + 1);\r\n}\r\n\r\n// Simulate a battle\r\nexport function simulateBattle(p1Data, p2Data) {\r\n    const p1 = createBattler(p1Data);\r\n    const p2 = createBattler(p2Data);\r\n\r\n    if (!p1 || !p2) return { winner: null, p1Hp: 0, p2Hp: 0 };\r\n\r\n    let turns = 0;\r\n    while (p1.hp > 0 && p2.hp > 0 && turns < 500) {\r\n        // Each side acts\r\n        takeTurn(p1, p2);\r\n        takeTurn(p2, p1);\r\n        turns++;\r\n    }\r\n\r\n    let winner = null;\r\n    if (p1.hp <= 0 && p2.hp <= 0) winner = \"draw\";\r\n    else if (p1.hp <= 0) winner = \"p2\";\r\n    else if (p2.hp <= 0) winner = \"p1\";\r\n\r\n    return {\r\n        winner,\r\n        p1Hp: Math.max(0, p1.hp),\r\n        p2Hp: Math.max(0, p2.hp)\r\n    };\r\n}\r\n\r\nfunction takeTurn(attacker, defender) {\r\n    if (attacker.cooldown > 0) {\r\n        attacker.cooldown--;\r\n        return;\r\n    }\r\n\r\n    // Try charged move if enough energy\r\n    const charged = attacker.moves.charged.find(m => attacker.energy >= m.energy);\r\n    if (charged) {\r\n        if (defender.shields > 0) {\r\n            defender.shields--;\r\n            attacker.energy -= charged.energy;\r\n        } else {\r\n            defender.hp -= calculateDamage(attacker, defender, charged);\r\n            attacker.energy -= charged.energy;\r\n        }\r\n        attacker.cooldown = charged.cooldown || 1;\r\n        return;\r\n    }\r\n\r\n    // Otherwise use fast move\r\n    const fast = attacker.moves.fast;\r\n    defender.hp -= calculateDamage(attacker, defender, fast);\r\n    attacker.energy += fast.energyGain;\r\n    attacker.cooldown = fast.cooldown || 1;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}