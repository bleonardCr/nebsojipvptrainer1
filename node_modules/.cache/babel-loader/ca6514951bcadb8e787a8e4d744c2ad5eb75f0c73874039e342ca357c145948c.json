{"ast":null,"code":"// src/battleCalc.js\n\nlet SPECIES = {}; // speciesId -> { atk, def, sta, types: [...] }\nlet MOVES = {}; // MOVE_ID   -> { id, kind:\"fast\"|\"charged\", type, power, energyGain, energyCost, turns }\n\nconst num = (v, d = 0) => Number.isFinite(Number(v)) ? Number(v) : d;\nfunction canonMoveId(s) {\n  if (!s) return \"\";\n  return String(s).trim().replace(/^COMBAT_V\\d+_MOVE_/i, \"\").replace(/^V\\d+_/i, \"\").replace(/[^A-Za-z0-9]+/g, \"_\").replace(/_+/g, \"_\").replace(/^_|_$/g, \"\").toUpperCase();\n}\nfunction normId(s) {\n  return String(s || '').toLowerCase().replace(/[^\\w]+/g, '_').replace(/^_+|_+$/g, '');\n}\nfunction tcase(s) {\n  return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();\n}\nfunction normType(s) {\n  if (!s) return null;\n  const raw = String(s).replace(/^POKEMON_TYPE_/, '').replace(/_/g, ' ').trim().toLowerCase();\n  const T = tcase(raw);\n  return TYPES.includes(T) ? T : null;\n}\n\n/* League caps */\nexport const LEAGUE_CAP = {\n  \"Great League\": 1500,\n  \"Ultra League\": 2500,\n  \"Master League\": Infinity\n};\n\n/* CP multipliers (0.5 levels to 50) */\nconst CPM = [];\n(function fillCPM() {\n  const table = [0.094, 0.135137432, 0.16639787, 0.192650919, 0.21573247, 0.236572661, 0.25572005, 0.273530381, 0.29024988, 0.306057377, 0.3210876, 0.335445036, 0.34921268, 0.362457751, 0.37523559, 0.387592406, 0.39956728, 0.411193551, 0.42250001, 0.432926419, 0.44310755, 0.4530599578, 0.46279839, 0.472336083, 0.48168495, 0.4908558, 0.49985844, 0.508701765, 0.51739395, 0.525942511, 0.53435433, 0.542635767, 0.55079269, 0.558830576, 0.56675452, 0.574569153, 0.58227891, 0.589887907, 0.59740001, 0.604818814, 0.61215729, 0.619399365, 0.62656713, 0.633644533, 0.64065295, 0.647576426, 0.65443563, 0.661214806, 0.667934, 0.674577537, 0.68116492, 0.687680648, 0.69414365, 0.700538673, 0.70688421, 0.713164996, 0.71939909, 0.725571552, 0.7317, 0.734741009, 0.73776948, 0.740785574, 0.74378943, 0.746781211, 0.74976104, 0.752729087, 0.75568551, 0.758630378, 0.76156384, 0.764486065, 0.76739717, 0.770297266, 0.7731865, 0.776064962, 0.77893275, 0.781790055, 0.78463697, 0.787473578, 0.79030001, 0.792803968, 0.79530001, 0.797803921, 0.8003];\n  CPM.length = 100;\n  CPM.fill(0);\n  for (let i = 0; i < table.length; i++) CPM[i + 1] = table[i];\n})();\nconst STAB = 1.2;\n\n/* Type chart */\nconst TYPES = [\"Normal\", \"Fighting\", \"Flying\", \"Poison\", \"Ground\", \"Rock\", \"Bug\", \"Ghost\", \"Steel\", \"Fire\", \"Water\", \"Grass\", \"Electric\", \"Psychic\", \"Ice\", \"Dragon\", \"Dark\", \"Fairy\"];\nconst EFF = {};\nTYPES.forEach(att => {\n  EFF[att] = {};\n  TYPES.forEach(def => EFF[att][def] = 1.0);\n});\nfunction S(atk, arr, m) {\n  arr.forEach(d => EFF[atk][d] = m);\n}\n_c = S;\nS(\"Fighting\", [\"Normal\", \"Rock\", \"Ice\", \"Dark\", \"Steel\"], 1.6);\nS(\"Fighting\", [\"Flying\", \"Poison\", \"Bug\", \"Psychic\", \"Fairy\"], 0.625);\nS(\"Flying\", [\"Fighting\", \"Bug\", \"Grass\"], 1.6);\nS(\"Flying\", [\"Rock\", \"Steel\", \"Electric\"], 0.625);\nS(\"Poison\", [\"Grass\", \"Fairy\"], 1.6);\nS(\"Poison\", [\"Poison\", \"Ground\", \"Rock\", \"Ghost\"], 0.625);\nS(\"Poison\", [\"Steel\"], 0.390625);\nS(\"Ground\", [\"Poison\", \"Rock\", \"Steel\", \"Fire\", \"Electric\"], 1.6);\nS(\"Ground\", [\"Bug\", \"Grass\"], 0.625);\nS(\"Ground\", [\"Flying\"], 0.390625);\nS(\"Rock\", [\"Flying\", \"Bug\", \"Fire\", \"Ice\"], 1.6);\nS(\"Rock\", [\"Fighting\", \"Ground\", \"Steel\"], 0.625);\nS(\"Bug\", [\"Grass\", \"Psychic\", \"Dark\"], 1.6);\nS(\"Bug\", [\"Fighting\", \"Flying\", \"Poison\", \"Ghost\", \"Steel\", \"Fire\", \"Fairy\"], 0.625);\nS(\"Ghost\", [\"Ghost\", \"Psychic\"], 1.6);\nS(\"Ghost\", [\"Dark\"], 0.625);\nS(\"Steel\", [\"Rock\", \"Ice\", \"Fairy\"], 1.6);\nS(\"Steel\", [\"Steel\", \"Fire\", \"Water\", \"Electric\"], 0.625);\nS(\"Fire\", [\"Bug\", \"Steel\", \"Grass\", \"Ice\"], 1.6);\nS(\"Fire\", [\"Rock\", \"Fire\", \"Water\", \"Dragon\"], 0.625);\nS(\"Water\", [\"Ground\", \"Rock\", \"Fire\"], 1.6);\nS(\"Water\", [\"Water\", \"Grass\", \"Dragon\"], 0.625);\nS(\"Grass\", [\"Ground\", \"Rock\", \"Water\"], 1.6);\nS(\"Grass\", [\"Flying\", \"Poison\", \"Bug\", \"Steel\", \"Fire\", \"Grass\", \"Dragon\"], 0.625);\nS(\"Electric\", [\"Flying\", \"Water\"], 1.6);\nS(\"Electric\", [\"Grass\", \"Electric\", \"Dragon\"], 0.625);\nS(\"Electric\", [\"Ground\"], 0.390625);\nS(\"Psychic\", [\"Fighting\", \"Poison\"], 1.6);\nS(\"Psychic\", [\"Psychic\", \"Steel\"], 0.625);\nS(\"Psychic\", [\"Dark\"], 0.390625);\nS(\"Ice\", [\"Flying\", \"Ground\", \"Grass\", \"Dragon\"], 1.6);\nS(\"Ice\", [\"Steel\", \"Fire\", \"Water\", \"Ice\"], 0.625);\nS(\"Dragon\", [\"Dragon\"], 1.6);\nS(\"Dragon\", [\"Steel\"], 0.625);\nS(\"Dragon\", [\"Fairy\"], 0.390625);\nS(\"Dark\", [\"Ghost\", \"Psychic\"], 1.6);\nS(\"Dark\", [\"Fighting\", \"Dark\", \"Fairy\"], 0.625);\nS(\"Fairy\", [\"Fighting\", \"Dragon\", \"Dark\"], 1.6);\nS(\"Fairy\", [\"Poison\", \"Steel\", \"Fire\"], 0.625);\nfunction eff(moveType, defendTypes) {\n  let m = 1;\n  for (const t of defendTypes) {\n    var _EFF$moveType$t, _EFF$moveType;\n    m *= (_EFF$moveType$t = (_EFF$moveType = EFF[moveType]) === null || _EFF$moveType === void 0 ? void 0 : _EFF$moveType[t]) !== null && _EFF$moveType$t !== void 0 ? _EFF$moveType$t : 1;\n  }\n  return m;\n}\nfunction damage(pwr, atk, def, stab, effm) {\n  const val = 0.5 * num(pwr, 0) * (num(atk, 1) / Math.max(1, num(def, 1))) * num(stab, 1) * num(effm, 1);\n  const out = Math.max(1, Math.floor(val) + 1);\n  return Number.isFinite(out) ? out : 1;\n}\n\n/* Species book — robust mapping */\nfunction buildSpeciesBook(gm) {\n  var _gm$data;\n  const lists = [gm === null || gm === void 0 ? void 0 : gm.pokemon, gm === null || gm === void 0 ? void 0 : (_gm$data = gm.data) === null || _gm$data === void 0 ? void 0 : _gm$data.pokemon, gm === null || gm === void 0 ? void 0 : gm.species, gm === null || gm === void 0 ? void 0 : gm.pokemonList, gm === null || gm === void 0 ? void 0 : gm.pokemonSettings].filter(Boolean);\n  const out = {};\n  for (const list of lists) {\n    for (const p of list) {\n      var _ref, _ref2, _p$baseAttack, _ref3, _ref4, _p$baseDefense, _ref5, _ref6, _p$baseStamina;\n      const id = normId(p.speciesId || p.pokemonId || p.templateId || p.id || p.name);\n      if (!id) continue;\n\n      // stats may appear as baseStats, stats, or flat fields\n      const bs = p.baseStats || p.stats || {};\n      const atk = num((_ref = (_ref2 = (_p$baseAttack = p.baseAttack) !== null && _p$baseAttack !== void 0 ? _p$baseAttack : bs.atk) !== null && _ref2 !== void 0 ? _ref2 : bs.attack) !== null && _ref !== void 0 ? _ref : p.attack, 200);\n      const def = num((_ref3 = (_ref4 = (_p$baseDefense = p.baseDefense) !== null && _p$baseDefense !== void 0 ? _p$baseDefense : bs.def) !== null && _ref4 !== void 0 ? _ref4 : bs.defense) !== null && _ref3 !== void 0 ? _ref3 : p.defense, 200);\n      const sta = num((_ref5 = (_ref6 = (_p$baseStamina = p.baseStamina) !== null && _p$baseStamina !== void 0 ? _p$baseStamina : bs.sta) !== null && _ref6 !== void 0 ? _ref6 : bs.stamina) !== null && _ref5 !== void 0 ? _ref5 : p.stamina, 200);\n      const typesArr = p.types || [p.type1, p.type2].filter(Boolean);\n      const types = (typesArr || []).map(normType).filter(Boolean);\n      out[id] = {\n        atk,\n        def,\n        sta,\n        types: types.length ? types : [\"Normal\"]\n      };\n    }\n  }\n  return out;\n}\n\n/* Moves book — robust mapping + safe defaults */\nexport function buildMoveBook(gm) {\n  var _gm$data2, _gm$data3;\n  SPECIES = buildSpeciesBook(gm);\n  const pools = [gm === null || gm === void 0 ? void 0 : gm.moves, gm === null || gm === void 0 ? void 0 : gm.combatMoves, gm === null || gm === void 0 ? void 0 : (_gm$data2 = gm.data) === null || _gm$data2 === void 0 ? void 0 : _gm$data2.moves, gm === null || gm === void 0 ? void 0 : (_gm$data3 = gm.data) === null || _gm$data3 === void 0 ? void 0 : _gm$data3.combatMoves, gm === null || gm === void 0 ? void 0 : gm.moveList].filter(Boolean);\n  const out = {};\n  for (const list of pools) {\n    for (const m of list) {\n      var _ref7, _ref8, _ref9, _ref0, _m$moveId, _ref1, _ref10, _m$pvpPower, _ref11, _m$durationTurns;\n      const rawId = (_ref7 = (_ref8 = (_ref9 = (_ref0 = (_m$moveId = m.moveId) !== null && _m$moveId !== void 0 ? _m$moveId : m.id) !== null && _ref0 !== void 0 ? _ref0 : m.uniqueId) !== null && _ref9 !== void 0 ? _ref9 : m.templateId) !== null && _ref8 !== void 0 ? _ref8 : m.name) !== null && _ref7 !== void 0 ? _ref7 : \"\";\n      const id = canonMoveId(rawId);\n      if (!id) continue;\n      const type = normType(m.type || m.pokemonType || m.moveType) || \"Normal\";\n      const power = num((_ref1 = (_ref10 = (_m$pvpPower = m.pvpPower) !== null && _m$pvpPower !== void 0 ? _m$pvpPower : m.power) !== null && _ref10 !== void 0 ? _ref10 : m.combatPower) !== null && _ref1 !== void 0 ? _ref1 : m.damage, 0);\n      let kind = \"fast\";\n      let energyGain = 0;\n      let energyCost = 0;\n      let turns = 0;\n      if (m.energyDelta != null) {\n        const ed = num(m.energyDelta, 0);\n        if (ed > 0) {\n          kind = \"fast\";\n          energyGain = ed;\n        }\n        if (ed < 0) {\n          kind = \"charged\";\n          energyCost = Math.abs(ed);\n        }\n      }\n      if (m.energyGain != null) {\n        kind = \"fast\";\n        energyGain = num(m.energyGain, 0);\n      }\n      if (m.energy != null) {\n        kind = \"charged\";\n        energyCost = Math.abs(num(m.energy, 0));\n      }\n      turns = num((_ref11 = (_m$durationTurns = m.durationTurns) !== null && _m$durationTurns !== void 0 ? _m$durationTurns : m.turns) !== null && _ref11 !== void 0 ? _ref11 : m.cooldownTurns, kind === \"fast\" ? 1 : 0);\n      if (kind === \"fast\") turns = Math.max(1, Math.floor(turns) || 1);\n      if (kind === \"fast\" && energyGain <= 0) {\n        console.warn(`[PvP] fast move ${id} missing energyGain; using 8.`);\n        energyGain = 8;\n      }\n      if (kind === \"charged\" && energyCost <= 0) {\n        console.warn(`[PvP] charged move ${id} missing energy cost; using 45.`);\n        energyCost = 45;\n      }\n      const move = {\n        id,\n        kind,\n        type,\n        power,\n        energyGain,\n        energyCost,\n        turns\n      };\n      if (!out[id] || power > out[id].power) out[id] = move;\n    }\n  }\n\n  // guaranteed fallback fast move (used if a league entry has no fast)\n  out.TACKLE = out.TACKLE || {\n    id: \"TACKLE\",\n    kind: \"fast\",\n    type: \"Normal\",\n    power: 3,\n    energyGain: 8,\n    energyCost: 0,\n    turns: 1\n  };\n  MOVES = out;\n  return out;\n}\n\n/* Leveling & stats for league */\nfunction cp(atk, def, sta, cpm) {\n  return Math.floor(atk * Math.sqrt(def) * Math.sqrt(sta) * cpm * cpm / 10);\n}\nfunction levelForCap(baseAtk, baseDef, baseSta, cap) {\n  if (!isFinite(cap)) return 99;\n  for (let i = 99; i >= 1; i--) {\n    const cpm = CPM[i],\n      cAtk = baseAtk * cpm,\n      cDef = baseDef * cpm,\n      cSta = baseSta * cpm;\n    if (cp(cAtk, cDef, cSta, 1) <= cap) return i;\n  }\n  return 99;\n}\nfunction capFromLeague(leagueName) {\n  var _LEAGUE_CAP$leagueNam;\n  return typeof leagueName === \"string\" ? (_LEAGUE_CAP$leagueNam = LEAGUE_CAP[leagueName]) !== null && _LEAGUE_CAP$leagueNam !== void 0 ? _LEAGUE_CAP$leagueNam : Infinity : Number.isFinite(leagueName) ? Number(leagueName) : Infinity;\n}\nfunction enrichSideForLeague(src, leagueName = \"Master League\") {\n  const cap = capFromLeague(leagueName);\n  const sid = normId(src.speciesId || src.name);\n  const base = SPECIES[sid] || {\n    atk: 200,\n    def: 200,\n    sta: 200,\n    types: [\"Normal\"]\n  };\n  const li = levelForCap(base.atk, base.def, base.sta, cap);\n  const cpm = CPM[li] || CPM[99];\n  const Atk = base.atk * cpm;\n  const Def = base.def * cpm;\n  const Sta = Math.max(1, Math.floor(base.sta * cpm) * 2); // never 0 → avoids NaN\n\n  const fastId = canonMoveId(src.fastMove);\n  const fast = MOVES[fastId] || MOVES.TACKLE; // ensure fast exists\n\n  const chargedMoves = (src.chargedMoves || []).map(canonMoveId).map(id => MOVES[id]).filter(Boolean);\n  return {\n    name: src.name || src.speciesId,\n    speciesId: sid,\n    types: base.types,\n    Atk,\n    Def,\n    MaxHP: Sta,\n    HP: Sta,\n    fast,\n    chargedMoves,\n    energy: 0\n  };\n}\nfunction bestCharged(att, def) {\n  let best = null,\n    bestScore = -Infinity;\n  for (const m of att.chargedMoves || []) {\n    if (!m || m.kind !== \"charged\") continue;\n    const stab = att.types.includes(m.type) ? STAB : 1;\n    const effm = eff(m.type, def.types);\n    const dmg = damage(m.power, att.Atk, def.Def, stab, effm);\n    const dpe = (m.power || 0) / (m.energyCost || 45);\n    const score = dmg * 1.0 + dpe * 2.5;\n    if (score > bestScore) {\n      bestScore = score;\n      best = m;\n    }\n  }\n  return best;\n}\n\n/* Public: simulate a duel and return UI-friendly stats */\nexport function simulateDuel(attackerIn, defenderIn, shieldsA = 2, shieldsB = 2, _book = MOVES, leagueName = \"Master League\") {\n  var _ref12, _ref13;\n  const A = enrichSideForLeague(attackerIn, leagueName);\n  const B = enrichSideForLeague(defenderIn, leagueName);\n  const recA = bestCharged(A, B);\n  const recB = bestCharged(B, A);\n  let aSh = Math.max(0, shieldsA | 0),\n    bSh = Math.max(0, shieldsB | 0);\n  let t = 0;\n  const MAX_TURNS = 2000;\n  const log = [];\n  const canThrow = u => (u.chargedMoves || []).some(m => u.energy >= (m.energyCost || 45));\n  const chooseThrow = (u, foe) => {\n    let pick = null,\n      best = -Infinity;\n    for (const m of u.chargedMoves || []) {\n      if (u.energy < (m.energyCost || 45)) continue;\n      const stab = u.types.includes(m.type) ? STAB : 1;\n      const mult = eff(m.type, foe.types);\n      const dmg = damage(m.power, u.Atk, foe.Def, stab, mult);\n      if (dmg > best) {\n        best = dmg;\n        pick = m;\n      }\n    }\n    return pick;\n  };\n  while (A.HP > 0 && B.HP > 0 && t < MAX_TURNS) {\n    t++;\n    if (A.fast && t % (A.fast.turns || 1) === 0) A.energy += num(A.fast.energyGain, 0);\n    if (B.fast && t % (B.fast.turns || 1) === 0) B.energy += num(B.fast.energyGain, 0);\n    const aMove = canThrow(A) ? chooseThrow(A, B) : null;\n    const bMove = canThrow(B) ? chooseThrow(B, A) : null;\n    const aFirst = aMove && bMove ? A.Atk >= B.Atk : !!aMove;\n    function resolveThrow(user, foe, move, who) {\n      if (!move) return;\n      const stab = user.types.includes(move.type) ? STAB : 1;\n      const mult = eff(move.type, foe.types);\n      const hit = damage(move.power, user.Atk, foe.Def, stab, mult);\n      let shielded = false;\n      if (who === \"A\" && bSh > 0) {\n        if (hit >= foe.HP || hit >= foe.MaxHP * 0.35) {\n          bSh--;\n          shielded = true;\n        }\n      } else if (who === \"B\" && aSh > 0) {\n        if (hit >= foe.HP || hit >= foe.MaxHP * 0.35) {\n          aSh--;\n          shielded = true;\n        }\n      }\n      if (!shielded) {\n        foe.HP = Math.max(0, foe.HP - hit);\n      }\n      user.energy -= move.energyCost || 45;\n      log.push(`${who} throws ${move.id}${shielded ? ' (shielded)' : ''}`);\n    }\n    if (aFirst) {\n      if (aMove) resolveThrow(A, B, aMove, \"A\");else if (A.fast && t % (A.fast.turns || 1) === 0) {\n        const hit = damage(A.fast.power || 1, A.Atk, B.Def, A.types.includes(A.fast.type) ? STAB : 1, eff(A.fast.type, B.types));\n        B.HP = Math.max(0, B.HP - hit);\n      }\n      if (B.HP <= 0) break;\n      if (bMove) resolveThrow(B, A, bMove, \"B\");else if (B.fast && t % (B.fast.turns || 1) === 0) {\n        const hit = damage(B.fast.power || 1, B.Atk, A.Def, B.types.includes(B.fast.type) ? STAB : 1, eff(B.fast.type, A.types));\n        A.HP = Math.max(0, A.HP - hit);\n      }\n      if (A.HP <= 0) break;\n    } else {\n      if (bMove) resolveThrow(B, A, bMove, \"B\");else if (B.fast && t % (B.fast.turns || 1) === 0) {\n        const hit = damage(B.fast.power || 1, B.Atk, A.Def, B.types.includes(B.fast.type) ? STAB : 1, eff(B.fast.type, A.types));\n        A.HP = Math.max(0, A.HP - hit);\n      }\n      if (A.HP <= 0) break;\n      if (aMove) resolveThrow(A, B, aMove, \"A\");else if (A.fast && t % (A.fast.turns || 1) === 0) {\n        const hit = damage(A.fast.power || 1, A.Atk, B.Def, A.types.includes(A.fast.type) ? STAB : 1, eff(A.fast.type, B.types));\n        B.HP = Math.max(0, B.HP - hit);\n      }\n      if (B.HP <= 0) break;\n    }\n  }\n  const winner = A.HP <= 0 && B.HP <= 0 ? \"Draw\" : A.HP <= 0 ? B.name : B.HP <= 0 ? A.name : A.HP === B.HP ? \"Draw\" : A.HP > B.HP ? A.name : B.name;\n  return {\n    winner,\n    aHP: Math.round(A.HP / A.MaxHP * 100),\n    bHP: Math.round(B.HP / B.MaxHP * 100),\n    aRecommended: ((_ref12 = bestCharged(A, B) || recA) === null || _ref12 === void 0 ? void 0 : _ref12.id) || null,\n    bRecommended: ((_ref13 = bestCharged(B, A) || recB) === null || _ref13 === void 0 ? void 0 : _ref13.id) || null,\n    summary: log.slice(0, 12)\n  };\n}\n\n/* Rank your 3 vs one enemy */\nexport function bestOfThree(mine, enemy, myShields, foeShields, _book = MOVES, leagueName = \"Master League\") {\n  const fights = mine.map(m => {\n    const you = {\n      ...m,\n      name: m.name || m.speciesId\n    };\n    const foe = {\n      ...enemy,\n      name: enemy.name || enemy.speciesId\n    };\n    const r = simulateDuel(you, foe, myShields, foeShields, MOVES, leagueName);\n    const score = r.winner === you.name ? 1 : r.winner === \"Draw\" ? 0 : -1;\n    return {\n      you: you.name,\n      vs: foe.name,\n      ...r,\n      score\n    };\n  });\n  fights.sort((a, b) => b.score - a.score || b.aHP - a.aHP || b.bHP - a.bHP);\n  return {\n    best: fights[0],\n    fights\n  };\n}\nvar _c;\n$RefreshReg$(_c, \"S\");","map":{"version":3,"names":["SPECIES","MOVES","num","v","d","Number","isFinite","canonMoveId","s","String","trim","replace","toUpperCase","normId","toLowerCase","tcase","charAt","slice","normType","raw","T","TYPES","includes","LEAGUE_CAP","Infinity","CPM","fillCPM","table","length","fill","i","STAB","EFF","forEach","att","def","S","atk","arr","m","_c","eff","moveType","defendTypes","t","_EFF$moveType$t","_EFF$moveType","damage","pwr","stab","effm","val","Math","max","out","floor","buildSpeciesBook","gm","_gm$data","lists","pokemon","data","species","pokemonList","pokemonSettings","filter","Boolean","list","p","_ref","_ref2","_p$baseAttack","_ref3","_ref4","_p$baseDefense","_ref5","_ref6","_p$baseStamina","id","speciesId","pokemonId","templateId","name","bs","baseStats","stats","baseAttack","attack","baseDefense","defense","sta","baseStamina","stamina","typesArr","types","type1","type2","map","buildMoveBook","_gm$data2","_gm$data3","pools","moves","combatMoves","moveList","_ref7","_ref8","_ref9","_ref0","_m$moveId","_ref1","_ref10","_m$pvpPower","_ref11","_m$durationTurns","rawId","moveId","uniqueId","type","pokemonType","power","pvpPower","combatPower","kind","energyGain","energyCost","turns","energyDelta","ed","abs","energy","durationTurns","cooldownTurns","console","warn","move","TACKLE","cp","cpm","sqrt","levelForCap","baseAtk","baseDef","baseSta","cap","cAtk","cDef","cSta","capFromLeague","leagueName","_LEAGUE_CAP$leagueNam","enrichSideForLeague","src","sid","base","li","Atk","Def","Sta","fastId","fastMove","fast","chargedMoves","MaxHP","HP","bestCharged","best","bestScore","dmg","dpe","score","simulateDuel","attackerIn","defenderIn","shieldsA","shieldsB","_book","_ref12","_ref13","A","B","recA","recB","aSh","bSh","MAX_TURNS","log","canThrow","u","some","chooseThrow","foe","pick","mult","aMove","bMove","aFirst","resolveThrow","user","who","hit","shielded","push","winner","aHP","round","bHP","aRecommended","bRecommended","summary","bestOfThree","mine","enemy","myShields","foeShields","fights","you","r","vs","sort","a","b","$RefreshReg$"],"sources":["C:/Users/ben/Projects/nebsojipvptrainer/src/battleCalc.js"],"sourcesContent":["// src/battleCalc.js\r\n\r\nlet SPECIES = {};  // speciesId -> { atk, def, sta, types: [...] }\r\nlet MOVES = {};  // MOVE_ID   -> { id, kind:\"fast\"|\"charged\", type, power, energyGain, energyCost, turns }\r\n\r\nconst num = (v, d = 0) => (Number.isFinite(Number(v)) ? Number(v) : d);\r\n\r\nfunction canonMoveId(s) {\r\n    if (!s) return \"\";\r\n    return String(s)\r\n        .trim()\r\n        .replace(/^COMBAT_V\\d+_MOVE_/i, \"\")\r\n        .replace(/^V\\d+_/i, \"\")\r\n        .replace(/[^A-Za-z0-9]+/g, \"_\")\r\n        .replace(/_+/g, \"_\")\r\n        .replace(/^_|_$/g, \"\")\r\n        .toUpperCase();\r\n}\r\nfunction normId(s) { return String(s || '').toLowerCase().replace(/[^\\w]+/g, '_').replace(/^_+|_+$/g, ''); }\r\nfunction tcase(s) { return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase(); }\r\nfunction normType(s) {\r\n    if (!s) return null;\r\n    const raw = String(s).replace(/^POKEMON_TYPE_/, '').replace(/_/g, ' ').trim().toLowerCase();\r\n    const T = tcase(raw);\r\n    return TYPES.includes(T) ? T : null;\r\n}\r\n\r\n/* League caps */\r\nexport const LEAGUE_CAP = {\r\n    \"Great League\": 1500,\r\n    \"Ultra League\": 2500,\r\n    \"Master League\": Infinity\r\n};\r\n\r\n/* CP multipliers (0.5 levels to 50) */\r\nconst CPM = [];\r\n(function fillCPM() {\r\n    const table = [\r\n        0.094, 0.135137432, 0.16639787, 0.192650919, 0.21573247, 0.236572661, 0.25572005, 0.273530381,\r\n        0.29024988, 0.306057377, 0.3210876, 0.335445036, 0.34921268, 0.362457751, 0.37523559, 0.387592406,\r\n        0.39956728, 0.411193551, 0.42250001, 0.432926419, 0.44310755, 0.4530599578, 0.46279839, 0.472336083,\r\n        0.48168495, 0.4908558, 0.49985844, 0.508701765, 0.51739395, 0.525942511, 0.53435433, 0.542635767,\r\n        0.55079269, 0.558830576, 0.56675452, 0.574569153, 0.58227891, 0.589887907, 0.59740001, 0.604818814,\r\n        0.61215729, 0.619399365, 0.62656713, 0.633644533, 0.64065295, 0.647576426, 0.65443563, 0.661214806,\r\n        0.667934, 0.674577537, 0.68116492, 0.687680648, 0.69414365, 0.700538673, 0.70688421, 0.713164996,\r\n        0.71939909, 0.725571552, 0.7317, 0.734741009, 0.73776948, 0.740785574, 0.74378943, 0.746781211,\r\n        0.74976104, 0.752729087, 0.75568551, 0.758630378, 0.76156384, 0.764486065, 0.76739717, 0.770297266,\r\n        0.7731865, 0.776064962, 0.77893275, 0.781790055, 0.78463697, 0.787473578, 0.79030001, 0.792803968,\r\n        0.79530001, 0.797803921, 0.8003\r\n    ];\r\n    CPM.length = 100; CPM.fill(0);\r\n    for (let i = 0; i < table.length; i++) CPM[i + 1] = table[i];\r\n})();\r\n\r\nconst STAB = 1.2;\r\n\r\n/* Type chart */\r\nconst TYPES = [\r\n    \"Normal\", \"Fighting\", \"Flying\", \"Poison\", \"Ground\", \"Rock\", \"Bug\", \"Ghost\", \"Steel\",\r\n    \"Fire\", \"Water\", \"Grass\", \"Electric\", \"Psychic\", \"Ice\", \"Dragon\", \"Dark\", \"Fairy\"\r\n];\r\nconst EFF = {};\r\nTYPES.forEach(att => { EFF[att] = {}; TYPES.forEach(def => EFF[att][def] = 1.0); });\r\nfunction S(atk, arr, m) { arr.forEach(d => EFF[atk][d] = m); }\r\nS(\"Fighting\", [\"Normal\", \"Rock\", \"Ice\", \"Dark\", \"Steel\"], 1.6); S(\"Fighting\", [\"Flying\", \"Poison\", \"Bug\", \"Psychic\", \"Fairy\"], 0.625);\r\nS(\"Flying\", [\"Fighting\", \"Bug\", \"Grass\"], 1.6); S(\"Flying\", [\"Rock\", \"Steel\", \"Electric\"], 0.625);\r\nS(\"Poison\", [\"Grass\", \"Fairy\"], 1.6); S(\"Poison\", [\"Poison\", \"Ground\", \"Rock\", \"Ghost\"], 0.625); S(\"Poison\", [\"Steel\"], 0.390625);\r\nS(\"Ground\", [\"Poison\", \"Rock\", \"Steel\", \"Fire\", \"Electric\"], 1.6); S(\"Ground\", [\"Bug\", \"Grass\"], 0.625); S(\"Ground\", [\"Flying\"], 0.390625);\r\nS(\"Rock\", [\"Flying\", \"Bug\", \"Fire\", \"Ice\"], 1.6); S(\"Rock\", [\"Fighting\", \"Ground\", \"Steel\"], 0.625);\r\nS(\"Bug\", [\"Grass\", \"Psychic\", \"Dark\"], 1.6); S(\"Bug\", [\"Fighting\", \"Flying\", \"Poison\", \"Ghost\", \"Steel\", \"Fire\", \"Fairy\"], 0.625);\r\nS(\"Ghost\", [\"Ghost\", \"Psychic\"], 1.6); S(\"Ghost\", [\"Dark\"], 0.625);\r\nS(\"Steel\", [\"Rock\", \"Ice\", \"Fairy\"], 1.6); S(\"Steel\", [\"Steel\", \"Fire\", \"Water\", \"Electric\"], 0.625);\r\nS(\"Fire\", [\"Bug\", \"Steel\", \"Grass\", \"Ice\"], 1.6); S(\"Fire\", [\"Rock\", \"Fire\", \"Water\", \"Dragon\"], 0.625);\r\nS(\"Water\", [\"Ground\", \"Rock\", \"Fire\"], 1.6); S(\"Water\", [\"Water\", \"Grass\", \"Dragon\"], 0.625);\r\nS(\"Grass\", [\"Ground\", \"Rock\", \"Water\"], 1.6); S(\"Grass\", [\"Flying\", \"Poison\", \"Bug\", \"Steel\", \"Fire\", \"Grass\", \"Dragon\"], 0.625);\r\nS(\"Electric\", [\"Flying\", \"Water\"], 1.6); S(\"Electric\", [\"Grass\", \"Electric\", \"Dragon\"], 0.625); S(\"Electric\", [\"Ground\"], 0.390625);\r\nS(\"Psychic\", [\"Fighting\", \"Poison\"], 1.6); S(\"Psychic\", [\"Psychic\", \"Steel\"], 0.625); S(\"Psychic\", [\"Dark\"], 0.390625);\r\nS(\"Ice\", [\"Flying\", \"Ground\", \"Grass\", \"Dragon\"], 1.6); S(\"Ice\", [\"Steel\", \"Fire\", \"Water\", \"Ice\"], 0.625);\r\nS(\"Dragon\", [\"Dragon\"], 1.6); S(\"Dragon\", [\"Steel\"], 0.625); S(\"Dragon\", [\"Fairy\"], 0.390625);\r\nS(\"Dark\", [\"Ghost\", \"Psychic\"], 1.6); S(\"Dark\", [\"Fighting\", \"Dark\", \"Fairy\"], 0.625);\r\nS(\"Fairy\", [\"Fighting\", \"Dragon\", \"Dark\"], 1.6); S(\"Fairy\", [\"Poison\", \"Steel\", \"Fire\"], 0.625);\r\n\r\nfunction eff(moveType, defendTypes) {\r\n    let m = 1; for (const t of defendTypes) { m *= (EFF[moveType]?.[t] ?? 1); } return m;\r\n}\r\nfunction damage(pwr, atk, def, stab, effm) {\r\n    const val = 0.5 * num(pwr, 0) * (num(atk, 1) / Math.max(1, num(def, 1))) * num(stab, 1) * num(effm, 1);\r\n    const out = Math.max(1, Math.floor(val) + 1);\r\n    return Number.isFinite(out) ? out : 1;\r\n}\r\n\r\n/* Species book — robust mapping */\r\nfunction buildSpeciesBook(gm) {\r\n    const lists = [\r\n        gm?.pokemon, gm?.data?.pokemon, gm?.species, gm?.pokemonList, gm?.pokemonSettings\r\n    ].filter(Boolean);\r\n\r\n    const out = {};\r\n    for (const list of lists) {\r\n        for (const p of list) {\r\n            const id = normId(p.speciesId || p.pokemonId || p.templateId || p.id || p.name);\r\n            if (!id) continue;\r\n\r\n            // stats may appear as baseStats, stats, or flat fields\r\n            const bs = p.baseStats || p.stats || {};\r\n            const atk = num(p.baseAttack ?? bs.atk ?? bs.attack ?? p.attack, 200);\r\n            const def = num(p.baseDefense ?? bs.def ?? bs.defense ?? p.defense, 200);\r\n            const sta = num(p.baseStamina ?? bs.sta ?? bs.stamina ?? p.stamina, 200);\r\n\r\n            const typesArr = p.types || [p.type1, p.type2].filter(Boolean);\r\n            const types = (typesArr || [])\r\n                .map(normType)\r\n                .filter(Boolean);\r\n            out[id] = { atk, def, sta, types: types.length ? types : [\"Normal\"] };\r\n        }\r\n    }\r\n    return out;\r\n}\r\n\r\n/* Moves book — robust mapping + safe defaults */\r\nexport function buildMoveBook(gm) {\r\n    SPECIES = buildSpeciesBook(gm);\r\n\r\n    const pools = [gm?.moves, gm?.combatMoves, gm?.data?.moves, gm?.data?.combatMoves, gm?.moveList]\r\n        .filter(Boolean);\r\n\r\n    const out = {};\r\n\r\n    for (const list of pools) {\r\n        for (const m of list) {\r\n            const rawId = m.moveId ?? m.id ?? m.uniqueId ?? m.templateId ?? m.name ?? \"\";\r\n            const id = canonMoveId(rawId);\r\n            if (!id) continue;\r\n\r\n            const type = normType(m.type || m.pokemonType || m.moveType) || \"Normal\";\r\n            const power = num(m.pvpPower ?? m.power ?? m.combatPower ?? m.damage, 0);\r\n\r\n            let kind = \"fast\";\r\n            let energyGain = 0;\r\n            let energyCost = 0;\r\n            let turns = 0;\r\n\r\n            if (m.energyDelta != null) {\r\n                const ed = num(m.energyDelta, 0);\r\n                if (ed > 0) { kind = \"fast\"; energyGain = ed; }\r\n                if (ed < 0) { kind = \"charged\"; energyCost = Math.abs(ed); }\r\n            }\r\n            if (m.energyGain != null) { kind = \"fast\"; energyGain = num(m.energyGain, 0); }\r\n            if (m.energy != null) { kind = \"charged\"; energyCost = Math.abs(num(m.energy, 0)); }\r\n\r\n            turns = num(m.durationTurns ?? m.turns ?? m.cooldownTurns, kind === \"fast\" ? 1 : 0);\r\n            if (kind === \"fast\") turns = Math.max(1, Math.floor(turns) || 1);\r\n\r\n            if (kind === \"fast\" && energyGain <= 0) { console.warn(`[PvP] fast move ${id} missing energyGain; using 8.`); energyGain = 8; }\r\n            if (kind === \"charged\" && energyCost <= 0) { console.warn(`[PvP] charged move ${id} missing energy cost; using 45.`); energyCost = 45; }\r\n\r\n            const move = { id, kind, type, power, energyGain, energyCost, turns };\r\n            if (!out[id] || power > out[id].power) out[id] = move;\r\n        }\r\n    }\r\n\r\n    // guaranteed fallback fast move (used if a league entry has no fast)\r\n    out.TACKLE = out.TACKLE || { id: \"TACKLE\", kind: \"fast\", type: \"Normal\", power: 3, energyGain: 8, energyCost: 0, turns: 1 };\r\n\r\n    MOVES = out;\r\n    return out;\r\n}\r\n\r\n/* Leveling & stats for league */\r\nfunction cp(atk, def, sta, cpm) { return Math.floor((atk * Math.sqrt(def) * Math.sqrt(sta) * cpm * cpm) / 10); }\r\nfunction levelForCap(baseAtk, baseDef, baseSta, cap) {\r\n    if (!isFinite(cap)) return 99;\r\n    for (let i = 99; i >= 1; i--) {\r\n        const cpm = CPM[i], cAtk = baseAtk * cpm, cDef = baseDef * cpm, cSta = baseSta * cpm;\r\n        if (cp(cAtk, cDef, cSta, 1) <= cap) return i;\r\n    }\r\n    return 99;\r\n}\r\nfunction capFromLeague(leagueName) {\r\n    return typeof leagueName === \"string\" ? (LEAGUE_CAP[leagueName] ?? Infinity)\r\n        : (Number.isFinite(leagueName) ? Number(leagueName) : Infinity);\r\n}\r\n\r\nfunction enrichSideForLeague(src, leagueName = \"Master League\") {\r\n    const cap = capFromLeague(leagueName);\r\n\r\n    const sid = normId(src.speciesId || src.name);\r\n    const base = SPECIES[sid] || { atk: 200, def: 200, sta: 200, types: [\"Normal\"] };\r\n\r\n    const li = levelForCap(base.atk, base.def, base.sta, cap);\r\n    const cpm = CPM[li] || CPM[99];\r\n\r\n    const Atk = base.atk * cpm;\r\n    const Def = base.def * cpm;\r\n    const Sta = Math.max(1, Math.floor(base.sta * cpm) * 2);  // never 0 → avoids NaN\r\n\r\n    const fastId = canonMoveId(src.fastMove);\r\n    const fast = MOVES[fastId] || MOVES.TACKLE; // ensure fast exists\r\n\r\n    const chargedMoves = (src.chargedMoves || [])\r\n        .map(canonMoveId)\r\n        .map(id => MOVES[id])\r\n        .filter(Boolean);\r\n\r\n    return {\r\n        name: src.name || src.speciesId,\r\n        speciesId: sid,\r\n        types: base.types,\r\n        Atk, Def, MaxHP: Sta, HP: Sta,\r\n        fast,\r\n        chargedMoves,\r\n        energy: 0,\r\n    };\r\n}\r\n\r\nfunction bestCharged(att, def) {\r\n    let best = null, bestScore = -Infinity;\r\n    for (const m of (att.chargedMoves || [])) {\r\n        if (!m || m.kind !== \"charged\") continue;\r\n        const stab = att.types.includes(m.type) ? STAB : 1;\r\n        const effm = eff(m.type, def.types);\r\n        const dmg = damage(m.power, att.Atk, def.Def, stab, effm);\r\n        const dpe = (m.power || 0) / (m.energyCost || 45);\r\n        const score = dmg * 1.0 + dpe * 2.5;\r\n        if (score > bestScore) { bestScore = score; best = m; }\r\n    }\r\n    return best;\r\n}\r\n\r\n/* Public: simulate a duel and return UI-friendly stats */\r\nexport function simulateDuel(attackerIn, defenderIn, shieldsA = 2, shieldsB = 2, _book = MOVES, leagueName = \"Master League\") {\r\n    const A = enrichSideForLeague(attackerIn, leagueName);\r\n    const B = enrichSideForLeague(defenderIn, leagueName);\r\n\r\n    const recA = bestCharged(A, B);\r\n    const recB = bestCharged(B, A);\r\n\r\n    let aSh = Math.max(0, shieldsA | 0), bSh = Math.max(0, shieldsB | 0);\r\n    let t = 0; const MAX_TURNS = 2000; const log = [];\r\n\r\n    const canThrow = (u) => (u.chargedMoves || []).some(m => u.energy >= (m.energyCost || 45));\r\n    const chooseThrow = (u, foe) => {\r\n        let pick = null, best = -Infinity;\r\n        for (const m of (u.chargedMoves || [])) {\r\n            if (u.energy < (m.energyCost || 45)) continue;\r\n            const stab = u.types.includes(m.type) ? STAB : 1;\r\n            const mult = eff(m.type, foe.types);\r\n            const dmg = damage(m.power, u.Atk, foe.Def, stab, mult);\r\n            if (dmg > best) { best = dmg; pick = m; }\r\n        }\r\n        return pick;\r\n    };\r\n\r\n    while (A.HP > 0 && B.HP > 0 && t < MAX_TURNS) {\r\n        t++;\r\n\r\n        if (A.fast && t % (A.fast.turns || 1) === 0) A.energy += num(A.fast.energyGain, 0);\r\n        if (B.fast && t % (B.fast.turns || 1) === 0) B.energy += num(B.fast.energyGain, 0);\r\n\r\n        const aMove = canThrow(A) ? chooseThrow(A, B) : null;\r\n        const bMove = canThrow(B) ? chooseThrow(B, A) : null;\r\n\r\n        const aFirst = aMove && bMove ? (A.Atk >= B.Atk) : !!aMove;\r\n\r\n        function resolveThrow(user, foe, move, who) {\r\n            if (!move) return;\r\n            const stab = user.types.includes(move.type) ? STAB : 1;\r\n            const mult = eff(move.type, foe.types);\r\n            const hit = damage(move.power, user.Atk, foe.Def, stab, mult);\r\n\r\n            let shielded = false;\r\n            if (who === \"A\" && bSh > 0) { if (hit >= foe.HP || hit >= foe.MaxHP * 0.35) { bSh--; shielded = true; } }\r\n            else if (who === \"B\" && aSh > 0) { if (hit >= foe.HP || hit >= foe.MaxHP * 0.35) { aSh--; shielded = true; } }\r\n\r\n            if (!shielded) { foe.HP = Math.max(0, foe.HP - hit); }\r\n            user.energy -= (move.energyCost || 45);\r\n            log.push(`${who} throws ${move.id}${shielded ? ' (shielded)' : ''}`);\r\n        }\r\n\r\n        if (aFirst) {\r\n            if (aMove) resolveThrow(A, B, aMove, \"A\");\r\n            else if (A.fast && t % (A.fast.turns || 1) === 0) {\r\n                const hit = damage(A.fast.power || 1, A.Atk, B.Def, A.types.includes(A.fast.type) ? STAB : 1, eff(A.fast.type, B.types));\r\n                B.HP = Math.max(0, B.HP - hit);\r\n            }\r\n            if (B.HP <= 0) break;\r\n\r\n            if (bMove) resolveThrow(B, A, bMove, \"B\");\r\n            else if (B.fast && t % (B.fast.turns || 1) === 0) {\r\n                const hit = damage(B.fast.power || 1, B.Atk, A.Def, B.types.includes(B.fast.type) ? STAB : 1, eff(B.fast.type, A.types));\r\n                A.HP = Math.max(0, A.HP - hit);\r\n            }\r\n            if (A.HP <= 0) break;\r\n\r\n        } else {\r\n            if (bMove) resolveThrow(B, A, bMove, \"B\");\r\n            else if (B.fast && t % (B.fast.turns || 1) === 0) {\r\n                const hit = damage(B.fast.power || 1, B.Atk, A.Def, B.types.includes(B.fast.type) ? STAB : 1, eff(B.fast.type, A.types));\r\n                A.HP = Math.max(0, A.HP - hit);\r\n            }\r\n            if (A.HP <= 0) break;\r\n\r\n            if (aMove) resolveThrow(A, B, aMove, \"A\");\r\n            else if (A.fast && t % (A.fast.turns || 1) === 0) {\r\n                const hit = damage(A.fast.power || 1, A.Atk, B.Def, A.types.includes(A.fast.type) ? STAB : 1, eff(A.fast.type, B.types));\r\n                B.HP = Math.max(0, B.HP - hit);\r\n            }\r\n            if (B.HP <= 0) break;\r\n        }\r\n    }\r\n\r\n    const winner =\r\n        A.HP <= 0 && B.HP <= 0 ? \"Draw\" :\r\n            A.HP <= 0 ? B.name :\r\n                B.HP <= 0 ? A.name :\r\n                    (A.HP === B.HP ? \"Draw\" : (A.HP > B.HP ? A.name : B.name));\r\n\r\n    return {\r\n        winner,\r\n        aHP: Math.round((A.HP / A.MaxHP) * 100),\r\n        bHP: Math.round((B.HP / B.MaxHP) * 100),\r\n        aRecommended: (bestCharged(A, B) || recA)?.id || null,\r\n        bRecommended: (bestCharged(B, A) || recB)?.id || null,\r\n        summary: log.slice(0, 12)\r\n    };\r\n}\r\n\r\n/* Rank your 3 vs one enemy */\r\nexport function bestOfThree(mine, enemy, myShields, foeShields, _book = MOVES, leagueName = \"Master League\") {\r\n    const fights = mine.map(m => {\r\n        const you = { ...m, name: m.name || m.speciesId };\r\n        const foe = { ...enemy, name: enemy.name || enemy.speciesId };\r\n        const r = simulateDuel(you, foe, myShields, foeShields, MOVES, leagueName);\r\n        const score = r.winner === you.name ? 1 : (r.winner === \"Draw\" ? 0 : -1);\r\n        return { you: you.name, vs: foe.name, ...r, score };\r\n    });\r\n    fights.sort((a, b) => (b.score - a.score) || (b.aHP - a.aHP) || (b.bHP - a.bHP));\r\n    return { best: fights[0], fights };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}