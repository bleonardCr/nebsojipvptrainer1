{"ast":null,"code":"// src/battleCalc.js\n// Live, lightweight PvP math with Types + STAB and per-defender charged selection.\n// Keeps the same API as before: buildMoveBook(gm), simulateDuel(...), bestOfThree(...)\n\nlet SPECIES_BOOK = {}; // speciesId -> [\"Fairy\",\"Steel\"]\nlet MOVE_BOOK = {}; // moveId -> { id, kind, power, energyGain, energyCost, type }\n\n// ---------- Type chart (PvP multipliers) ----------\nconst TYPES = [\"Normal\", \"Fighting\", \"Flying\", \"Poison\", \"Ground\", \"Rock\", \"Bug\", \"Ghost\", \"Steel\", \"Fire\", \"Water\", \"Grass\", \"Electric\", \"Psychic\", \"Ice\", \"Dragon\", \"Dark\", \"Fairy\", \"Neutral\"];\nconst EFF = makeTypeChart();\n\n// Super-effective 1.6, resisted 0.625, double res 0.3906, double super 2.56\nfunction makeTypeChart() {\n  const mult = {};\n  TYPES.forEach(t => mult[t] = {});\n  // Fill neutral baseline\n  TYPES.forEach(a => TYPES.forEach(d => mult[a][d] = 1.0));\n\n  // Helper to set strengths\n  const S = (atk, arr, m) => arr.forEach(d => mult[atk][d] = m);\n\n  // This is a compact chart tuned for PvP. It’s not exhaustive comments-wise,\n  // but the multipliers match Trainer Battles.\n  S(\"Fighting\", [\"Normal\", \"Rock\", \"Ice\", \"Dark\", \"Steel\"], 1.6);\n  S(\"Fighting\", [\"Flying\", \"Poison\", \"Bug\", \"Psychic\", \"Fairy\"], 0.625);\n  S(\"Flying\", [\"Fighting\", \"Bug\", \"Grass\"], 1.6);\n  S(\"Flying\", [\"Rock\", \"Steel\", \"Electric\"], 0.625);\n  S(\"Poison\", [\"Grass\", \"Fairy\"], 1.6);\n  S(\"Poison\", [\"Poison\", \"Ground\", \"Rock\", \"Ghost\"], 0.625);\n  S(\"Poison\", [\"Steel\"], 0.390625);\n  S(\"Ground\", [\"Poison\", \"Rock\", \"Steel\", \"Fire\", \"Electric\"], 1.6);\n  S(\"Ground\", [\"Bug\", \"Grass\"], 0.625);\n  S(\"Ground\", [\"Flying\"], 0.390625);\n  S(\"Rock\", [\"Flying\", \"Bug\", \"Fire\", \"Ice\"], 1.6);\n  S(\"Rock\", [\"Fighting\", \"Ground\", \"Steel\"], 0.625);\n  S(\"Bug\", [\"Grass\", \"Psychic\", \"Dark\"], 1.6);\n  S(\"Bug\", [\"Fighting\", \"Flying\", \"Poison\", \"Ghost\", \"Steel\", \"Fire\", \"Fairy\"], 0.625);\n  S(\"Ghost\", [\"Ghost\", \"Psychic\"], 1.6);\n  S(\"Ghost\", [\"Dark\"], 0.625);\n  S(\"Normal\", [\"Ghost\"], 0.390625); // Normal moves do 0.39x to Ghost\n\n  S(\"Steel\", [\"Rock\", \"Ice\", \"Fairy\"], 1.6);\n  S(\"Steel\", [\"Steel\", \"Fire\", \"Water\", \"Electric\"], 0.625);\n  S(\"Fire\", [\"Bug\", \"Steel\", \"Grass\", \"Ice\"], 1.6);\n  S(\"Fire\", [\"Rock\", \"Fire\", \"Water\", \"Dragon\"], 0.625);\n  S(\"Water\", [\"Ground\", \"Rock\", \"Fire\"], 1.6);\n  S(\"Water\", [\"Water\", \"Grass\", \"Dragon\"], 0.625);\n  S(\"Grass\", [\"Ground\", \"Rock\", \"Water\"], 1.6);\n  S(\"Grass\", [\"Flying\", \"Poison\", \"Bug\", \"Steel\", \"Fire\", \"Grass\", \"Dragon\"], 0.625);\n  S(\"Electric\", [\"Flying\", \"Water\"], 1.6);\n  S(\"Electric\", [\"Grass\", \"Electric\", \"Dragon\"], 0.625);\n  S(\"Electric\", [\"Ground\"], 0.390625);\n  S(\"Psychic\", [\"Fighting\", \"Poison\"], 1.6);\n  S(\"Psychic\", [\"Psychic\", \"Steel\"], 0.625);\n  S(\"Psychic\", [\"Dark\"], 0.390625);\n  S(\"Ice\", [\"Flying\", \"Ground\", \"Grass\", \"Dragon\"], 1.6);\n  S(\"Ice\", [\"Steel\", \"Fire\", \"Water\", \"Ice\"], 0.625);\n  S(\"Dragon\", [\"Dragon\"], 1.6);\n  S(\"Dragon\", [\"Steel\"], 0.625);\n  S(\"Dragon\", [\"Fairy\"], 0.390625);\n  S(\"Dark\", [\"Ghost\", \"Psychic\"], 1.6);\n  S(\"Dark\", [\"Fighting\", \"Dark\", \"Fairy\"], 0.625);\n  S(\"Fairy\", [\"Fighting\", \"Dragon\", \"Dark\"], 1.6);\n  S(\"Fairy\", [\"Poison\", \"Steel\", \"Fire\"], 0.625);\n  return mult;\n}\nconst STAB = 1.2;\nfunction normType(t) {\n  if (!t) return \"Neutral\";\n  const s = String(t);\n  if (s.includes(\"POKEMON_TYPE_\")) {\n    const u = s.split(\"POKEMON_TYPE_\")[1];\n    return title(u.replace(/_/g, \" \").toLowerCase());\n  }\n  return title(s.replace(/_/g, \" \").toLowerCase());\n}\nfunction title(s) {\n  return s ? s.charAt(0).toUpperCase() + s.slice(1) : s;\n}\nfunction normalizeSpeciesId(id) {\n  return String(id || \"\").toLowerCase().replace(/[^\\w]+/g, \"_\").replace(/^_+|_+$/g, \"\");\n}\n\n// ---------- Books ----------\nfunction buildSpeciesBook(gm) {\n  var _gm$data;\n  const list = (gm === null || gm === void 0 ? void 0 : gm.pokemon) || (gm === null || gm === void 0 ? void 0 : (_gm$data = gm.data) === null || _gm$data === void 0 ? void 0 : _gm$data.pokemon) || (gm === null || gm === void 0 ? void 0 : gm.species) || [];\n  const out = {};\n  for (const p of list) {\n    var _p$types, _p$types2;\n    const key = normalizeSpeciesId(p.speciesId || p.id || p.pokemonId || p.name || p.uniqueId || p.templateId);\n    if (!key) continue;\n    const t1 = normType(p.type1 || ((_p$types = p.types) === null || _p$types === void 0 ? void 0 : _p$types[0]));\n    const t2 = normType(p.type2 || ((_p$types2 = p.types) === null || _p$types2 === void 0 ? void 0 : _p$types2[1]));\n    const arr = [t1, t2].filter(Boolean);\n    out[key] = arr.length ? arr : [\"Neutral\"];\n  }\n  return out;\n}\nexport function buildMoveBook(gm) {\n  var _gm$data2, _gm$data3;\n  // Also initialize species book here so simulateDuel can use it\n  SPECIES_BOOK = buildSpeciesBook(gm);\n  const candidates = [gm === null || gm === void 0 ? void 0 : gm.moves, gm === null || gm === void 0 ? void 0 : gm.combatMoves, gm === null || gm === void 0 ? void 0 : (_gm$data2 = gm.data) === null || _gm$data2 === void 0 ? void 0 : _gm$data2.moves, gm === null || gm === void 0 ? void 0 : (_gm$data3 = gm.data) === null || _gm$data3 === void 0 ? void 0 : _gm$data3.combatMoves, gm === null || gm === void 0 ? void 0 : gm.moveList].filter(Boolean);\n  const book = {};\n  for (const list of candidates) {\n    for (const raw of list) {\n      var _ref, _ref2, _ref3, _raw$pvpPower;\n      const id = raw.moveId || raw.uniqueId || raw.id || raw.templateId || raw.name;\n      if (!id) continue;\n\n      // Power\n      const power = Number((_ref = (_ref2 = (_ref3 = (_raw$pvpPower = raw.pvpPower) !== null && _raw$pvpPower !== void 0 ? _raw$pvpPower : raw.power) !== null && _ref3 !== void 0 ? _ref3 : raw.combatPower) !== null && _ref2 !== void 0 ? _ref2 : raw.damage) !== null && _ref !== void 0 ? _ref : 0);\n\n      // Energy + kind\n      let energyGain = 0;\n      let energyCost = 0;\n      let kind = \"fast\";\n      if (raw.energyGain != null) {\n        // pvpoke style fast\n        energyGain = Math.max(0, Number(raw.energyGain));\n        kind = \"fast\";\n      }\n      if (raw.energy != null) {\n        // pvpoke style charged\n        energyCost = Math.abs(Number(raw.energy));\n        kind = \"charged\";\n      }\n      if (raw.energyDelta != null) {\n        // Niantic combat move\n        const ed = Number(raw.energyDelta);\n        if (ed > 0) {\n          energyGain = ed;\n          kind = \"fast\";\n        }\n        if (ed < 0) {\n          energyCost = Math.abs(ed);\n          kind = \"charged\";\n        }\n      }\n      const type = normType(raw.type || raw.pokemonType || raw.moveType);\n\n      // Keep largest-power variant if duplicates show up\n      const key = String(id);\n      const prev = book[key];\n      if (!prev || power > prev.power) {\n        book[key] = {\n          id: key,\n          kind,\n          power,\n          energyGain,\n          energyCost,\n          type\n        };\n      }\n    }\n  }\n  MOVE_BOOK = book;\n  return book;\n}\n\n// ---------- Helpers ----------\nfunction getTypesFor(speciesIdOrName) {\n  const k = normalizeSpeciesId(speciesIdOrName);\n  return SPECIES_BOOK[k] || [\"Neutral\"];\n}\nfunction effectiveness(moveType, defenderTypes = []) {\n  let m = 1.0;\n  for (const t of defenderTypes) {\n    var _EFF$moveType$t, _EFF$moveType;\n    m *= (_EFF$moveType$t = (_EFF$moveType = EFF[moveType]) === null || _EFF$moveType === void 0 ? void 0 : _EFF$moveType[t]) !== null && _EFF$moveType$t !== void 0 ? _EFF$moveType$t : 1.0;\n  }\n  return m;\n}\nfunction stabFor(moveType, attackerTypes = []) {\n  return attackerTypes.includes(moveType) ? STAB : 1.0;\n}\nfunction moveDamage(move, atkTypes, defTypes) {\n  // Scale down a little so HP=100 feels right in UI.\n  const mult = stabFor(move.type, atkTypes) * effectiveness(move.type, defTypes);\n  const raw = (move.power || 0) * mult;\n  return Math.max(1, Math.round(raw / 4)); // ← tuning factor to keep bars readable\n}\nfunction bestChargedFor(attacker, defender) {\n  let best = null,\n    bestDmg = -Infinity;\n  for (const id of attacker.chargedMoves || []) {\n    const m = MOVE_BOOK[id];\n    if (!m || m.kind !== \"charged\") continue;\n    const dmg = moveDamage(m, attacker.types, defender.types);\n    const dpe = (m.power || 0) / (m.energyCost || 45);\n    const score = dmg * 1.0 + dpe * 3.0; // blend damage + efficiency\n    if (score > bestDmg) {\n      bestDmg = score;\n      best = m;\n    }\n  }\n  return best;\n}\n\n// ---------- Duel ----------\nexport function simulateDuel(attackerIn, defenderIn, shieldsA, shieldsB) {\n  // Enrich with types from species book if missing\n  const A = {\n    name: attackerIn.name || attackerIn.speciesId,\n    types: attackerIn.types || getTypesFor(attackerIn.speciesId || attackerIn.name),\n    fast: MOVE_BOOK[attackerIn.fastMove],\n    chargedMoves: attackerIn.chargedMoves || [],\n    energy: 0,\n    hp: 100,\n    shields: shieldsA\n  };\n  const B = {\n    name: defenderIn.name || defenderIn.speciesId,\n    types: defenderIn.types || getTypesFor(defenderIn.speciesId || defenderIn.name),\n    fast: MOVE_BOOK[defenderIn.fastMove],\n    chargedMoves: defenderIn.chargedMoves || [],\n    energy: 0,\n    hp: 100,\n    shields: shieldsB\n  };\n  const log = [];\n  const MAX_TURNS = 300;\n  let turn = 0;\n  const aRec = bestChargedFor(A, B);\n  const bRec = bestChargedFor(B, A);\n  function chooseCharged(user, foe) {\n    // choose the affordable charged with highest expected damage\n    let choice = null,\n      best = -Infinity;\n    for (const id of user.chargedMoves) {\n      const m = MOVE_BOOK[id];\n      if (!m || m.kind !== \"charged\") continue;\n      const cost = m.energyCost || 45;\n      if (user.energy < cost) continue;\n      const dmg = moveDamage(m, user.types, foe.types);\n      if (dmg > best) {\n        best = dmg;\n        choice = m;\n      }\n    }\n    return choice;\n  }\n  while (A.hp > 0 && B.hp > 0 && turn < MAX_TURNS) {\n    var _A$fast, _B$fast;\n    turn++;\n\n    // Fast energy gain each tick\n    A.energy += Math.max(0, ((_A$fast = A.fast) === null || _A$fast === void 0 ? void 0 : _A$fast.energyGain) || 0);\n    B.energy += Math.max(0, ((_B$fast = B.fast) === null || _B$fast === void 0 ? void 0 : _B$fast.energyGain) || 0);\n\n    // A acts\n    let aMove = chooseCharged(A, B);\n    if (aMove) {\n      if (B.shields > 0) {\n        B.shields--;\n        log.push(`${A.name} throws ${aMove.id} (shielded)`);\n      } else {\n        B.hp -= moveDamage(aMove, A.types, B.types);\n      }\n      A.energy -= aMove.energyCost || 45;\n    } else {\n      // fast tap\n      if (A.fast) B.hp -= moveDamage(A.fast, A.types, B.types);\n    }\n    if (B.hp <= 0) break;\n\n    // B acts\n    let bMove = chooseCharged(B, A);\n    if (bMove) {\n      if (A.shields > 0) {\n        A.shields--;\n        log.push(`${B.name} throws ${bMove.id} (shielded)`);\n      } else {\n        A.hp -= moveDamage(bMove, B.types, A.types);\n      }\n      B.energy -= bMove.energyCost || 45;\n    } else {\n      if (B.fast) A.hp -= moveDamage(B.fast, B.types, A.types);\n    }\n  }\n  const winner = A.hp <= 0 && B.hp <= 0 ? \"Draw\" : A.hp <= 0 ? B.name : B.hp <= 0 ? A.name : A.hp === B.hp ? \"Draw\" : A.hp > B.hp ? A.name : B.name;\n  return {\n    winner,\n    aHP: Math.max(0, Math.round(A.hp)),\n    bHP: Math.max(0, Math.round(B.hp)),\n    aRecommended: (aRec === null || aRec === void 0 ? void 0 : aRec.id) || null,\n    bRecommended: (bRec === null || bRec === void 0 ? void 0 : bRec.id) || null,\n    summary: log.slice(0, 12)\n  };\n}\n\n// ---------- Rank your 3 vs one enemy ----------\nexport function bestOfThree(mine, enemy, myShields, foeShields) {\n  const fights = mine.map(m => {\n    const you = {\n      ...m,\n      types: m.types || getTypesFor(m.speciesId || m.name)\n    };\n    const foe = {\n      ...enemy,\n      types: enemy.types || getTypesFor(enemy.speciesId || enemy.name)\n    };\n    const r = simulateDuel(you, foe, myShields, foeShields);\n    const score = r.winner === you.name ? 1 : r.winner === \"Draw\" ? 0 : -1;\n    const margin = r.aHP - r.bHP;\n    return {\n      you: you.name,\n      vs: foe.name,\n      ...r,\n      score,\n      margin\n    };\n  });\n  fights.sort((a, b) => b.score - a.score || b.margin - a.margin);\n  return {\n    best: fights[0],\n    fights\n  };\n}","map":{"version":3,"names":["SPECIES_BOOK","MOVE_BOOK","TYPES","EFF","makeTypeChart","mult","forEach","t","a","d","S","atk","arr","m","STAB","normType","s","String","includes","u","split","title","replace","toLowerCase","charAt","toUpperCase","slice","normalizeSpeciesId","id","buildSpeciesBook","gm","_gm$data","list","pokemon","data","species","out","p","_p$types","_p$types2","key","speciesId","pokemonId","name","uniqueId","templateId","t1","type1","types","t2","type2","filter","Boolean","length","buildMoveBook","_gm$data2","_gm$data3","candidates","moves","combatMoves","moveList","book","raw","_ref","_ref2","_ref3","_raw$pvpPower","moveId","power","Number","pvpPower","combatPower","damage","energyGain","energyCost","kind","Math","max","energy","abs","energyDelta","ed","type","pokemonType","moveType","prev","getTypesFor","speciesIdOrName","k","effectiveness","defenderTypes","_EFF$moveType$t","_EFF$moveType","stabFor","attackerTypes","moveDamage","move","atkTypes","defTypes","round","bestChargedFor","attacker","defender","best","bestDmg","Infinity","chargedMoves","dmg","dpe","score","simulateDuel","attackerIn","defenderIn","shieldsA","shieldsB","A","fast","fastMove","hp","shields","B","log","MAX_TURNS","turn","aRec","bRec","chooseCharged","user","foe","choice","cost","_A$fast","_B$fast","aMove","push","bMove","winner","aHP","bHP","aRecommended","bRecommended","summary","bestOfThree","mine","enemy","myShields","foeShields","fights","map","you","r","margin","vs","sort","b"],"sources":["C:/Users/ben/Projects/nebsojipvptrainer/src/App.js"],"sourcesContent":["// src/battleCalc.js\r\n// Live, lightweight PvP math with Types + STAB and per-defender charged selection.\r\n// Keeps the same API as before: buildMoveBook(gm), simulateDuel(...), bestOfThree(...)\r\n\r\nlet SPECIES_BOOK = {};  // speciesId -> [\"Fairy\",\"Steel\"]\r\nlet MOVE_BOOK = {};     // moveId -> { id, kind, power, energyGain, energyCost, type }\r\n\r\n// ---------- Type chart (PvP multipliers) ----------\r\nconst TYPES = [\r\n    \"Normal\", \"Fighting\", \"Flying\", \"Poison\", \"Ground\", \"Rock\", \"Bug\", \"Ghost\", \"Steel\",\r\n    \"Fire\", \"Water\", \"Grass\", \"Electric\", \"Psychic\", \"Ice\", \"Dragon\", \"Dark\", \"Fairy\", \"Neutral\"\r\n];\r\n\r\nconst EFF = makeTypeChart();\r\n\r\n// Super-effective 1.6, resisted 0.625, double res 0.3906, double super 2.56\r\nfunction makeTypeChart() {\r\n    const mult = {};\r\n    TYPES.forEach(t => mult[t] = {});\r\n    // Fill neutral baseline\r\n    TYPES.forEach(a => TYPES.forEach(d => mult[a][d] = 1.0));\r\n\r\n    // Helper to set strengths\r\n    const S = (atk, arr, m) => arr.forEach(d => mult[atk][d] = m);\r\n\r\n    // This is a compact chart tuned for PvP. It’s not exhaustive comments-wise,\r\n    // but the multipliers match Trainer Battles.\r\n    S(\"Fighting\", [\"Normal\", \"Rock\", \"Ice\", \"Dark\", \"Steel\"], 1.6);\r\n    S(\"Fighting\", [\"Flying\", \"Poison\", \"Bug\", \"Psychic\", \"Fairy\"], 0.625);\r\n\r\n    S(\"Flying\", [\"Fighting\", \"Bug\", \"Grass\"], 1.6);\r\n    S(\"Flying\", [\"Rock\", \"Steel\", \"Electric\"], 0.625);\r\n\r\n    S(\"Poison\", [\"Grass\", \"Fairy\"], 1.6);\r\n    S(\"Poison\", [\"Poison\", \"Ground\", \"Rock\", \"Ghost\"], 0.625);\r\n    S(\"Poison\", [\"Steel\"], 0.390625);\r\n\r\n    S(\"Ground\", [\"Poison\", \"Rock\", \"Steel\", \"Fire\", \"Electric\"], 1.6);\r\n    S(\"Ground\", [\"Bug\", \"Grass\"], 0.625);\r\n    S(\"Ground\", [\"Flying\"], 0.390625);\r\n\r\n    S(\"Rock\", [\"Flying\", \"Bug\", \"Fire\", \"Ice\"], 1.6);\r\n    S(\"Rock\", [\"Fighting\", \"Ground\", \"Steel\"], 0.625);\r\n\r\n    S(\"Bug\", [\"Grass\", \"Psychic\", \"Dark\"], 1.6);\r\n    S(\"Bug\", [\"Fighting\", \"Flying\", \"Poison\", \"Ghost\", \"Steel\", \"Fire\", \"Fairy\"], 0.625);\r\n\r\n    S(\"Ghost\", [\"Ghost\", \"Psychic\"], 1.6);\r\n    S(\"Ghost\", [\"Dark\"], 0.625);\r\n    S(\"Normal\", [\"Ghost\"], 0.390625); // Normal moves do 0.39x to Ghost\r\n\r\n    S(\"Steel\", [\"Rock\", \"Ice\", \"Fairy\"], 1.6);\r\n    S(\"Steel\", [\"Steel\", \"Fire\", \"Water\", \"Electric\"], 0.625);\r\n\r\n    S(\"Fire\", [\"Bug\", \"Steel\", \"Grass\", \"Ice\"], 1.6);\r\n    S(\"Fire\", [\"Rock\", \"Fire\", \"Water\", \"Dragon\"], 0.625);\r\n\r\n    S(\"Water\", [\"Ground\", \"Rock\", \"Fire\"], 1.6);\r\n    S(\"Water\", [\"Water\", \"Grass\", \"Dragon\"], 0.625);\r\n\r\n    S(\"Grass\", [\"Ground\", \"Rock\", \"Water\"], 1.6);\r\n    S(\"Grass\", [\"Flying\", \"Poison\", \"Bug\", \"Steel\", \"Fire\", \"Grass\", \"Dragon\"], 0.625);\r\n\r\n    S(\"Electric\", [\"Flying\", \"Water\"], 1.6);\r\n    S(\"Electric\", [\"Grass\", \"Electric\", \"Dragon\"], 0.625);\r\n    S(\"Electric\", [\"Ground\"], 0.390625);\r\n\r\n    S(\"Psychic\", [\"Fighting\", \"Poison\"], 1.6);\r\n    S(\"Psychic\", [\"Psychic\", \"Steel\"], 0.625);\r\n    S(\"Psychic\", [\"Dark\"], 0.390625);\r\n\r\n    S(\"Ice\", [\"Flying\", \"Ground\", \"Grass\", \"Dragon\"], 1.6);\r\n    S(\"Ice\", [\"Steel\", \"Fire\", \"Water\", \"Ice\"], 0.625);\r\n\r\n    S(\"Dragon\", [\"Dragon\"], 1.6);\r\n    S(\"Dragon\", [\"Steel\"], 0.625);\r\n    S(\"Dragon\", [\"Fairy\"], 0.390625);\r\n\r\n    S(\"Dark\", [\"Ghost\", \"Psychic\"], 1.6);\r\n    S(\"Dark\", [\"Fighting\", \"Dark\", \"Fairy\"], 0.625);\r\n\r\n    S(\"Fairy\", [\"Fighting\", \"Dragon\", \"Dark\"], 1.6);\r\n    S(\"Fairy\", [\"Poison\", \"Steel\", \"Fire\"], 0.625);\r\n\r\n    return mult;\r\n}\r\n\r\nconst STAB = 1.2;\r\n\r\nfunction normType(t) {\r\n    if (!t) return \"Neutral\";\r\n    const s = String(t);\r\n    if (s.includes(\"POKEMON_TYPE_\")) {\r\n        const u = s.split(\"POKEMON_TYPE_\")[1];\r\n        return title(u.replace(/_/g, \" \").toLowerCase());\r\n    }\r\n    return title(s.replace(/_/g, \" \").toLowerCase());\r\n}\r\nfunction title(s) { return s ? s.charAt(0).toUpperCase() + s.slice(1) : s; }\r\n\r\nfunction normalizeSpeciesId(id) {\r\n    return String(id || \"\")\r\n        .toLowerCase()\r\n        .replace(/[^\\w]+/g, \"_\")\r\n        .replace(/^_+|_+$/g, \"\");\r\n}\r\n\r\n// ---------- Books ----------\r\nfunction buildSpeciesBook(gm) {\r\n    const list = gm?.pokemon || gm?.data?.pokemon || gm?.species || [];\r\n    const out = {};\r\n    for (const p of list) {\r\n        const key = normalizeSpeciesId(p.speciesId || p.id || p.pokemonId || p.name || p.uniqueId || p.templateId);\r\n        if (!key) continue;\r\n        const t1 = normType(p.type1 || p.types?.[0]);\r\n        const t2 = normType(p.type2 || p.types?.[1]);\r\n        const arr = [t1, t2].filter(Boolean);\r\n        out[key] = arr.length ? arr : [\"Neutral\"];\r\n    }\r\n    return out;\r\n}\r\n\r\nexport function buildMoveBook(gm) {\r\n    // Also initialize species book here so simulateDuel can use it\r\n    SPECIES_BOOK = buildSpeciesBook(gm);\r\n\r\n    const candidates = [\r\n        gm?.moves, gm?.combatMoves, gm?.data?.moves, gm?.data?.combatMoves, gm?.moveList\r\n    ].filter(Boolean);\r\n\r\n    const book = {};\r\n\r\n    for (const list of candidates) {\r\n        for (const raw of list) {\r\n            const id = raw.moveId || raw.uniqueId || raw.id || raw.templateId || raw.name;\r\n            if (!id) continue;\r\n\r\n            // Power\r\n            const power = Number(\r\n                raw.pvpPower ?? raw.power ?? raw.combatPower ?? raw.damage ?? 0\r\n            );\r\n\r\n            // Energy + kind\r\n            let energyGain = 0;\r\n            let energyCost = 0;\r\n            let kind = \"fast\";\r\n\r\n            if (raw.energyGain != null) { // pvpoke style fast\r\n                energyGain = Math.max(0, Number(raw.energyGain));\r\n                kind = \"fast\";\r\n            }\r\n            if (raw.energy != null) { // pvpoke style charged\r\n                energyCost = Math.abs(Number(raw.energy));\r\n                kind = \"charged\";\r\n            }\r\n            if (raw.energyDelta != null) { // Niantic combat move\r\n                const ed = Number(raw.energyDelta);\r\n                if (ed > 0) { energyGain = ed; kind = \"fast\"; }\r\n                if (ed < 0) { energyCost = Math.abs(ed); kind = \"charged\"; }\r\n            }\r\n\r\n            const type = normType(raw.type || raw.pokemonType || raw.moveType);\r\n\r\n            // Keep largest-power variant if duplicates show up\r\n            const key = String(id);\r\n            const prev = book[key];\r\n            if (!prev || power > prev.power) {\r\n                book[key] = { id: key, kind, power, energyGain, energyCost, type };\r\n            }\r\n        }\r\n    }\r\n\r\n    MOVE_BOOK = book;\r\n    return book;\r\n}\r\n\r\n// ---------- Helpers ----------\r\nfunction getTypesFor(speciesIdOrName) {\r\n    const k = normalizeSpeciesId(speciesIdOrName);\r\n    return SPECIES_BOOK[k] || [\"Neutral\"];\r\n}\r\n\r\nfunction effectiveness(moveType, defenderTypes = []) {\r\n    let m = 1.0;\r\n    for (const t of defenderTypes) {\r\n        m *= (EFF[moveType]?.[t] ?? 1.0);\r\n    }\r\n    return m;\r\n}\r\n\r\nfunction stabFor(moveType, attackerTypes = []) {\r\n    return attackerTypes.includes(moveType) ? STAB : 1.0;\r\n}\r\n\r\nfunction moveDamage(move, atkTypes, defTypes) {\r\n    // Scale down a little so HP=100 feels right in UI.\r\n    const mult = stabFor(move.type, atkTypes) * effectiveness(move.type, defTypes);\r\n    const raw = (move.power || 0) * mult;\r\n    return Math.max(1, Math.round(raw / 4)); // ← tuning factor to keep bars readable\r\n}\r\n\r\nfunction bestChargedFor(attacker, defender) {\r\n    let best = null, bestDmg = -Infinity;\r\n    for (const id of attacker.chargedMoves || []) {\r\n        const m = MOVE_BOOK[id];\r\n        if (!m || m.kind !== \"charged\") continue;\r\n        const dmg = moveDamage(m, attacker.types, defender.types);\r\n        const dpe = (m.power || 0) / (m.energyCost || 45);\r\n        const score = dmg * 1.0 + dpe * 3.0; // blend damage + efficiency\r\n        if (score > bestDmg) { bestDmg = score; best = m; }\r\n    }\r\n    return best;\r\n}\r\n\r\n// ---------- Duel ----------\r\nexport function simulateDuel(attackerIn, defenderIn, shieldsA, shieldsB) {\r\n    // Enrich with types from species book if missing\r\n    const A = {\r\n        name: attackerIn.name || attackerIn.speciesId,\r\n        types: attackerIn.types || getTypesFor(attackerIn.speciesId || attackerIn.name),\r\n        fast: MOVE_BOOK[attackerIn.fastMove],\r\n        chargedMoves: (attackerIn.chargedMoves || []),\r\n        energy: 0, hp: 100, shields: shieldsA\r\n    };\r\n    const B = {\r\n        name: defenderIn.name || defenderIn.speciesId,\r\n        types: defenderIn.types || getTypesFor(defenderIn.speciesId || defenderIn.name),\r\n        fast: MOVE_BOOK[defenderIn.fastMove],\r\n        chargedMoves: (defenderIn.chargedMoves || []),\r\n        energy: 0, hp: 100, shields: shieldsB\r\n    };\r\n\r\n    const log = [];\r\n    const MAX_TURNS = 300;\r\n    let turn = 0;\r\n\r\n    const aRec = bestChargedFor(A, B);\r\n    const bRec = bestChargedFor(B, A);\r\n\r\n    function chooseCharged(user, foe) {\r\n        // choose the affordable charged with highest expected damage\r\n        let choice = null, best = -Infinity;\r\n        for (const id of user.chargedMoves) {\r\n            const m = MOVE_BOOK[id];\r\n            if (!m || m.kind !== \"charged\") continue;\r\n            const cost = m.energyCost || 45;\r\n            if (user.energy < cost) continue;\r\n            const dmg = moveDamage(m, user.types, foe.types);\r\n            if (dmg > best) { best = dmg; choice = m; }\r\n        }\r\n        return choice;\r\n    }\r\n\r\n    while (A.hp > 0 && B.hp > 0 && turn < MAX_TURNS) {\r\n        turn++;\r\n\r\n        // Fast energy gain each tick\r\n        A.energy += Math.max(0, A.fast?.energyGain || 0);\r\n        B.energy += Math.max(0, B.fast?.energyGain || 0);\r\n\r\n        // A acts\r\n        let aMove = chooseCharged(A, B);\r\n        if (aMove) {\r\n            if (B.shields > 0) { B.shields--; log.push(`${A.name} throws ${aMove.id} (shielded)`); }\r\n            else { B.hp -= moveDamage(aMove, A.types, B.types); }\r\n            A.energy -= (aMove.energyCost || 45);\r\n        } else {\r\n            // fast tap\r\n            if (A.fast) B.hp -= moveDamage(A.fast, A.types, B.types);\r\n        }\r\n        if (B.hp <= 0) break;\r\n\r\n        // B acts\r\n        let bMove = chooseCharged(B, A);\r\n        if (bMove) {\r\n            if (A.shields > 0) { A.shields--; log.push(`${B.name} throws ${bMove.id} (shielded)`); }\r\n            else { A.hp -= moveDamage(bMove, B.types, A.types); }\r\n            B.energy -= (bMove.energyCost || 45);\r\n        } else {\r\n            if (B.fast) A.hp -= moveDamage(B.fast, B.types, A.types);\r\n        }\r\n    }\r\n\r\n    const winner =\r\n        A.hp <= 0 && B.hp <= 0 ? \"Draw\" :\r\n            A.hp <= 0 ? B.name :\r\n                B.hp <= 0 ? A.name :\r\n                    (A.hp === B.hp ? \"Draw\" : (A.hp > B.hp ? A.name : B.name));\r\n\r\n    return {\r\n        winner,\r\n        aHP: Math.max(0, Math.round(A.hp)),\r\n        bHP: Math.max(0, Math.round(B.hp)),\r\n        aRecommended: aRec?.id || null,\r\n        bRecommended: bRec?.id || null,\r\n        summary: log.slice(0, 12)\r\n    };\r\n}\r\n\r\n// ---------- Rank your 3 vs one enemy ----------\r\nexport function bestOfThree(mine, enemy, myShields, foeShields) {\r\n    const fights = mine.map(m => {\r\n        const you = { ...m, types: m.types || getTypesFor(m.speciesId || m.name) };\r\n        const foe = { ...enemy, types: enemy.types || getTypesFor(enemy.speciesId || enemy.name) };\r\n        const r = simulateDuel(you, foe, myShields, foeShields);\r\n        const score = r.winner === you.name ? 1 : (r.winner === \"Draw\" ? 0 : -1);\r\n        const margin = r.aHP - r.bHP;\r\n        return { you: you.name, vs: foe.name, ...r, score, margin };\r\n    });\r\n    fights.sort((a, b) => (b.score - a.score) || (b.margin - a.margin));\r\n    return { best: fights[0], fights };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}