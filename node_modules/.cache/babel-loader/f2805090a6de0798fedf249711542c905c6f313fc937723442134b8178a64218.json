{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ben\\\\Projects\\\\nebsojipvptrainer\\\\src\\\\components\\\\PokemonSelect.jsx\",\n  _s = $RefreshSig$();\n// src/components/PokemonSelect.jsx\nimport React, { useMemo } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PokemonSelect({\n  id,\n  label,\n  options = [],\n  // array of strings (labels)\n  value = \"\",\n  onChange,\n  // (typedString)\n  placeholder = \"Start typing�\",\n  maxSuggestions = 5 // limit preview to 5\n}) {\n  _s();\n  // prefix / word-start matcher (case-insensitive)\n  const startsAtWord = (label, q) => {\n    const L = String(label || \"\").toLowerCase();\n    const Q = String(q || \"\").trim().toLowerCase();\n    if (!Q) return true;\n    if (L.startsWith(Q)) return true;\n    const words = L.split(/[\\s\\-(_]+/g).filter(Boolean);\n    return words.some(w => w.startsWith(Q));\n  };\n\n  // Only include prefix/word-start matches in the datalist (max 5)\n  const filtered = useMemo(() => {\n    if (!value || !value.trim()) return options.slice(0, maxSuggestions);\n    return options.filter(name => startsAtWord(name, value)).slice(0, maxSuggestions);\n  }, [options, value, maxSuggestions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: 12\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: id,\n      style: {\n        display: \"block\",\n        marginBottom: 6\n      },\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: id,\n      list: `${id}-list`,\n      value: value,\n      placeholder: placeholder,\n      onChange: e => onChange === null || onChange === void 0 ? void 0 : onChange(e.target.value),\n      style: {\n        padding: 8,\n        width: 320\n      },\n      autoComplete: \"off\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n      id: `${id}-list`,\n      children: filtered.map(name => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: name\n      }, name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n_s(PokemonSelect, \"2uHcb/zWRevK0LrN0wam2fLVfYQ=\");\n_c = PokemonSelect;\nvar _c;\n$RefreshReg$(_c, \"PokemonSelect\");","map":{"version":3,"names":["React","useMemo","jsxDEV","_jsxDEV","PokemonSelect","id","label","options","value","onChange","placeholder","maxSuggestions","_s","startsAtWord","q","L","String","toLowerCase","Q","trim","startsWith","words","split","filter","Boolean","some","w","filtered","slice","name","style","marginBottom","children","htmlFor","display","fileName","_jsxFileName","lineNumber","columnNumber","list","e","target","padding","width","autoComplete","map","_c","$RefreshReg$"],"sources":["C:/Users/ben/Projects/nebsojipvptrainer/src/components/PokemonSelect.jsx"],"sourcesContent":["// src/components/PokemonSelect.jsx\r\nimport React, { useMemo } from \"react\";\r\n\r\nexport default function PokemonSelect({\r\n    id,\r\n    label,\r\n    options = [],        // array of strings (labels)\r\n    value = \"\",\r\n    onChange,            // (typedString)\r\n    placeholder = \"Start typing�\",\r\n    maxSuggestions = 5,  // limit preview to 5\r\n}) {\r\n    // prefix / word-start matcher (case-insensitive)\r\n    const startsAtWord = (label, q) => {\r\n        const L = String(label || \"\").toLowerCase();\r\n        const Q = String(q || \"\").trim().toLowerCase();\r\n        if (!Q) return true;\r\n        if (L.startsWith(Q)) return true;\r\n        const words = L.split(/[\\s\\-(_]+/g).filter(Boolean);\r\n        return words.some((w) => w.startsWith(Q));\r\n    };\r\n\r\n    // Only include prefix/word-start matches in the datalist (max 5)\r\n    const filtered = useMemo(() => {\r\n        if (!value || !value.trim()) return options.slice(0, maxSuggestions);\r\n        return options.filter((name) => startsAtWord(name, value)).slice(0, maxSuggestions);\r\n    }, [options, value, maxSuggestions]);\r\n\r\n    return (\r\n        <div style={{ marginBottom: 12 }}>\r\n            <label htmlFor={id} style={{ display: \"block\", marginBottom: 6 }}>\r\n                {label}\r\n            </label>\r\n\r\n            <input\r\n                id={id}\r\n                list={`${id}-list`}\r\n                value={value}\r\n                placeholder={placeholder}\r\n                onChange={(e) => onChange?.(e.target.value)}\r\n                style={{ padding: 8, width: 320 }}\r\n                autoComplete=\"off\"\r\n            />\r\n\r\n            <datalist id={`${id}-list`}>\r\n                {filtered.map((name) => (\r\n                    <option key={name} value={name} />\r\n                ))}\r\n            </datalist>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}